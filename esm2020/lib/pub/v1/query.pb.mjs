import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as protoPubV1Models000 from '../../pub/v1/models/uid.pb';
import * as protoPubV1Models003 from '../../pub/v1/models/location.pb';
import * as protoPubV1Models010 from '../../pub/v1/models/call.pb';
import * as protoPubV1Models012 from '../../pub/v1/models/categories.pb';
import * as protoPubV1Models014 from '../../pub/v1/models/message.pb';
import * as protoPubV1Models015 from '../../pub/v1/models/media.pb';
import * as protoPubV1Models016 from '../../pub/v1/models/meta.pb';
import * as protoPubV1Models017 from '../../pub/v1/models/seen.pb';
import * as protoPubV1Models018 from '../../pub/v1/models/room-metadata.pb';
import * as protoPubV1Models019 from '../../pub/v1/models/avatar.pb';
import * as protoPubV1Models020 from '../../pub/v1/models/showcase.pb';
import * as protoPubV1Models021 from '../../pub/v1/models/platform.pb';
import * as protoPubV1Models022 from '../../pub/v1/models/announcement.pb';
export var QueryDirection;
(function (QueryDirection) {
    QueryDirection[QueryDirection["FORWARD_INCLUSIVE"] = 0] = "FORWARD_INCLUSIVE";
    QueryDirection[QueryDirection["BACKWARD_INCLUSIVE"] = 1] = "BACKWARD_INCLUSIVE";
})(QueryDirection || (QueryDirection = {}));
/**
 * Message implementation for proto.pub.v1.query.UserPreference
 */
export class UserPreference {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserPreference to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.platform = _value.platform
            ? new protoPubV1Models021.Platform(_value.platform)
            : undefined;
        this.language = _value.language;
        this.location = _value.location
            ? new protoPubV1Models003.Location(_value.location)
            : undefined;
        UserPreference.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserPreference();
        UserPreference.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.platform = _instance.platform || undefined;
        _instance.language = _instance.language || '';
        _instance.location = _instance.location || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.platform = new protoPubV1Models021.Platform();
                    _reader.readMessage(_instance.platform, protoPubV1Models021.Platform.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.language = _reader.readString();
                    break;
                case 3:
                    _instance.location = new protoPubV1Models003.Location();
                    _reader.readMessage(_instance.location, protoPubV1Models003.Location.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserPreference.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.platform) {
            _writer.writeMessage(1, _instance.platform, protoPubV1Models021.Platform.serializeBinaryToWriter);
        }
        if (_instance.language) {
            _writer.writeString(2, _instance.language);
        }
        if (_instance.location) {
            _writer.writeMessage(3, _instance.location, protoPubV1Models003.Location.serializeBinaryToWriter);
        }
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    get language() {
        return this._language;
    }
    set language(value) {
        this._language = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserPreference.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            platform: this.platform ? this.platform.toObject() : undefined,
            language: this.language,
            location: this.location ? this.location.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            platform: this.platform ? this.platform.toProtobufJSON(options) : null,
            language: this.language,
            location: this.location ? this.location.toProtobufJSON(options) : null
        };
    }
}
UserPreference.id = 'proto.pub.v1.query.UserPreference';
/**
 * Message implementation for proto.pub.v1.query.IdIsAvailableReq
 */
export class IdIsAvailableReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IdIsAvailableReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        IdIsAvailableReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IdIsAvailableReq();
        IdIsAvailableReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IdIsAvailableReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IdIsAvailableReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
IdIsAvailableReq.id = 'proto.pub.v1.query.IdIsAvailableReq';
/**
 * Message implementation for proto.pub.v1.query.IdIsAvailableRes
 */
export class IdIsAvailableRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IdIsAvailableRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isAvailable = _value.isAvailable;
        IdIsAvailableRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IdIsAvailableRes();
        IdIsAvailableRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isAvailable = _instance.isAvailable || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isAvailable = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IdIsAvailableRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isAvailable) {
            _writer.writeBool(1, _instance.isAvailable);
        }
    }
    get isAvailable() {
        return this._isAvailable;
    }
    set isAvailable(value) {
        this._isAvailable = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IdIsAvailableRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isAvailable: this.isAvailable
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isAvailable: this.isAvailable
        };
    }
}
IdIsAvailableRes.id = 'proto.pub.v1.query.IdIsAvailableRes';
/**
 * Message implementation for proto.pub.v1.query.SetIdReq
 */
export class SetIdReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SetIdReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        SetIdReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SetIdReq();
        SetIdReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SetIdReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SetIdReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
SetIdReq.id = 'proto.pub.v1.query.SetIdReq';
/**
 * Message implementation for proto.pub.v1.query.SetIdRes
 */
export class SetIdRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SetIdRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SetIdRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SetIdRes();
        SetIdRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SetIdRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SetIdRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SetIdRes.id = 'proto.pub.v1.query.SetIdRes';
/**
 * Message implementation for proto.pub.v1.query.SubscribeOnGroupActivityReq
 */
export class SubscribeOnGroupActivityReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SubscribeOnGroupActivityReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        SubscribeOnGroupActivityReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SubscribeOnGroupActivityReq();
        SubscribeOnGroupActivityReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SubscribeOnGroupActivityReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SubscribeOnGroupActivityReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
SubscribeOnGroupActivityReq.id = 'proto.pub.v1.query.SubscribeOnGroupActivityReq';
/**
 * Message implementation for proto.pub.v1.query.SubscribeOnGroupActivityRes
 */
export class SubscribeOnGroupActivityRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SubscribeOnGroupActivityRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SubscribeOnGroupActivityRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SubscribeOnGroupActivityRes();
        SubscribeOnGroupActivityRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SubscribeOnGroupActivityRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SubscribeOnGroupActivityRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SubscribeOnGroupActivityRes.id = 'proto.pub.v1.query.SubscribeOnGroupActivityRes';
/**
 * Message implementation for proto.pub.v1.query.BlockUidReq
 */
export class BlockUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BlockUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        BlockUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BlockUidReq();
        BlockUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BlockUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BlockUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
BlockUidReq.id = 'proto.pub.v1.query.BlockUidReq';
/**
 * Message implementation for proto.pub.v1.query.BlockUidRes
 */
export class BlockUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BlockUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        BlockUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BlockUidRes();
        BlockUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        BlockUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BlockUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
BlockUidRes.id = 'proto.pub.v1.query.BlockUidRes';
/**
 * Message implementation for proto.pub.v1.query.GetBlockedListReq
 */
export class GetBlockedListReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetBlockedListReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetBlockedListReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetBlockedListReq();
        GetBlockedListReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetBlockedListReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetBlockedListReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetBlockedListReq.id = 'proto.pub.v1.query.GetBlockedListReq';
/**
 * Message implementation for proto.pub.v1.query.GetBlockedListRes
 */
export class GetBlockedListRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetBlockedListRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uidList = (_value.uidList || []).map(m => new protoPubV1Models000.Uid(m));
        GetBlockedListRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetBlockedListRes();
        GetBlockedListRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uidList = _instance.uidList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models000.Uid();
                    _reader.readMessage(messageInitializer1, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    (_instance.uidList = _instance.uidList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetBlockedListRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uidList && _instance.uidList.length) {
            _writer.writeRepeatedMessage(1, _instance.uidList, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get uidList() {
        return this._uidList;
    }
    set uidList(value) {
        this._uidList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetBlockedListRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uidList: (this.uidList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uidList: (this.uidList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetBlockedListRes.id = 'proto.pub.v1.query.GetBlockedListRes';
/**
 * Message implementation for proto.pub.v1.query.UnblockUidReq
 */
export class UnblockUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnblockUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        UnblockUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnblockUidReq();
        UnblockUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UnblockUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnblockUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
UnblockUidReq.id = 'proto.pub.v1.query.UnblockUidReq';
/**
 * Message implementation for proto.pub.v1.query.UnblockUidRes
 */
export class UnblockUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnblockUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UnblockUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnblockUidRes();
        UnblockUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UnblockUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnblockUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UnblockUidRes.id = 'proto.pub.v1.query.UnblockUidRes';
/**
 * Message implementation for proto.pub.v1.query.ReportReq
 */
export class ReportReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        this.type = _value.type;
        this.reason = _value.reason;
        ReportReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportReq();
        ReportReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.type = _instance.type || '';
        _instance.reason = _instance.reason || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.type = _reader.readString();
                    break;
                case 3:
                    _instance.reason = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReportReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.type) {
            _writer.writeString(2, _instance.type);
        }
        if (_instance.reason) {
            _writer.writeString(3, _instance.reason);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get reason() {
        return this._reason;
    }
    set reason(value) {
        this._reason = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            type: this.type,
            reason: this.reason
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            type: this.type,
            reason: this.reason
        };
    }
}
ReportReq.id = 'proto.pub.v1.query.ReportReq';
/**
 * Message implementation for proto.pub.v1.query.ReportRes
 */
export class ReportRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ReportRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportRes();
        ReportRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ReportRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ReportRes.id = 'proto.pub.v1.query.ReportRes';
/**
 * Message implementation for proto.pub.v1.query.GetIdByUidReq
 */
export class GetIdByUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIdByUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        GetIdByUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIdByUidReq();
        GetIdByUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIdByUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIdByUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
GetIdByUidReq.id = 'proto.pub.v1.query.GetIdByUidReq';
/**
 * Message implementation for proto.pub.v1.query.GetIdByUidRes
 */
export class GetIdByUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIdByUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.isVerified = _value.isVerified;
        GetIdByUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIdByUidRes();
        GetIdByUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.isVerified = _instance.isVerified || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.isVerified = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIdByUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.isVerified) {
            _writer.writeBool(2, _instance.isVerified);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get isVerified() {
        return this._isVerified;
    }
    set isVerified(value) {
        this._isVerified = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIdByUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            isVerified: this.isVerified
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            isVerified: this.isVerified
        };
    }
}
GetIdByUidRes.id = 'proto.pub.v1.query.GetIdByUidRes';
/**
 * Message implementation for proto.pub.v1.query.GetUidByIdReq
 */
export class GetUidByIdReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUidByIdReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        GetUidByIdReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUidByIdReq();
        GetUidByIdReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUidByIdReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUidByIdReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
GetUidByIdReq.id = 'proto.pub.v1.query.GetUidByIdReq';
/**
 * Message implementation for proto.pub.v1.query.GetUidByIdRes
 */
export class GetUidByIdRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUidByIdRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        this.isVerified = _value.isVerified;
        GetUidByIdRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUidByIdRes();
        GetUidByIdRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.isVerified = _instance.isVerified || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.isVerified = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUidByIdRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.isVerified) {
            _writer.writeBool(2, _instance.isVerified);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get isVerified() {
        return this._isVerified;
    }
    set isVerified(value) {
        this._isVerified = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUidByIdRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            isVerified: this.isVerified
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            isVerified: this.isVerified
        };
    }
}
GetUidByIdRes.id = 'proto.pub.v1.query.GetUidByIdRes';
/**
 * Message implementation for proto.pub.v1.query.GetLastActivityReq
 */
export class GetLastActivityReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLastActivityReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new protoPubV1Models000.Uid(_value.uid) : undefined;
        GetLastActivityReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLastActivityReq();
        GetLastActivityReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLastActivityReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLastActivityReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
GetLastActivityReq.id = 'proto.pub.v1.query.GetLastActivityReq';
/**
 * Message implementation for proto.pub.v1.query.GetLastActivityRes
 */
export class GetLastActivityRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLastActivityRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.lastActivityTime = _value.lastActivityTime;
        GetLastActivityRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLastActivityRes();
        GetLastActivityRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.lastActivityTime = _instance.lastActivityTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.lastActivityTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLastActivityRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.lastActivityTime) {
            _writer.writeInt64String(1, _instance.lastActivityTime);
        }
    }
    get lastActivityTime() {
        return this._lastActivityTime;
    }
    set lastActivityTime(value) {
        this._lastActivityTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLastActivityRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            lastActivityTime: this.lastActivityTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            lastActivityTime: this.lastActivityTime
        };
    }
}
GetLastActivityRes.id = 'proto.pub.v1.query.GetLastActivityRes';
/**
 * Message implementation for proto.pub.v1.query.SearchUidReq
 */
export class SearchUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.text = _value.text;
        this.filterByCategory = _value.filterByCategory;
        this.category = _value.category;
        this.justSearchInId = _value.justSearchInId;
        this.justSearchInName = _value.justSearchInName;
        SearchUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchUidReq();
        SearchUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
        _instance.filterByCategory = _instance.filterByCategory || false;
        _instance.category = _instance.category || 0;
        _instance.justSearchInId = _instance.justSearchInId || false;
        _instance.justSearchInName = _instance.justSearchInName || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                case 2:
                    _instance.filterByCategory = _reader.readBool();
                    break;
                case 3:
                    _instance.category = _reader.readEnum();
                    break;
                case 4:
                    _instance.justSearchInId = _reader.readBool();
                    break;
                case 5:
                    _instance.justSearchInName = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(1, _instance.text);
        }
        if (_instance.filterByCategory) {
            _writer.writeBool(2, _instance.filterByCategory);
        }
        if (_instance.category) {
            _writer.writeEnum(3, _instance.category);
        }
        if (_instance.justSearchInId) {
            _writer.writeBool(4, _instance.justSearchInId);
        }
        if (_instance.justSearchInName) {
            _writer.writeBool(5, _instance.justSearchInName);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    get category() {
        return this._category;
    }
    set category(value) {
        this._category = value;
    }
    get justSearchInId() {
        return this._justSearchInId;
    }
    set justSearchInId(value) {
        this._justSearchInId = value;
    }
    get justSearchInName() {
        return this._justSearchInName;
    }
    set justSearchInName(value) {
        this._justSearchInName = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text,
            filterByCategory: this.filterByCategory,
            category: this.category,
            justSearchInId: this.justSearchInId,
            justSearchInName: this.justSearchInName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text,
            filterByCategory: this.filterByCategory,
            category: protoPubV1Models012.Categories[this.category === null || this.category === undefined
                ? 0
                : this.category],
            justSearchInId: this.justSearchInId,
            justSearchInName: this.justSearchInName
        };
    }
}
SearchUidReq.id = 'proto.pub.v1.query.SearchUidReq';
/**
 * Message implementation for proto.pub.v1.query.SearchUidRes
 */
export class SearchUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.itemList = (_value.itemList || []).map(m => new SearchUidRes.SearchUidItem(m));
        SearchUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchUidRes();
        SearchUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.itemList = _instance.itemList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new SearchUidRes.SearchUidItem();
                    _reader.readMessage(messageInitializer1, SearchUidRes.SearchUidItem.deserializeBinaryFromReader);
                    (_instance.itemList = _instance.itemList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.itemList && _instance.itemList.length) {
            _writer.writeRepeatedMessage(1, _instance.itemList, SearchUidRes.SearchUidItem.serializeBinaryToWriter);
        }
    }
    get itemList() {
        return this._itemList;
    }
    set itemList(value) {
        this._itemList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            itemList: (this.itemList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            itemList: (this.itemList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SearchUidRes.id = 'proto.pub.v1.query.SearchUidRes';
(function (SearchUidRes) {
    /**
     * Message implementation for proto.pub.v1.query.SearchUidItem
     */
    class SearchUidItem {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of SearchUidItem to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.uid = _value.uid
                ? new protoPubV1Models000.Uid(_value.uid)
                : undefined;
            this.id = _value.id;
            this.name = _value.name;
            SearchUidItem.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new SearchUidItem();
            SearchUidItem.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.uid = _instance.uid || undefined;
            _instance.id = _instance.id || '';
            _instance.name = _instance.name || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.uid = new protoPubV1Models000.Uid();
                        _reader.readMessage(_instance.uid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.id = _reader.readString();
                        break;
                    case 3:
                        _instance.name = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            SearchUidItem.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.uid) {
                _writer.writeMessage(1, _instance.uid, protoPubV1Models000.Uid.serializeBinaryToWriter);
            }
            if (_instance.id) {
                _writer.writeString(2, _instance.id);
            }
            if (_instance.name) {
                _writer.writeString(3, _instance.name);
            }
        }
        get uid() {
            return this._uid;
        }
        set uid(value) {
            this._uid = value;
        }
        get id() {
            return this._id;
        }
        set id(value) {
            this._id = value;
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            SearchUidItem.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                uid: this.uid ? this.uid.toObject() : undefined,
                id: this.id,
                name: this.name
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                uid: this.uid ? this.uid.toProtobufJSON(options) : null,
                id: this.id,
                name: this.name
            };
        }
    }
    SearchUidItem.id = 'proto.pub.v1.query.SearchUidItem';
    SearchUidRes.SearchUidItem = SearchUidItem;
})(SearchUidRes || (SearchUidRes = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMessagesReq
 */
export class FetchMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.type = _value.type;
        this.justNotHiddenMessages = _value.justNotHiddenMessages;
        this.justHiddenMessages = _value.justHiddenMessages;
        this.limit = _value.limit;
        FetchMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMessagesReq();
        FetchMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.type = _instance.type || 0;
        _instance.justNotHiddenMessages = _instance.justNotHiddenMessages || false;
        _instance.justHiddenMessages = _instance.justHiddenMessages || false;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.type = _reader.readEnum();
                    break;
                case 5:
                    _instance.justNotHiddenMessages = _reader.readBool();
                    break;
                case 6:
                    _instance.justHiddenMessages = _reader.readBool();
                    break;
                case 4:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.type) {
            _writer.writeEnum(3, _instance.type);
        }
        if (_instance.justNotHiddenMessages) {
            _writer.writeBool(5, _instance.justNotHiddenMessages);
        }
        if (_instance.justHiddenMessages) {
            _writer.writeBool(6, _instance.justHiddenMessages);
        }
        if (_instance.limit) {
            _writer.writeInt32(4, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get justNotHiddenMessages() {
        return this._justNotHiddenMessages;
    }
    set justNotHiddenMessages(value) {
        this._justNotHiddenMessages = value;
    }
    get justHiddenMessages() {
        return this._justHiddenMessages;
    }
    set justHiddenMessages(value) {
        this._justHiddenMessages = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            type: this.type,
            justNotHiddenMessages: this.justNotHiddenMessages,
            justHiddenMessages: this.justHiddenMessages,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            type: FetchMessagesReq.Type[this.type === null || this.type === undefined ? 0 : this.type],
            justNotHiddenMessages: this.justNotHiddenMessages,
            justHiddenMessages: this.justHiddenMessages,
            limit: this.limit
        };
    }
}
FetchMessagesReq.id = 'proto.pub.v1.query.FetchMessagesReq';
(function (FetchMessagesReq) {
    let Type;
    (function (Type) {
        Type[Type["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        Type[Type["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(Type = FetchMessagesReq.Type || (FetchMessagesReq.Type = {}));
})(FetchMessagesReq || (FetchMessagesReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMessagesRes
 */
export class FetchMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messages = (_value.messages || []).map(m => new protoPubV1Models014.Message(m));
        FetchMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMessagesRes();
        FetchMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messages = _instance.messages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models014.Message();
                    _reader.readMessage(messageInitializer1, protoPubV1Models014.Message.deserializeBinaryFromReader);
                    (_instance.messages = _instance.messages || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messages && _instance.messages.length) {
            _writer.writeRepeatedMessage(1, _instance.messages, protoPubV1Models014.Message.serializeBinaryToWriter);
        }
    }
    get messages() {
        return this._messages;
    }
    set messages(value) {
        this._messages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messages: (this.messages || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messages: (this.messages || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchMessagesRes.id = 'proto.pub.v1.query.FetchMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.CountIsHiddenMessagesReq
 */
export class CountIsHiddenMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CountIsHiddenMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.messageId = _value.messageId;
        CountIsHiddenMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CountIsHiddenMessagesReq();
        CountIsHiddenMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CountIsHiddenMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CountIsHiddenMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
CountIsHiddenMessagesReq.id = 'proto.pub.v1.query.CountIsHiddenMessagesReq';
/**
 * Message implementation for proto.pub.v1.query.CountIsHiddenMessagesRes
 */
export class CountIsHiddenMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CountIsHiddenMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.count = _value.count;
        CountIsHiddenMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CountIsHiddenMessagesRes();
        CountIsHiddenMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.count = _instance.count || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.count = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CountIsHiddenMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.count) {
            _writer.writeInt32(1, _instance.count);
        }
    }
    get count() {
        return this._count;
    }
    set count(value) {
        this._count = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CountIsHiddenMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            count: this.count
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            count: this.count
        };
    }
}
CountIsHiddenMessagesRes.id = 'proto.pub.v1.query.CountIsHiddenMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.GetAllUserRoomMetaReq
 */
export class GetAllUserRoomMetaReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAllUserRoomMetaReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        this.after = _value.after;
        GetAllUserRoomMetaReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAllUserRoomMetaReq();
        GetAllUserRoomMetaReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pointer = _instance.pointer || 0;
        _instance.limit = _instance.limit || 0;
        _instance.after = _instance.after || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pointer = _reader.readInt32();
                    break;
                case 2:
                    _instance.limit = _reader.readInt32();
                    break;
                case 3:
                    _instance.after = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAllUserRoomMetaReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pointer) {
            _writer.writeInt32(1, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(2, _instance.limit);
        }
        if (_instance.after) {
            _writer.writeInt64String(3, _instance.after);
        }
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get after() {
        return this._after;
    }
    set after(value) {
        this._after = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAllUserRoomMetaReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pointer: this.pointer,
            limit: this.limit,
            after: this.after
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pointer: this.pointer,
            limit: this.limit,
            after: this.after
        };
    }
}
GetAllUserRoomMetaReq.id = 'proto.pub.v1.query.GetAllUserRoomMetaReq';
/**
 * Message implementation for proto.pub.v1.query.GetAllUserRoomMetaRes
 */
export class GetAllUserRoomMetaRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAllUserRoomMetaRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomsMeta = (_value.roomsMeta || []).map(m => new protoPubV1Models018.RoomMetadata(m));
        this.finished = _value.finished;
        GetAllUserRoomMetaRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAllUserRoomMetaRes();
        GetAllUserRoomMetaRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomsMeta = _instance.roomsMeta || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models018.RoomMetadata();
                    _reader.readMessage(messageInitializer1, protoPubV1Models018.RoomMetadata.deserializeBinaryFromReader);
                    (_instance.roomsMeta = _instance.roomsMeta || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAllUserRoomMetaRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomsMeta && _instance.roomsMeta.length) {
            _writer.writeRepeatedMessage(1, _instance.roomsMeta, protoPubV1Models018.RoomMetadata.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get roomsMeta() {
        return this._roomsMeta;
    }
    set roomsMeta(value) {
        this._roomsMeta = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAllUserRoomMetaRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomsMeta: (this.roomsMeta || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomsMeta: (this.roomsMeta || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
GetAllUserRoomMetaRes.id = 'proto.pub.v1.query.GetAllUserRoomMetaRes';
/**
 * Message implementation for proto.pub.v1.query.GetUserRoomMetaReq
 */
export class GetUserRoomMetaReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserRoomMetaReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        GetUserRoomMetaReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserRoomMetaReq();
        GetUserRoomMetaReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserRoomMetaReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserRoomMetaReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
GetUserRoomMetaReq.id = 'proto.pub.v1.query.GetUserRoomMetaReq';
/**
 * Message implementation for proto.pub.v1.query.GetUserRoomMetaRes
 */
export class GetUserRoomMetaRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserRoomMetaRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomMeta = _value.roomMeta
            ? new protoPubV1Models018.RoomMetadata(_value.roomMeta)
            : undefined;
        GetUserRoomMetaRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserRoomMetaRes();
        GetUserRoomMetaRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomMeta = _instance.roomMeta || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomMeta = new protoPubV1Models018.RoomMetadata();
                    _reader.readMessage(_instance.roomMeta, protoPubV1Models018.RoomMetadata.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserRoomMetaRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomMeta) {
            _writer.writeMessage(1, _instance.roomMeta, protoPubV1Models018.RoomMetadata.serializeBinaryToWriter);
        }
    }
    get roomMeta() {
        return this._roomMeta;
    }
    set roomMeta(value) {
        this._roomMeta = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserRoomMetaRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomMeta: this.roomMeta ? this.roomMeta.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomMeta: this.roomMeta ? this.roomMeta.toProtobufJSON(options) : null
        };
    }
}
GetUserRoomMetaRes.id = 'proto.pub.v1.query.GetUserRoomMetaRes';
/**
 * Message implementation for proto.pub.v1.query.GetUserLastDeliveryAckReq
 */
export class GetUserLastDeliveryAckReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserLastDeliveryAckReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetUserLastDeliveryAckReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserLastDeliveryAckReq();
        GetUserLastDeliveryAckReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetUserLastDeliveryAckReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserLastDeliveryAckReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetUserLastDeliveryAckReq.id = 'proto.pub.v1.query.GetUserLastDeliveryAckReq';
/**
 * Message implementation for proto.pub.v1.query.GetUserLastDeliveryAckRes
 */
export class GetUserLastDeliveryAckRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserLastDeliveryAckRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.lastMessageDeliveryAck = _value.lastMessageDeliveryAck
            ? new protoPubV1Models014.MessageDeliveryAck(_value.lastMessageDeliveryAck)
            : undefined;
        GetUserLastDeliveryAckRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserLastDeliveryAckRes();
        GetUserLastDeliveryAckRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.lastMessageDeliveryAck =
            _instance.lastMessageDeliveryAck || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.lastMessageDeliveryAck = new protoPubV1Models014.MessageDeliveryAck();
                    _reader.readMessage(_instance.lastMessageDeliveryAck, protoPubV1Models014.MessageDeliveryAck.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserLastDeliveryAckRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.lastMessageDeliveryAck) {
            _writer.writeMessage(1, _instance.lastMessageDeliveryAck, protoPubV1Models014.MessageDeliveryAck.serializeBinaryToWriter);
        }
    }
    get lastMessageDeliveryAck() {
        return this._lastMessageDeliveryAck;
    }
    set lastMessageDeliveryAck(value) {
        this._lastMessageDeliveryAck = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserLastDeliveryAckRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            lastMessageDeliveryAck: this.lastMessageDeliveryAck
                ? this.lastMessageDeliveryAck.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            lastMessageDeliveryAck: this.lastMessageDeliveryAck
                ? this.lastMessageDeliveryAck.toProtobufJSON(options)
                : null
        };
    }
}
GetUserLastDeliveryAckRes.id = 'proto.pub.v1.query.GetUserLastDeliveryAckRes';
/**
 * Message implementation for proto.pub.v1.query.GetMediaMetadataReq
 */
export class GetMediaMetadataReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMediaMetadataReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.with = _value.with
            ? new protoPubV1Models000.Uid(_value.with)
            : undefined;
        GetMediaMetadataReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMediaMetadataReq();
        GetMediaMetadataReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.with = _instance.with || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.with = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.with, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMediaMetadataReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.with) {
            _writer.writeMessage(1, _instance.with, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get with() {
        return this._with;
    }
    set with(value) {
        this._with = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMediaMetadataReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            with: this.with ? this.with.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            with: this.with ? this.with.toProtobufJSON(options) : null
        };
    }
}
GetMediaMetadataReq.id = 'proto.pub.v1.query.GetMediaMetadataReq';
/**
 * Message implementation for proto.pub.v1.query.GetMediaMetadataRes
 */
export class GetMediaMetadataRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMediaMetadataRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.allImagesCount = _value.allImagesCount;
        this.allVideosCount = _value.allVideosCount;
        this.allFilesCount = _value.allFilesCount;
        this.allAudiosCount = _value.allAudiosCount;
        this.allMusicsCount = _value.allMusicsCount;
        this.allDocumentsCount = _value.allDocumentsCount;
        this.allLinksCount = _value.allLinksCount;
        GetMediaMetadataRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMediaMetadataRes();
        GetMediaMetadataRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.allImagesCount = _instance.allImagesCount || '0';
        _instance.allVideosCount = _instance.allVideosCount || '0';
        _instance.allFilesCount = _instance.allFilesCount || '0';
        _instance.allAudiosCount = _instance.allAudiosCount || '0';
        _instance.allMusicsCount = _instance.allMusicsCount || '0';
        _instance.allDocumentsCount = _instance.allDocumentsCount || '0';
        _instance.allLinksCount = _instance.allLinksCount || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.allImagesCount = _reader.readInt64String();
                    break;
                case 2:
                    _instance.allVideosCount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.allFilesCount = _reader.readInt64String();
                    break;
                case 4:
                    _instance.allAudiosCount = _reader.readInt64String();
                    break;
                case 5:
                    _instance.allMusicsCount = _reader.readInt64String();
                    break;
                case 6:
                    _instance.allDocumentsCount = _reader.readInt64String();
                    break;
                case 7:
                    _instance.allLinksCount = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMediaMetadataRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.allImagesCount) {
            _writer.writeInt64String(1, _instance.allImagesCount);
        }
        if (_instance.allVideosCount) {
            _writer.writeInt64String(2, _instance.allVideosCount);
        }
        if (_instance.allFilesCount) {
            _writer.writeInt64String(3, _instance.allFilesCount);
        }
        if (_instance.allAudiosCount) {
            _writer.writeInt64String(4, _instance.allAudiosCount);
        }
        if (_instance.allMusicsCount) {
            _writer.writeInt64String(5, _instance.allMusicsCount);
        }
        if (_instance.allDocumentsCount) {
            _writer.writeInt64String(6, _instance.allDocumentsCount);
        }
        if (_instance.allLinksCount) {
            _writer.writeInt64String(7, _instance.allLinksCount);
        }
    }
    get allImagesCount() {
        return this._allImagesCount;
    }
    set allImagesCount(value) {
        this._allImagesCount = value;
    }
    get allVideosCount() {
        return this._allVideosCount;
    }
    set allVideosCount(value) {
        this._allVideosCount = value;
    }
    get allFilesCount() {
        return this._allFilesCount;
    }
    set allFilesCount(value) {
        this._allFilesCount = value;
    }
    get allAudiosCount() {
        return this._allAudiosCount;
    }
    set allAudiosCount(value) {
        this._allAudiosCount = value;
    }
    get allMusicsCount() {
        return this._allMusicsCount;
    }
    set allMusicsCount(value) {
        this._allMusicsCount = value;
    }
    get allDocumentsCount() {
        return this._allDocumentsCount;
    }
    set allDocumentsCount(value) {
        this._allDocumentsCount = value;
    }
    get allLinksCount() {
        return this._allLinksCount;
    }
    set allLinksCount(value) {
        this._allLinksCount = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMediaMetadataRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            allImagesCount: this.allImagesCount,
            allVideosCount: this.allVideosCount,
            allFilesCount: this.allFilesCount,
            allAudiosCount: this.allAudiosCount,
            allMusicsCount: this.allMusicsCount,
            allDocumentsCount: this.allDocumentsCount,
            allLinksCount: this.allLinksCount
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            allImagesCount: this.allImagesCount,
            allVideosCount: this.allVideosCount,
            allFilesCount: this.allFilesCount,
            allAudiosCount: this.allAudiosCount,
            allMusicsCount: this.allMusicsCount,
            allDocumentsCount: this.allDocumentsCount,
            allLinksCount: this.allLinksCount
        };
    }
}
GetMediaMetadataRes.id = 'proto.pub.v1.query.GetMediaMetadataRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMediasReq
 */
export class FetchMediasReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMediasReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.year = _value.year;
        this.mediaType = _value.mediaType;
        this.fetchingDirectionType = _value.fetchingDirectionType;
        this.limit = _value.limit;
        FetchMediasReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMediasReq();
        FetchMediasReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.year = _instance.year || 0;
        _instance.mediaType = _instance.mediaType || 0;
        _instance.fetchingDirectionType = _instance.fetchingDirectionType || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.year = _reader.readInt32();
                    break;
                case 4:
                    _instance.mediaType = _reader.readEnum();
                    break;
                case 5:
                    _instance.fetchingDirectionType = _reader.readEnum();
                    break;
                case 6:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMediasReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.year) {
            _writer.writeInt32(3, _instance.year);
        }
        if (_instance.mediaType) {
            _writer.writeEnum(4, _instance.mediaType);
        }
        if (_instance.fetchingDirectionType) {
            _writer.writeEnum(5, _instance.fetchingDirectionType);
        }
        if (_instance.limit) {
            _writer.writeInt32(6, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get year() {
        return this._year;
    }
    set year(value) {
        this._year = value;
    }
    get mediaType() {
        return this._mediaType;
    }
    set mediaType(value) {
        this._mediaType = value;
    }
    get fetchingDirectionType() {
        return this._fetchingDirectionType;
    }
    set fetchingDirectionType(value) {
        this._fetchingDirectionType = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMediasReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            year: this.year,
            mediaType: this.mediaType,
            fetchingDirectionType: this.fetchingDirectionType,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            year: this.year,
            mediaType: FetchMediasReq.MediaType[this.mediaType === null || this.mediaType === undefined
                ? 0
                : this.mediaType],
            fetchingDirectionType: FetchMediasReq.FetchingDirectionType[this.fetchingDirectionType === null ||
                this.fetchingDirectionType === undefined
                ? 0
                : this.fetchingDirectionType],
            limit: this.limit
        };
    }
}
FetchMediasReq.id = 'proto.pub.v1.query.FetchMediasReq';
(function (FetchMediasReq) {
    let MediaType;
    (function (MediaType) {
        MediaType[MediaType["IMAGES"] = 0] = "IMAGES";
        MediaType[MediaType["VIDEOS"] = 1] = "VIDEOS";
        MediaType[MediaType["FILES"] = 2] = "FILES";
        MediaType[MediaType["AUDIOS"] = 3] = "AUDIOS";
        MediaType[MediaType["MUSICS"] = 4] = "MUSICS";
        MediaType[MediaType["DOCUMENTS"] = 5] = "DOCUMENTS";
        MediaType[MediaType["LINKS"] = 6] = "LINKS";
    })(MediaType = FetchMediasReq.MediaType || (FetchMediasReq.MediaType = {}));
    let FetchingDirectionType;
    (function (FetchingDirectionType) {
        FetchingDirectionType[FetchingDirectionType["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        FetchingDirectionType[FetchingDirectionType["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(FetchingDirectionType = FetchMediasReq.FetchingDirectionType || (FetchMediasReq.FetchingDirectionType = {}));
})(FetchMediasReq || (FetchMediasReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMediasRes
 */
export class FetchMediasRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMediasRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.medias = (_value.medias || []).map(m => new protoPubV1Models015.Media(m));
        FetchMediasRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMediasRes();
        FetchMediasRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.medias = _instance.medias || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models015.Media();
                    _reader.readMessage(messageInitializer1, protoPubV1Models015.Media.deserializeBinaryFromReader);
                    (_instance.medias = _instance.medias || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMediasRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.medias && _instance.medias.length) {
            _writer.writeRepeatedMessage(1, _instance.medias, protoPubV1Models015.Media.serializeBinaryToWriter);
        }
    }
    get medias() {
        return this._medias;
    }
    set medias(value) {
        this._medias = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMediasRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            medias: (this.medias || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            medias: (this.medias || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchMediasRes.id = 'proto.pub.v1.query.FetchMediasRes';
/**
 * Message implementation for proto.pub.v1.query.GetMetaCountsReq
 */
export class GetMetaCountsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMetaCountsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        GetMetaCountsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMetaCountsReq();
        GetMetaCountsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMetaCountsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMetaCountsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
GetMetaCountsReq.id = 'proto.pub.v1.query.GetMetaCountsReq';
/**
 * Message implementation for proto.pub.v1.query.GetMetaCountsRes
 */
export class GetMetaCountsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMetaCountsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.allMediaCount = _value.allMediaCount;
        this.allFilesCount = _value.allFilesCount;
        this.allMusicsCount = _value.allMusicsCount;
        this.allVoicesCount = _value.allVoicesCount;
        this.allLinksCount = _value.allLinksCount;
        this.allCallCount = _value.allCallCount;
        this.allMediaDeletedCount = _value.allMediaDeletedCount;
        this.allFilesDeletedCount = _value.allFilesDeletedCount;
        this.allMusicsDeletedCount = _value.allMusicsDeletedCount;
        this.allVoicesDeletedCount = _value.allVoicesDeletedCount;
        this.allLinksDeletedCount = _value.allLinksDeletedCount;
        this.allCallDeletedCount = _value.allCallDeletedCount;
        GetMetaCountsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMetaCountsRes();
        GetMetaCountsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.allMediaCount = _instance.allMediaCount || '0';
        _instance.allFilesCount = _instance.allFilesCount || '0';
        _instance.allMusicsCount = _instance.allMusicsCount || '0';
        _instance.allVoicesCount = _instance.allVoicesCount || '0';
        _instance.allLinksCount = _instance.allLinksCount || '0';
        _instance.allCallCount = _instance.allCallCount || '0';
        _instance.allMediaDeletedCount = _instance.allMediaDeletedCount || '0';
        _instance.allFilesDeletedCount = _instance.allFilesDeletedCount || '0';
        _instance.allMusicsDeletedCount = _instance.allMusicsDeletedCount || '0';
        _instance.allVoicesDeletedCount = _instance.allVoicesDeletedCount || '0';
        _instance.allLinksDeletedCount = _instance.allLinksDeletedCount || '0';
        _instance.allCallDeletedCount = _instance.allCallDeletedCount || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.allMediaCount = _reader.readInt64String();
                    break;
                case 2:
                    _instance.allFilesCount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.allMusicsCount = _reader.readInt64String();
                    break;
                case 4:
                    _instance.allVoicesCount = _reader.readInt64String();
                    break;
                case 5:
                    _instance.allLinksCount = _reader.readInt64String();
                    break;
                case 6:
                    _instance.allCallCount = _reader.readInt64String();
                    break;
                case 7:
                    _instance.allMediaDeletedCount = _reader.readInt64String();
                    break;
                case 8:
                    _instance.allFilesDeletedCount = _reader.readInt64String();
                    break;
                case 9:
                    _instance.allMusicsDeletedCount = _reader.readInt64String();
                    break;
                case 10:
                    _instance.allVoicesDeletedCount = _reader.readInt64String();
                    break;
                case 11:
                    _instance.allLinksDeletedCount = _reader.readInt64String();
                    break;
                case 12:
                    _instance.allCallDeletedCount = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMetaCountsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.allMediaCount) {
            _writer.writeInt64String(1, _instance.allMediaCount);
        }
        if (_instance.allFilesCount) {
            _writer.writeInt64String(2, _instance.allFilesCount);
        }
        if (_instance.allMusicsCount) {
            _writer.writeInt64String(3, _instance.allMusicsCount);
        }
        if (_instance.allVoicesCount) {
            _writer.writeInt64String(4, _instance.allVoicesCount);
        }
        if (_instance.allLinksCount) {
            _writer.writeInt64String(5, _instance.allLinksCount);
        }
        if (_instance.allCallCount) {
            _writer.writeInt64String(6, _instance.allCallCount);
        }
        if (_instance.allMediaDeletedCount) {
            _writer.writeInt64String(7, _instance.allMediaDeletedCount);
        }
        if (_instance.allFilesDeletedCount) {
            _writer.writeInt64String(8, _instance.allFilesDeletedCount);
        }
        if (_instance.allMusicsDeletedCount) {
            _writer.writeInt64String(9, _instance.allMusicsDeletedCount);
        }
        if (_instance.allVoicesDeletedCount) {
            _writer.writeInt64String(10, _instance.allVoicesDeletedCount);
        }
        if (_instance.allLinksDeletedCount) {
            _writer.writeInt64String(11, _instance.allLinksDeletedCount);
        }
        if (_instance.allCallDeletedCount) {
            _writer.writeInt64String(12, _instance.allCallDeletedCount);
        }
    }
    get allMediaCount() {
        return this._allMediaCount;
    }
    set allMediaCount(value) {
        this._allMediaCount = value;
    }
    get allFilesCount() {
        return this._allFilesCount;
    }
    set allFilesCount(value) {
        this._allFilesCount = value;
    }
    get allMusicsCount() {
        return this._allMusicsCount;
    }
    set allMusicsCount(value) {
        this._allMusicsCount = value;
    }
    get allVoicesCount() {
        return this._allVoicesCount;
    }
    set allVoicesCount(value) {
        this._allVoicesCount = value;
    }
    get allLinksCount() {
        return this._allLinksCount;
    }
    set allLinksCount(value) {
        this._allLinksCount = value;
    }
    get allCallCount() {
        return this._allCallCount;
    }
    set allCallCount(value) {
        this._allCallCount = value;
    }
    get allMediaDeletedCount() {
        return this._allMediaDeletedCount;
    }
    set allMediaDeletedCount(value) {
        this._allMediaDeletedCount = value;
    }
    get allFilesDeletedCount() {
        return this._allFilesDeletedCount;
    }
    set allFilesDeletedCount(value) {
        this._allFilesDeletedCount = value;
    }
    get allMusicsDeletedCount() {
        return this._allMusicsDeletedCount;
    }
    set allMusicsDeletedCount(value) {
        this._allMusicsDeletedCount = value;
    }
    get allVoicesDeletedCount() {
        return this._allVoicesDeletedCount;
    }
    set allVoicesDeletedCount(value) {
        this._allVoicesDeletedCount = value;
    }
    get allLinksDeletedCount() {
        return this._allLinksDeletedCount;
    }
    set allLinksDeletedCount(value) {
        this._allLinksDeletedCount = value;
    }
    get allCallDeletedCount() {
        return this._allCallDeletedCount;
    }
    set allCallDeletedCount(value) {
        this._allCallDeletedCount = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMetaCountsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            allMediaCount: this.allMediaCount,
            allFilesCount: this.allFilesCount,
            allMusicsCount: this.allMusicsCount,
            allVoicesCount: this.allVoicesCount,
            allLinksCount: this.allLinksCount,
            allCallCount: this.allCallCount,
            allMediaDeletedCount: this.allMediaDeletedCount,
            allFilesDeletedCount: this.allFilesDeletedCount,
            allMusicsDeletedCount: this.allMusicsDeletedCount,
            allVoicesDeletedCount: this.allVoicesDeletedCount,
            allLinksDeletedCount: this.allLinksDeletedCount,
            allCallDeletedCount: this.allCallDeletedCount
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            allMediaCount: this.allMediaCount,
            allFilesCount: this.allFilesCount,
            allMusicsCount: this.allMusicsCount,
            allVoicesCount: this.allVoicesCount,
            allLinksCount: this.allLinksCount,
            allCallCount: this.allCallCount,
            allMediaDeletedCount: this.allMediaDeletedCount,
            allFilesDeletedCount: this.allFilesDeletedCount,
            allMusicsDeletedCount: this.allMusicsDeletedCount,
            allVoicesDeletedCount: this.allVoicesDeletedCount,
            allLinksDeletedCount: this.allLinksDeletedCount,
            allCallDeletedCount: this.allCallDeletedCount
        };
    }
}
GetMetaCountsRes.id = 'proto.pub.v1.query.GetMetaCountsRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMetaListReq
 */
export class FetchMetaListReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMetaListReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.group = _value.group;
        this.direction = _value.direction;
        this.limit = _value.limit;
        FetchMetaListReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMetaListReq();
        FetchMetaListReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.group = _instance.group || 0;
        _instance.direction = _instance.direction || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.group = _reader.readEnum();
                    break;
                case 4:
                    _instance.direction = _reader.readEnum();
                    break;
                case 5:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMetaListReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.group) {
            _writer.writeEnum(3, _instance.group);
        }
        if (_instance.direction) {
            _writer.writeEnum(4, _instance.direction);
        }
        if (_instance.limit) {
            _writer.writeInt32(5, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        this._direction = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMetaListReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            group: this.group,
            direction: this.direction,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            group: protoPubV1Models016.MetaGroup[this.group === null || this.group === undefined ? 0 : this.group],
            direction: QueryDirection[this.direction === null || this.direction === undefined
                ? 0
                : this.direction],
            limit: this.limit
        };
    }
}
FetchMetaListReq.id = 'proto.pub.v1.query.FetchMetaListReq';
/**
 * Message implementation for proto.pub.v1.query.FetchMetaListRes
 */
export class FetchMetaListRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMetaListRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.metaList = (_value.metaList || []).map(m => new protoPubV1Models016.Meta(m));
        FetchMetaListRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMetaListRes();
        FetchMetaListRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.metaList = _instance.metaList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models016.Meta();
                    _reader.readMessage(messageInitializer1, protoPubV1Models016.Meta.deserializeBinaryFromReader);
                    (_instance.metaList = _instance.metaList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMetaListRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.metaList && _instance.metaList.length) {
            _writer.writeRepeatedMessage(1, _instance.metaList, protoPubV1Models016.Meta.serializeBinaryToWriter);
        }
    }
    get metaList() {
        return this._metaList;
    }
    set metaList(value) {
        this._metaList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMetaListRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            metaList: (this.metaList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            metaList: (this.metaList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchMetaListRes.id = 'proto.pub.v1.query.FetchMetaListRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMessageMetaIndexReq
 */
export class FetchMessageMetaIndexReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMessageMetaIndexReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.messageId = _value.messageId;
        this.group = _value.group;
        FetchMessageMetaIndexReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMessageMetaIndexReq();
        FetchMessageMetaIndexReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.messageId = _instance.messageId || '0';
        _instance.group = _instance.group || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.group = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMessageMetaIndexReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
        if (_instance.group) {
            _writer.writeEnum(3, _instance.group);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMessageMetaIndexReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            messageId: this.messageId,
            group: this.group
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            messageId: this.messageId,
            group: protoPubV1Models016.MetaGroup[this.group === null || this.group === undefined ? 0 : this.group]
        };
    }
}
FetchMessageMetaIndexReq.id = 'proto.pub.v1.query.FetchMessageMetaIndexReq';
/**
 * Message implementation for proto.pub.v1.query.FetchMessageMetaIndexRes
 */
export class FetchMessageMetaIndexRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMessageMetaIndexRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.index = _value.index;
        FetchMessageMetaIndexRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMessageMetaIndexRes();
        FetchMessageMetaIndexRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.index = _instance.index || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.index = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMessageMetaIndexRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.index) {
            _writer.writeInt64String(1, _instance.index);
        }
    }
    get index() {
        return this._index;
    }
    set index(value) {
        this._index = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMessageMetaIndexRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            index: this.index
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            index: this.index
        };
    }
}
FetchMessageMetaIndexRes.id = 'proto.pub.v1.query.FetchMessageMetaIndexRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMetaDeletedIndexesReq
 */
export class FetchMetaDeletedIndexesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMetaDeletedIndexesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.group = _value.group;
        this.direction = _value.direction;
        this.limit = _value.limit;
        FetchMetaDeletedIndexesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMetaDeletedIndexesReq();
        FetchMetaDeletedIndexesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.group = _instance.group || 0;
        _instance.direction = _instance.direction || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.group = _reader.readEnum();
                    break;
                case 4:
                    _instance.direction = _reader.readEnum();
                    break;
                case 5:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMetaDeletedIndexesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.group) {
            _writer.writeEnum(3, _instance.group);
        }
        if (_instance.direction) {
            _writer.writeEnum(4, _instance.direction);
        }
        if (_instance.limit) {
            _writer.writeInt32(5, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        this._direction = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMetaDeletedIndexesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            group: this.group,
            direction: this.direction,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            group: protoPubV1Models016.MetaGroup[this.group === null || this.group === undefined ? 0 : this.group],
            direction: QueryDirection[this.direction === null || this.direction === undefined
                ? 0
                : this.direction],
            limit: this.limit
        };
    }
}
FetchMetaDeletedIndexesReq.id = 'proto.pub.v1.query.FetchMetaDeletedIndexesReq';
/**
 * Message implementation for proto.pub.v1.query.FetchMetaDeletedIndexesRes
 */
export class FetchMetaDeletedIndexesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMetaDeletedIndexesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.deletedIndexes = (_value.deletedIndexes || []).slice();
        FetchMetaDeletedIndexesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMetaDeletedIndexesRes();
        FetchMetaDeletedIndexesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.deletedIndexes = _instance.deletedIndexes || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.deletedIndexes = _instance.deletedIndexes || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMetaDeletedIndexesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.deletedIndexes && _instance.deletedIndexes.length) {
            _writer.writePackedInt64String(1, _instance.deletedIndexes);
        }
    }
    get deletedIndexes() {
        return this._deletedIndexes;
    }
    set deletedIndexes(value) {
        this._deletedIndexes = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMetaDeletedIndexesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            deletedIndexes: (this.deletedIndexes || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            deletedIndexes: (this.deletedIndexes || []).slice()
        };
    }
}
FetchMetaDeletedIndexesRes.id = 'proto.pub.v1.query.FetchMetaDeletedIndexesRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMentionListReq
 */
export class FetchMentionListReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMentionListReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new protoPubV1Models000.Uid(_value.group)
            : undefined;
        this.afterId = _value.afterId;
        FetchMentionListReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMentionListReq();
        FetchMentionListReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.afterId = _instance.afterId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.group, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.afterId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMentionListReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.afterId) {
            _writer.writeInt64String(2, _instance.afterId);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get afterId() {
        return this._afterId;
    }
    set afterId(value) {
        this._afterId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMentionListReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            afterId: this.afterId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            afterId: this.afterId
        };
    }
}
FetchMentionListReq.id = 'proto.pub.v1.query.FetchMentionListReq';
/**
 * Message implementation for proto.pub.v1.query.FetchMentionListRes
 */
export class FetchMentionListRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMentionListRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.idList = (_value.idList || []).slice();
        FetchMentionListRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMentionListRes();
        FetchMentionListRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.idList = _instance.idList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.idList = _instance.idList || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMentionListRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.idList && _instance.idList.length) {
            _writer.writePackedInt64String(1, _instance.idList);
        }
    }
    get idList() {
        return this._idList;
    }
    set idList(value) {
        this._idList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMentionListRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            idList: (this.idList || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            idList: (this.idList || []).slice()
        };
    }
}
FetchMentionListRes.id = 'proto.pub.v1.query.FetchMentionListRes';
/**
 * Message implementation for proto.pub.v1.query.FetchCurrentUserSeenDataReq
 */
export class FetchCurrentUserSeenDataReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchCurrentUserSeenDataReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        FetchCurrentUserSeenDataReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchCurrentUserSeenDataReq();
        FetchCurrentUserSeenDataReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchCurrentUserSeenDataReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchCurrentUserSeenDataReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
FetchCurrentUserSeenDataReq.id = 'proto.pub.v1.query.FetchCurrentUserSeenDataReq';
/**
 * Message implementation for proto.pub.v1.query.FetchCurrentUserSeenDataRes
 */
export class FetchCurrentUserSeenDataRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchCurrentUserSeenDataRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.seen = _value.seen
            ? new protoPubV1Models017.Seen(_value.seen)
            : undefined;
        FetchCurrentUserSeenDataRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchCurrentUserSeenDataRes();
        FetchCurrentUserSeenDataRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.seen = _instance.seen || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.seen = new protoPubV1Models017.Seen();
                    _reader.readMessage(_instance.seen, protoPubV1Models017.Seen.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchCurrentUserSeenDataRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.seen) {
            _writer.writeMessage(1, _instance.seen, protoPubV1Models017.Seen.serializeBinaryToWriter);
        }
    }
    get seen() {
        return this._seen;
    }
    set seen(value) {
        this._seen = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchCurrentUserSeenDataRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            seen: this.seen ? this.seen.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            seen: this.seen ? this.seen.toProtobufJSON(options) : null
        };
    }
}
FetchCurrentUserSeenDataRes.id = 'proto.pub.v1.query.FetchCurrentUserSeenDataRes';
/**
 * Message implementation for proto.pub.v1.query.FetchLastOtherUserSeenDataReq
 */
export class FetchLastOtherUserSeenDataReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchLastOtherUserSeenDataReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        FetchLastOtherUserSeenDataReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchLastOtherUserSeenDataReq();
        FetchLastOtherUserSeenDataReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchLastOtherUserSeenDataReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchLastOtherUserSeenDataReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
FetchLastOtherUserSeenDataReq.id = 'proto.pub.v1.query.FetchLastOtherUserSeenDataReq';
/**
 * Message implementation for proto.pub.v1.query.FetchLastOtherUserSeenDataRes
 */
export class FetchLastOtherUserSeenDataRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchLastOtherUserSeenDataRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.seen = _value.seen
            ? new protoPubV1Models017.Seen(_value.seen)
            : undefined;
        FetchLastOtherUserSeenDataRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchLastOtherUserSeenDataRes();
        FetchLastOtherUserSeenDataRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.seen = _instance.seen || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.seen = new protoPubV1Models017.Seen();
                    _reader.readMessage(_instance.seen, protoPubV1Models017.Seen.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchLastOtherUserSeenDataRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.seen) {
            _writer.writeMessage(1, _instance.seen, protoPubV1Models017.Seen.serializeBinaryToWriter);
        }
    }
    get seen() {
        return this._seen;
    }
    set seen(value) {
        this._seen = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchLastOtherUserSeenDataRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            seen: this.seen ? this.seen.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            seen: this.seen ? this.seen.toProtobufJSON(options) : null
        };
    }
}
FetchLastOtherUserSeenDataRes.id = 'proto.pub.v1.query.FetchLastOtherUserSeenDataRes';
/**
 * Message implementation for proto.pub.v1.query.FetchSeenCountOfChannelMessageReq
 */
export class FetchSeenCountOfChannelMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchSeenCountOfChannelMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        FetchSeenCountOfChannelMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchSeenCountOfChannelMessageReq();
        FetchSeenCountOfChannelMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchSeenCountOfChannelMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(3, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchSeenCountOfChannelMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            limit: this.limit
        };
    }
}
FetchSeenCountOfChannelMessageReq.id = 'proto.pub.v1.query.FetchSeenCountOfChannelMessageReq';
/**
 * Message implementation for proto.pub.v1.query.FetchSeenCountOfChannelMessageRes
 */
export class FetchSeenCountOfChannelMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchSeenCountOfChannelMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.seenCounts = (_value.seenCounts || []).map(m => new FetchSeenCountOfChannelMessageRes.SeenCount(m));
        FetchSeenCountOfChannelMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchSeenCountOfChannelMessageRes();
        FetchSeenCountOfChannelMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.seenCounts = _instance.seenCounts || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new FetchSeenCountOfChannelMessageRes.SeenCount();
                    _reader.readMessage(messageInitializer1, FetchSeenCountOfChannelMessageRes.SeenCount
                        .deserializeBinaryFromReader);
                    (_instance.seenCounts = _instance.seenCounts || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchSeenCountOfChannelMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.seenCounts && _instance.seenCounts.length) {
            _writer.writeRepeatedMessage(1, _instance.seenCounts, FetchSeenCountOfChannelMessageRes.SeenCount.serializeBinaryToWriter);
        }
    }
    get seenCounts() {
        return this._seenCounts;
    }
    set seenCounts(value) {
        this._seenCounts = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchSeenCountOfChannelMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            seenCounts: (this.seenCounts || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            seenCounts: (this.seenCounts || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchSeenCountOfChannelMessageRes.id = 'proto.pub.v1.query.FetchSeenCountOfChannelMessageRes';
(function (FetchSeenCountOfChannelMessageRes) {
    /**
     * Message implementation for proto.pub.v1.query.SeenCount
     */
    class SeenCount {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of SeenCount to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.count = _value.count;
            this.messageId = _value.messageId;
            SeenCount.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new SeenCount();
            SeenCount.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.count = _instance.count || '0';
            _instance.messageId = _instance.messageId || '0';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.count = _reader.readInt64String();
                        break;
                    case 2:
                        _instance.messageId = _reader.readInt64String();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            SeenCount.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.count) {
                _writer.writeInt64String(1, _instance.count);
            }
            if (_instance.messageId) {
                _writer.writeInt64String(2, _instance.messageId);
            }
        }
        get count() {
            return this._count;
        }
        set count(value) {
            this._count = value;
        }
        get messageId() {
            return this._messageId;
        }
        set messageId(value) {
            this._messageId = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            SeenCount.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                count: this.count,
                messageId: this.messageId
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                count: this.count,
                messageId: this.messageId
            };
        }
    }
    SeenCount.id = 'proto.pub.v1.query.SeenCount';
    FetchSeenCountOfChannelMessageRes.SeenCount = SeenCount;
})(FetchSeenCountOfChannelMessageRes || (FetchSeenCountOfChannelMessageRes = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchUserCallsReq
 */
export class FetchUserCallsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchUserCallsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.year = _value.year;
        this.month = _value.month;
        this.fetchingDirectionType = _value.fetchingDirectionType;
        this.limit = _value.limit;
        FetchUserCallsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchUserCallsReq();
        FetchUserCallsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.year = _instance.year || 0;
        _instance.month = _instance.month || 0;
        _instance.fetchingDirectionType = _instance.fetchingDirectionType || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.year = _reader.readInt32();
                    break;
                case 4:
                    _instance.month = _reader.readInt32();
                    break;
                case 5:
                    _instance.fetchingDirectionType = _reader.readEnum();
                    break;
                case 6:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchUserCallsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.year) {
            _writer.writeInt32(3, _instance.year);
        }
        if (_instance.month) {
            _writer.writeInt32(4, _instance.month);
        }
        if (_instance.fetchingDirectionType) {
            _writer.writeEnum(5, _instance.fetchingDirectionType);
        }
        if (_instance.limit) {
            _writer.writeInt32(6, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get year() {
        return this._year;
    }
    set year(value) {
        this._year = value;
    }
    get month() {
        return this._month;
    }
    set month(value) {
        this._month = value;
    }
    get fetchingDirectionType() {
        return this._fetchingDirectionType;
    }
    set fetchingDirectionType(value) {
        this._fetchingDirectionType = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchUserCallsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            year: this.year,
            month: this.month,
            fetchingDirectionType: this.fetchingDirectionType,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            year: this.year,
            month: this.month,
            fetchingDirectionType: FetchUserCallsReq.FetchingDirectionType[this.fetchingDirectionType === null ||
                this.fetchingDirectionType === undefined
                ? 0
                : this.fetchingDirectionType],
            limit: this.limit
        };
    }
}
FetchUserCallsReq.id = 'proto.pub.v1.query.FetchUserCallsReq';
(function (FetchUserCallsReq) {
    let FetchingDirectionType;
    (function (FetchingDirectionType) {
        FetchingDirectionType[FetchingDirectionType["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        FetchingDirectionType[FetchingDirectionType["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(FetchingDirectionType = FetchUserCallsReq.FetchingDirectionType || (FetchUserCallsReq.FetchingDirectionType = {}));
})(FetchUserCallsReq || (FetchUserCallsReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchUserCallsRes
 */
export class FetchUserCallsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchUserCallsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cellEvents = (_value.cellEvents || []).map(m => new protoPubV1Models010.CallInfo(m));
        FetchUserCallsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchUserCallsRes();
        FetchUserCallsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cellEvents = _instance.cellEvents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models010.CallInfo();
                    _reader.readMessage(messageInitializer1, protoPubV1Models010.CallInfo.deserializeBinaryFromReader);
                    (_instance.cellEvents = _instance.cellEvents || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchUserCallsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cellEvents && _instance.cellEvents.length) {
            _writer.writeRepeatedMessage(1, _instance.cellEvents, protoPubV1Models010.CallInfo.serializeBinaryToWriter);
        }
    }
    get cellEvents() {
        return this._cellEvents;
    }
    set cellEvents(value) {
        this._cellEvents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchUserCallsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cellEvents: (this.cellEvents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cellEvents: (this.cellEvents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchUserCallsRes.id = 'proto.pub.v1.query.FetchUserCallsRes';
/**
 * Message implementation for proto.pub.v1.query.UpdateMessageReq
 */
export class UpdateMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messageId = _value.messageId;
        this.message = _value.message
            ? new protoPubV1Models014.MessageByClient(_value.message)
            : undefined;
        UpdateMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateMessageReq();
        UpdateMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messageId = _instance.messageId || '0';
        _instance.message = _instance.message || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 2:
                    _instance.message = new protoPubV1Models014.MessageByClient();
                    _reader.readMessage(_instance.message, protoPubV1Models014.MessageByClient.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messageId) {
            _writer.writeInt64String(1, _instance.messageId);
        }
        if (_instance.message) {
            _writer.writeMessage(2, _instance.message, protoPubV1Models014.MessageByClient.serializeBinaryToWriter);
        }
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        this._message = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messageId: this.messageId,
            message: this.message ? this.message.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messageId: this.messageId,
            message: this.message ? this.message.toProtobufJSON(options) : null
        };
    }
}
UpdateMessageReq.id = 'proto.pub.v1.query.UpdateMessageReq';
/**
 * Message implementation for proto.pub.v1.query.UpdateMessageRes
 */
export class UpdateMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UpdateMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateMessageRes();
        UpdateMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UpdateMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UpdateMessageRes.id = 'proto.pub.v1.query.UpdateMessageRes';
/**
 * Message implementation for proto.pub.v1.query.DeleteMessageReq
 */
export class DeleteMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messageId = _value.messageId;
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        DeleteMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteMessageReq();
        DeleteMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messageId = _instance.messageId || '0';
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 2:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messageId) {
            _writer.writeInt64String(1, _instance.messageId);
        }
        if (_instance.roomUid) {
            _writer.writeMessage(2, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messageId: this.messageId,
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messageId: this.messageId,
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
DeleteMessageReq.id = 'proto.pub.v1.query.DeleteMessageReq';
/**
 * Message implementation for proto.pub.v1.query.DeleteMessageRes
 */
export class DeleteMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        DeleteMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteMessageRes();
        DeleteMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        DeleteMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
DeleteMessageRes.id = 'proto.pub.v1.query.DeleteMessageRes';
/**
 * Message implementation for proto.pub.v1.query.RemovePrivateRoomReq
 */
export class RemovePrivateRoomReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemovePrivateRoomReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models000.Uid(_value.roomUid)
            : undefined;
        RemovePrivateRoomReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemovePrivateRoomReq();
        RemovePrivateRoomReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemovePrivateRoomReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemovePrivateRoomReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
RemovePrivateRoomReq.id = 'proto.pub.v1.query.RemovePrivateRoomReq';
/**
 * Message implementation for proto.pub.v1.query.RemovePrivateRoomRes
 */
export class RemovePrivateRoomRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemovePrivateRoomRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemovePrivateRoomRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemovePrivateRoomRes();
        RemovePrivateRoomRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemovePrivateRoomRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemovePrivateRoomRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemovePrivateRoomRes.id = 'proto.pub.v1.query.RemovePrivateRoomRes';
/**
 * Message implementation for proto.pub.v1.query.AddAvatarReq
 */
export class AddAvatarReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = _value.avatar
            ? new protoPubV1Models019.Avatar(_value.avatar)
            : undefined;
        AddAvatarReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddAvatarReq();
        AddAvatarReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.avatar = new protoPubV1Models019.Avatar();
                    _reader.readMessage(_instance.avatar, protoPubV1Models019.Avatar.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddAvatarReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar) {
            _writer.writeMessage(1, _instance.avatar, protoPubV1Models019.Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddAvatarReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: this.avatar ? this.avatar.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null
        };
    }
}
AddAvatarReq.id = 'proto.pub.v1.query.AddAvatarReq';
/**
 * Message implementation for proto.pub.v1.query.AddAvatarRes
 */
export class AddAvatarRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        AddAvatarRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddAvatarRes();
        AddAvatarRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        AddAvatarRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddAvatarRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
AddAvatarRes.id = 'proto.pub.v1.query.AddAvatarRes';
/**
 * Message implementation for proto.pub.v1.query.RemoveAvatarReq
 */
export class RemoveAvatarReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = _value.avatar
            ? new protoPubV1Models019.Avatar(_value.avatar)
            : undefined;
        RemoveAvatarReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveAvatarReq();
        RemoveAvatarReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.avatar = new protoPubV1Models019.Avatar();
                    _reader.readMessage(_instance.avatar, protoPubV1Models019.Avatar.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveAvatarReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar) {
            _writer.writeMessage(1, _instance.avatar, protoPubV1Models019.Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveAvatarReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: this.avatar ? this.avatar.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null
        };
    }
}
RemoveAvatarReq.id = 'proto.pub.v1.query.RemoveAvatarReq';
/**
 * Message implementation for proto.pub.v1.query.RemoveAvatarRes
 */
export class RemoveAvatarRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemoveAvatarRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveAvatarRes();
        RemoveAvatarRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemoveAvatarRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveAvatarRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemoveAvatarRes.id = 'proto.pub.v1.query.RemoveAvatarRes';
/**
 * Message implementation for proto.pub.v1.query.SearchInMessagesReq
 */
export class SearchInMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchInMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.searchTerm = _value.searchTerm;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        this.rooms = (_value.rooms || []).map(m => new protoPubV1Models000.Uid(m));
        SearchInMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchInMessagesReq();
        SearchInMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.searchTerm = _instance.searchTerm || '';
        _instance.pointer = _instance.pointer || '0';
        _instance.limit = _instance.limit || '0';
        _instance.rooms = _instance.rooms || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.searchTerm = _reader.readString();
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.limit = _reader.readInt64String();
                    break;
                case 4:
                    const messageInitializer4 = new protoPubV1Models000.Uid();
                    _reader.readMessage(messageInitializer4, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    (_instance.rooms = _instance.rooms || []).push(messageInitializer4);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchInMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.searchTerm) {
            _writer.writeString(1, _instance.searchTerm);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt64String(3, _instance.limit);
        }
        if (_instance.rooms && _instance.rooms.length) {
            _writer.writeRepeatedMessage(4, _instance.rooms, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get searchTerm() {
        return this._searchTerm;
    }
    set searchTerm(value) {
        this._searchTerm = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get rooms() {
        return this._rooms;
    }
    set rooms(value) {
        this._rooms = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchInMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            searchTerm: this.searchTerm,
            pointer: this.pointer,
            limit: this.limit,
            rooms: (this.rooms || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            searchTerm: this.searchTerm,
            pointer: this.pointer,
            limit: this.limit,
            rooms: (this.rooms || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SearchInMessagesReq.id = 'proto.pub.v1.query.SearchInMessagesReq';
/**
 * Message implementation for proto.pub.v1.query.MessageMetadata
 */
export class MessageMetadata {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageMetadata to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.time = _value.time;
        this.from = _value.from
            ? new protoPubV1Models000.Uid(_value.from)
            : undefined;
        this.to = _value.to ? new protoPubV1Models000.Uid(_value.to) : undefined;
        this.text = _value.text;
        MessageMetadata.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageMetadata();
        MessageMetadata.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '0';
        _instance.time = _instance.time || '0';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.text = _instance.text || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readInt64String();
                    break;
                case 2:
                    _instance.time = _reader.readInt64String();
                    break;
                case 3:
                    _instance.from = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.from, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.to = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.to, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.text = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageMetadata.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeInt64String(1, _instance.id);
        }
        if (_instance.time) {
            _writer.writeInt64String(2, _instance.time);
        }
        if (_instance.from) {
            _writer.writeMessage(3, _instance.from, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(4, _instance.to, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeString(5, _instance.text);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            text: this.text
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            text: this.text
        };
    }
}
MessageMetadata.id = 'proto.pub.v1.query.MessageMetadata';
/**
 * Message implementation for proto.pub.v1.query.SearchInMessagesRes
 */
export class SearchInMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchInMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messages = (_value.messages || []).map(m => new MessageMetadata(m));
        this.finished = _value.finished;
        SearchInMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchInMessagesRes();
        SearchInMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messages = _instance.messages || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new MessageMetadata();
                    _reader.readMessage(messageInitializer1, MessageMetadata.deserializeBinaryFromReader);
                    (_instance.messages = _instance.messages || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchInMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messages && _instance.messages.length) {
            _writer.writeRepeatedMessage(1, _instance.messages, MessageMetadata.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get messages() {
        return this._messages;
    }
    set messages(value) {
        this._messages = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchInMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messages: (this.messages || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messages: (this.messages || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
SearchInMessagesRes.id = 'proto.pub.v1.query.SearchInMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.SendGlitchReq
 */
export class SendGlitchReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendGlitchReq to deeply clone from
     */
    constructor(_value) {
        this._glitch = SendGlitchReq.GlitchCase.none;
        _value = _value || {};
        this.offlineNotification = _value.offlineNotification
            ? new GlitchOfOfflineNotification(_value.offlineNotification)
            : undefined;
        SendGlitchReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendGlitchReq();
        SendGlitchReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.offlineNotification = new GlitchOfOfflineNotification();
                    _reader.readMessage(_instance.offlineNotification, GlitchOfOfflineNotification.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SendGlitchReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.offlineNotification) {
            _writer.writeMessage(1, _instance.offlineNotification, GlitchOfOfflineNotification.serializeBinaryToWriter);
        }
    }
    get offlineNotification() {
        return this._offlineNotification;
    }
    set offlineNotification(value) {
        if (value !== undefined && value !== null) {
            this._glitch = SendGlitchReq.GlitchCase.offlineNotification;
        }
        this._offlineNotification = value;
    }
    get glitch() {
        return this._glitch;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendGlitchReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            offlineNotification: this.offlineNotification
                ? this.offlineNotification.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            offlineNotification: this.offlineNotification
                ? this.offlineNotification.toProtobufJSON(options)
                : null
        };
    }
}
SendGlitchReq.id = 'proto.pub.v1.query.SendGlitchReq';
(function (SendGlitchReq) {
    let GlitchCase;
    (function (GlitchCase) {
        GlitchCase[GlitchCase["none"] = 0] = "none";
        GlitchCase[GlitchCase["offlineNotification"] = 1] = "offlineNotification";
    })(GlitchCase = SendGlitchReq.GlitchCase || (SendGlitchReq.GlitchCase = {}));
})(SendGlitchReq || (SendGlitchReq = {}));
/**
 * Message implementation for proto.pub.v1.query.GlitchOfOfflineNotification
 */
export class GlitchOfOfflineNotification {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GlitchOfOfflineNotification to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new protoPubV1Models000.Uid(_value.room)
            : undefined;
        GlitchOfOfflineNotification.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GlitchOfOfflineNotification();
        GlitchOfOfflineNotification.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.room, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GlitchOfOfflineNotification.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GlitchOfOfflineNotification.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null
        };
    }
}
GlitchOfOfflineNotification.id = 'proto.pub.v1.query.GlitchOfOfflineNotification';
/**
 * Message implementation for proto.pub.v1.query.SendGlitchRes
 */
export class SendGlitchRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendGlitchRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SendGlitchRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendGlitchRes();
        SendGlitchRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SendGlitchRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendGlitchRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SendGlitchRes.id = 'proto.pub.v1.query.SendGlitchRes';
/**
 * Message implementation for proto.pub.v1.query.GetTimeReq
 */
export class GetTimeReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTimeReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetTimeReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTimeReq();
        GetTimeReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetTimeReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTimeReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetTimeReq.id = 'proto.pub.v1.query.GetTimeReq';
/**
 * Message implementation for proto.pub.v1.query.GetTimeRes
 */
export class GetTimeRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTimeRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.currentTime = _value.currentTime;
        GetTimeRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTimeRes();
        GetTimeRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.currentTime = _instance.currentTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.currentTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTimeRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.currentTime) {
            _writer.writeInt64String(1, _instance.currentTime);
        }
    }
    get currentTime() {
        return this._currentTime;
    }
    set currentTime(value) {
        this._currentTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTimeRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            currentTime: this.currentTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            currentTime: this.currentTime
        };
    }
}
GetTimeRes.id = 'proto.pub.v1.query.GetTimeRes';
/**
 * Message implementation for proto.pub.v1.query.ForwardMessagesReq
 */
export class ForwardMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ForwardMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.fromRoom = _value.fromRoom
            ? new protoPubV1Models000.Uid(_value.fromRoom)
            : undefined;
        this.toRoom = _value.toRoom
            ? new protoPubV1Models000.Uid(_value.toRoom)
            : undefined;
        this.messageIdList = (_value.messageIdList || []).slice();
        ForwardMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ForwardMessagesReq();
        ForwardMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.fromRoom = _instance.fromRoom || undefined;
        _instance.toRoom = _instance.toRoom || undefined;
        _instance.messageIdList = _instance.messageIdList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.fromRoom = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.fromRoom, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.toRoom = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.toRoom, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    (_instance.messageIdList = _instance.messageIdList || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        ForwardMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.fromRoom) {
            _writer.writeMessage(1, _instance.fromRoom, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.toRoom) {
            _writer.writeMessage(2, _instance.toRoom, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
        if (_instance.messageIdList && _instance.messageIdList.length) {
            _writer.writePackedInt64String(3, _instance.messageIdList);
        }
    }
    get fromRoom() {
        return this._fromRoom;
    }
    set fromRoom(value) {
        this._fromRoom = value;
    }
    get toRoom() {
        return this._toRoom;
    }
    set toRoom(value) {
        this._toRoom = value;
    }
    get messageIdList() {
        return this._messageIdList;
    }
    set messageIdList(value) {
        this._messageIdList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ForwardMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            fromRoom: this.fromRoom ? this.fromRoom.toObject() : undefined,
            toRoom: this.toRoom ? this.toRoom.toObject() : undefined,
            messageIdList: (this.messageIdList || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            fromRoom: this.fromRoom ? this.fromRoom.toProtobufJSON(options) : null,
            toRoom: this.toRoom ? this.toRoom.toProtobufJSON(options) : null,
            messageIdList: (this.messageIdList || []).slice()
        };
    }
}
ForwardMessagesReq.id = 'proto.pub.v1.query.ForwardMessagesReq';
/**
 * Message implementation for proto.pub.v1.query.ForwardMessagesRes
 */
export class ForwardMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ForwardMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ForwardMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ForwardMessagesRes();
        ForwardMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ForwardMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ForwardMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ForwardMessagesRes.id = 'proto.pub.v1.query.ForwardMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.CreateGroupCallReq
 */
export class CreateGroupCallReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateGroupCallReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new protoPubV1Models000.Uid(_value.room)
            : undefined;
        CreateGroupCallReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateGroupCallReq();
        CreateGroupCallReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.room, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateGroupCallReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateGroupCallReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null
        };
    }
}
CreateGroupCallReq.id = 'proto.pub.v1.query.CreateGroupCallReq';
/**
 * Message implementation for proto.pub.v1.query.CreateGroupCallRes
 */
export class CreateGroupCallRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateGroupCallRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.token = _value.token;
        CreateGroupCallRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateGroupCallRes();
        CreateGroupCallRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateGroupCallRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.token) {
            _writer.writeString(1, _instance.token);
        }
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateGroupCallRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            token: this.token
        };
    }
}
CreateGroupCallRes.id = 'proto.pub.v1.query.CreateGroupCallRes';
/**
 * Message implementation for proto.pub.v1.query.EndGroupCallReq
 */
export class EndGroupCallReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EndGroupCallReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new protoPubV1Models000.Uid(_value.room)
            : undefined;
        EndGroupCallReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EndGroupCallReq();
        EndGroupCallReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new protoPubV1Models000.Uid();
                    _reader.readMessage(_instance.room, protoPubV1Models000.Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        EndGroupCallReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, protoPubV1Models000.Uid.serializeBinaryToWriter);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EndGroupCallReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null
        };
    }
}
EndGroupCallReq.id = 'proto.pub.v1.query.EndGroupCallReq';
/**
 * Message implementation for proto.pub.v1.query.EndGroupCallRes
 */
export class EndGroupCallRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EndGroupCallRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        EndGroupCallRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EndGroupCallRes();
        EndGroupCallRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        EndGroupCallRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EndGroupCallRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
EndGroupCallRes.id = 'proto.pub.v1.query.EndGroupCallRes';
/**
 * Message implementation for proto.pub.v1.query.GetShowcasesReq
 */
export class GetShowcasesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetShowcasesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userPreference = _value.userPreference
            ? new UserPreference(_value.userPreference)
            : undefined;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        GetShowcasesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetShowcasesReq();
        GetShowcasesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userPreference = _instance.userPreference || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.limit = _instance.limit || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.userPreference = new UserPreference();
                    _reader.readMessage(_instance.userPreference, UserPreference.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.limit = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetShowcasesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userPreference) {
            _writer.writeMessage(1, _instance.userPreference, UserPreference.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt64String(3, _instance.limit);
        }
    }
    get userPreference() {
        return this._userPreference;
    }
    set userPreference(value) {
        this._userPreference = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetShowcasesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userPreference: this.userPreference
                ? this.userPreference.toObject()
                : undefined,
            pointer: this.pointer,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userPreference: this.userPreference
                ? this.userPreference.toProtobufJSON(options)
                : null,
            pointer: this.pointer,
            limit: this.limit
        };
    }
}
GetShowcasesReq.id = 'proto.pub.v1.query.GetShowcasesReq';
/**
 * Message implementation for proto.pub.v1.query.GetShowcasesRes
 */
export class GetShowcasesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetShowcasesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.showcases = (_value.showcases || []).map(m => new protoPubV1Models020.Showcase(m));
        this.finished = _value.finished;
        GetShowcasesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetShowcasesRes();
        GetShowcasesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.showcases = _instance.showcases || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models020.Showcase();
                    _reader.readMessage(messageInitializer1, protoPubV1Models020.Showcase.deserializeBinaryFromReader);
                    (_instance.showcases = _instance.showcases || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetShowcasesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.showcases && _instance.showcases.length) {
            _writer.writeRepeatedMessage(1, _instance.showcases, protoPubV1Models020.Showcase.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get showcases() {
        return this._showcases;
    }
    set showcases(value) {
        this._showcases = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetShowcasesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            showcases: (this.showcases || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            showcases: (this.showcases || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
GetShowcasesRes.id = 'proto.pub.v1.query.GetShowcasesRes';
/**
 * Message implementation for proto.pub.v1.query.GetAnnouncementReq
 */
export class GetAnnouncementReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAnnouncementReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userPreference = _value.userPreference
            ? new UserPreference(_value.userPreference)
            : undefined;
        GetAnnouncementReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAnnouncementReq();
        GetAnnouncementReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userPreference = _instance.userPreference || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.userPreference = new UserPreference();
                    _reader.readMessage(_instance.userPreference, UserPreference.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAnnouncementReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userPreference) {
            _writer.writeMessage(1, _instance.userPreference, UserPreference.serializeBinaryToWriter);
        }
    }
    get userPreference() {
        return this._userPreference;
    }
    set userPreference(value) {
        this._userPreference = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAnnouncementReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userPreference: this.userPreference
                ? this.userPreference.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userPreference: this.userPreference
                ? this.userPreference.toProtobufJSON(options)
                : null
        };
    }
}
GetAnnouncementReq.id = 'proto.pub.v1.query.GetAnnouncementReq';
/**
 * Message implementation for proto.pub.v1.query.GetAnnouncementRes
 */
export class GetAnnouncementRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAnnouncementRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.announcement = (_value.announcement || []).map(m => new protoPubV1Models022.Announcement(m));
        GetAnnouncementRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAnnouncementRes();
        GetAnnouncementRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.announcement = _instance.announcement || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new protoPubV1Models022.Announcement();
                    _reader.readMessage(messageInitializer1, protoPubV1Models022.Announcement.deserializeBinaryFromReader);
                    (_instance.announcement = _instance.announcement || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAnnouncementRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.announcement && _instance.announcement.length) {
            _writer.writeRepeatedMessage(1, _instance.announcement, protoPubV1Models022.Announcement.serializeBinaryToWriter);
        }
    }
    get announcement() {
        return this._announcement;
    }
    set announcement(value) {
        this._announcement = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAnnouncementRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            announcement: (this.announcement || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            announcement: (this.announcement || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetAnnouncementRes.id = 'proto.pub.v1.query.GetAnnouncementRes';
//# sourceMappingURL=data:application/json;base64,