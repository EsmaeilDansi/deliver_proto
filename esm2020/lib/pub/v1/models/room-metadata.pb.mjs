import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as protoPubV1Models001 from '../../../pub/v1/models/uid.pb';
export var PresenceType;
(function (PresenceType) {
    PresenceType[PresenceType["ACTIVE"] = 0] = "ACTIVE";
    PresenceType[PresenceType["DELETED"] = 1] = "DELETED";
    PresenceType[PresenceType["KICKED"] = 2] = "KICKED";
    PresenceType[PresenceType["LEFT"] = 3] = "LEFT";
    PresenceType[PresenceType["BANNED"] = 4] = "BANNED";
})(PresenceType || (PresenceType = {}));
/**
 * Message implementation for proto.pub.v1.models.RoomMetadata
 */
export class RoomMetadata {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RoomMetadata to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new protoPubV1Models001.Uid(_value.roomUid)
            : undefined;
        this.lastMessageId = _value.lastMessageId;
        this.lastUpdate = _value.lastUpdate;
        this.lastCurrentUserSentMessageId = _value.lastCurrentUserSentMessageId;
        this.lastSeenId = _value.lastSeenId;
        this.firstMessageId = _value.firstMessageId;
        this.presenceType = _value.presenceType;
        RoomMetadata.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RoomMetadata();
        RoomMetadata.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.lastMessageId = _instance.lastMessageId || '0';
        _instance.lastUpdate = _instance.lastUpdate || '0';
        _instance.lastCurrentUserSentMessageId =
            _instance.lastCurrentUserSentMessageId || '0';
        _instance.lastSeenId = _instance.lastSeenId || '0';
        _instance.firstMessageId = _instance.firstMessageId || '0';
        _instance.presenceType = _instance.presenceType || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new protoPubV1Models001.Uid();
                    _reader.readMessage(_instance.roomUid, protoPubV1Models001.Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.lastMessageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.lastUpdate = _reader.readInt64String();
                    break;
                case 4:
                    _instance.lastCurrentUserSentMessageId = _reader.readInt64String();
                    break;
                case 7:
                    _instance.lastSeenId = _reader.readInt64String();
                    break;
                case 5:
                    _instance.firstMessageId = _reader.readInt64String();
                    break;
                case 6:
                    _instance.presenceType = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RoomMetadata.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, protoPubV1Models001.Uid.serializeBinaryToWriter);
        }
        if (_instance.lastMessageId) {
            _writer.writeInt64String(2, _instance.lastMessageId);
        }
        if (_instance.lastUpdate) {
            _writer.writeInt64String(3, _instance.lastUpdate);
        }
        if (_instance.lastCurrentUserSentMessageId) {
            _writer.writeInt64String(4, _instance.lastCurrentUserSentMessageId);
        }
        if (_instance.lastSeenId) {
            _writer.writeInt64String(7, _instance.lastSeenId);
        }
        if (_instance.firstMessageId) {
            _writer.writeInt64String(5, _instance.firstMessageId);
        }
        if (_instance.presenceType) {
            _writer.writeEnum(6, _instance.presenceType);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get lastMessageId() {
        return this._lastMessageId;
    }
    set lastMessageId(value) {
        this._lastMessageId = value;
    }
    get lastUpdate() {
        return this._lastUpdate;
    }
    set lastUpdate(value) {
        this._lastUpdate = value;
    }
    get lastCurrentUserSentMessageId() {
        return this._lastCurrentUserSentMessageId;
    }
    set lastCurrentUserSentMessageId(value) {
        this._lastCurrentUserSentMessageId = value;
    }
    get lastSeenId() {
        return this._lastSeenId;
    }
    set lastSeenId(value) {
        this._lastSeenId = value;
    }
    get firstMessageId() {
        return this._firstMessageId;
    }
    set firstMessageId(value) {
        this._firstMessageId = value;
    }
    get presenceType() {
        return this._presenceType;
    }
    set presenceType(value) {
        this._presenceType = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RoomMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            lastMessageId: this.lastMessageId,
            lastUpdate: this.lastUpdate,
            lastCurrentUserSentMessageId: this.lastCurrentUserSentMessageId,
            lastSeenId: this.lastSeenId,
            firstMessageId: this.firstMessageId,
            presenceType: this.presenceType
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            lastMessageId: this.lastMessageId,
            lastUpdate: this.lastUpdate,
            lastCurrentUserSentMessageId: this.lastCurrentUserSentMessageId,
            lastSeenId: this.lastSeenId,
            firstMessageId: this.firstMessageId,
            presenceType: PresenceType[this.presenceType === null || this.presenceType === undefined
                ? 0
                : this.presenceType]
        };
    }
}
RoomMetadata.id = 'proto.pub.v1.models.RoomMetadata';
//# sourceMappingURL=data:application/json;base64,