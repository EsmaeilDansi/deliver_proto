import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject } from '@angular/core';
import { GrpcCallType, GrpcMetadata } from '@ngx-grpc/common';
import * as i1 from '@ngx-grpc/core';
import { throwStatusErrors, takeMessages, GRPC_CLIENT_FACTORY } from '@ngx-grpc/core';

var PlatformsType;
(function (PlatformsType) {
    PlatformsType[PlatformsType["ANDROID"] = 0] = "ANDROID";
    PlatformsType[PlatformsType["IOS"] = 1] = "IOS";
    PlatformsType[PlatformsType["MAC_OS"] = 2] = "MAC_OS";
    PlatformsType[PlatformsType["LINUX"] = 3] = "LINUX";
    PlatformsType[PlatformsType["WINDOWS"] = 4] = "WINDOWS";
    PlatformsType[PlatformsType["WEB"] = 5] = "WEB";
})(PlatformsType || (PlatformsType = {}));
/**
 * Message implementation for proto.pub.v1.models.Platform
 */
class Platform {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Platform to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.platformType = _value.platformType;
        this.osVersion = _value.osVersion;
        this.clientVersion = _value.clientVersion;
        Platform.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Platform();
        Platform.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.platformType = _instance.platformType || 0;
        _instance.osVersion = _instance.osVersion || '';
        _instance.clientVersion = _instance.clientVersion || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.platformType = _reader.readEnum();
                    break;
                case 2:
                    _instance.osVersion = _reader.readString();
                    break;
                case 3:
                    _instance.clientVersion = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Platform.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.platformType) {
            _writer.writeEnum(1, _instance.platformType);
        }
        if (_instance.osVersion) {
            _writer.writeString(2, _instance.osVersion);
        }
        if (_instance.clientVersion) {
            _writer.writeString(3, _instance.clientVersion);
        }
    }
    get platformType() {
        return this._platformType;
    }
    set platformType(value) {
        this._platformType = value;
    }
    get osVersion() {
        return this._osVersion;
    }
    set osVersion(value) {
        this._osVersion = value;
    }
    get clientVersion() {
        return this._clientVersion;
    }
    set clientVersion(value) {
        this._clientVersion = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Platform.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            platformType: this.platformType,
            osVersion: this.osVersion,
            clientVersion: this.clientVersion
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            platformType: PlatformsType[this.platformType === null || this.platformType === undefined
                ? 0
                : this.platformType],
            osVersion: this.osVersion,
            clientVersion: this.clientVersion
        };
    }
}
Platform.id = 'proto.pub.v1.models.Platform';

/**
 * Message implementation for proto.pub.v1.models.File
 */
class File {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of File to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.size = _value.size;
        this.type = _value.type;
        this.name = _value.name;
        this.caption = _value.caption;
        this.width = _value.width;
        this.height = _value.height;
        this.duration = _value.duration;
        this.blurHash = _value.blurHash;
        this.audioWaveform = _value.audioWaveform
            ? new AudioWaveform(_value.audioWaveform)
            : undefined;
        this.sign = _value.sign;
        this.hash = _value.hash;
        this.tempLink = _value.tempLink;
        File.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new File();
        File.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.size = _instance.size || '0';
        _instance.type = _instance.type || '';
        _instance.name = _instance.name || '';
        _instance.caption = _instance.caption || '';
        _instance.width = _instance.width || 0;
        _instance.height = _instance.height || 0;
        _instance.duration = _instance.duration || 0;
        _instance.blurHash = _instance.blurHash || '';
        _instance.audioWaveform = _instance.audioWaveform || undefined;
        _instance.sign = _instance.sign || '';
        _instance.hash = _instance.hash || '';
        _instance.tempLink = _instance.tempLink || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.size = _reader.readInt64String();
                    break;
                case 3:
                    _instance.type = _reader.readString();
                    break;
                case 4:
                    _instance.name = _reader.readString();
                    break;
                case 5:
                    _instance.caption = _reader.readString();
                    break;
                case 6:
                    _instance.width = _reader.readInt32();
                    break;
                case 7:
                    _instance.height = _reader.readInt32();
                    break;
                case 8:
                    _instance.duration = _reader.readDouble();
                    break;
                case 9:
                    _instance.blurHash = _reader.readString();
                    break;
                case 13:
                    _instance.audioWaveform = new AudioWaveform();
                    _reader.readMessage(_instance.audioWaveform, AudioWaveform.deserializeBinaryFromReader);
                    break;
                case 10:
                    _instance.sign = _reader.readString();
                    break;
                case 11:
                    _instance.hash = _reader.readString();
                    break;
                case 12:
                    _instance.tempLink = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        File.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.size) {
            _writer.writeInt64String(2, _instance.size);
        }
        if (_instance.type) {
            _writer.writeString(3, _instance.type);
        }
        if (_instance.name) {
            _writer.writeString(4, _instance.name);
        }
        if (_instance.caption) {
            _writer.writeString(5, _instance.caption);
        }
        if (_instance.width) {
            _writer.writeInt32(6, _instance.width);
        }
        if (_instance.height) {
            _writer.writeInt32(7, _instance.height);
        }
        if (_instance.duration) {
            _writer.writeDouble(8, _instance.duration);
        }
        if (_instance.blurHash) {
            _writer.writeString(9, _instance.blurHash);
        }
        if (_instance.audioWaveform) {
            _writer.writeMessage(13, _instance.audioWaveform, AudioWaveform.serializeBinaryToWriter);
        }
        if (_instance.sign) {
            _writer.writeString(10, _instance.sign);
        }
        if (_instance.hash) {
            _writer.writeString(11, _instance.hash);
        }
        if (_instance.tempLink) {
            _writer.writeString(12, _instance.tempLink);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get size() {
        return this._size;
    }
    set size(value) {
        this._size = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get caption() {
        return this._caption;
    }
    set caption(value) {
        this._caption = value;
    }
    get width() {
        return this._width;
    }
    set width(value) {
        this._width = value;
    }
    get height() {
        return this._height;
    }
    set height(value) {
        this._height = value;
    }
    get duration() {
        return this._duration;
    }
    set duration(value) {
        this._duration = value;
    }
    get blurHash() {
        return this._blurHash;
    }
    set blurHash(value) {
        this._blurHash = value;
    }
    get audioWaveform() {
        return this._audioWaveform;
    }
    set audioWaveform(value) {
        this._audioWaveform = value;
    }
    get sign() {
        return this._sign;
    }
    set sign(value) {
        this._sign = value;
    }
    get hash() {
        return this._hash;
    }
    set hash(value) {
        this._hash = value;
    }
    get tempLink() {
        return this._tempLink;
    }
    set tempLink(value) {
        this._tempLink = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        File.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            size: this.size,
            type: this.type,
            name: this.name,
            caption: this.caption,
            width: this.width,
            height: this.height,
            duration: this.duration,
            blurHash: this.blurHash,
            audioWaveform: this.audioWaveform
                ? this.audioWaveform.toObject()
                : undefined,
            sign: this.sign,
            hash: this.hash,
            tempLink: this.tempLink
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            size: this.size,
            type: this.type,
            name: this.name,
            caption: this.caption,
            width: this.width,
            height: this.height,
            duration: this.duration,
            blurHash: this.blurHash,
            audioWaveform: this.audioWaveform
                ? this.audioWaveform.toProtobufJSON(options)
                : null,
            sign: this.sign,
            hash: this.hash,
            tempLink: this.tempLink
        };
    }
}
File.id = 'proto.pub.v1.models.File';
/**
 * Message implementation for proto.pub.v1.models.MemeType
 */
class MemeType {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MemeType to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.superType = _value.superType;
        this.subType = _value.subType;
        MemeType.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MemeType();
        MemeType.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.superType = _instance.superType || '';
        _instance.subType = _instance.subType || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.superType = _reader.readString();
                    break;
                case 2:
                    _instance.subType = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        MemeType.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.superType) {
            _writer.writeString(1, _instance.superType);
        }
        if (_instance.subType) {
            _writer.writeString(2, _instance.subType);
        }
    }
    get superType() {
        return this._superType;
    }
    set superType(value) {
        this._superType = value;
    }
    get subType() {
        return this._subType;
    }
    set subType(value) {
        this._subType = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MemeType.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            superType: this.superType,
            subType: this.subType
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            superType: this.superType,
            subType: this.subType
        };
    }
}
MemeType.id = 'proto.pub.v1.models.MemeType';
/**
 * Message implementation for proto.pub.v1.models.AudioWaveform
 */
class AudioWaveform {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AudioWaveform to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.version = _value.version;
        this.channels = _value.channels;
        this.sampleRate = _value.sampleRate;
        this.samplesPerPixel = _value.samplesPerPixel;
        this.bits = _value.bits;
        this.length = _value.length;
        this.data = (_value.data || []).slice();
        AudioWaveform.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AudioWaveform();
        AudioWaveform.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.version = _instance.version || 0;
        _instance.channels = _instance.channels || 0;
        _instance.sampleRate = _instance.sampleRate || 0;
        _instance.samplesPerPixel = _instance.samplesPerPixel || 0;
        _instance.bits = _instance.bits || 0;
        _instance.length = _instance.length || 0;
        _instance.data = _instance.data || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.version = _reader.readInt32();
                    break;
                case 2:
                    _instance.channels = _reader.readInt32();
                    break;
                case 3:
                    _instance.sampleRate = _reader.readInt32();
                    break;
                case 4:
                    _instance.samplesPerPixel = _reader.readInt32();
                    break;
                case 5:
                    _instance.bits = _reader.readInt32();
                    break;
                case 6:
                    _instance.length = _reader.readInt32();
                    break;
                case 7:
                    (_instance.data = _instance.data || []).push(...(_reader.readPackedInt32() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        AudioWaveform.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.version) {
            _writer.writeInt32(1, _instance.version);
        }
        if (_instance.channels) {
            _writer.writeInt32(2, _instance.channels);
        }
        if (_instance.sampleRate) {
            _writer.writeInt32(3, _instance.sampleRate);
        }
        if (_instance.samplesPerPixel) {
            _writer.writeInt32(4, _instance.samplesPerPixel);
        }
        if (_instance.bits) {
            _writer.writeInt32(5, _instance.bits);
        }
        if (_instance.length) {
            _writer.writeInt32(6, _instance.length);
        }
        if (_instance.data && _instance.data.length) {
            _writer.writePackedInt32(7, _instance.data);
        }
    }
    get version() {
        return this._version;
    }
    set version(value) {
        this._version = value;
    }
    get channels() {
        return this._channels;
    }
    set channels(value) {
        this._channels = value;
    }
    get sampleRate() {
        return this._sampleRate;
    }
    set sampleRate(value) {
        this._sampleRate = value;
    }
    get samplesPerPixel() {
        return this._samplesPerPixel;
    }
    set samplesPerPixel(value) {
        this._samplesPerPixel = value;
    }
    get bits() {
        return this._bits;
    }
    set bits(value) {
        this._bits = value;
    }
    get length() {
        return this._length;
    }
    set length(value) {
        this._length = value;
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AudioWaveform.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            version: this.version,
            channels: this.channels,
            sampleRate: this.sampleRate,
            samplesPerPixel: this.samplesPerPixel,
            bits: this.bits,
            length: this.length,
            data: (this.data || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            version: this.version,
            channels: this.channels,
            sampleRate: this.sampleRate,
            samplesPerPixel: this.samplesPerPixel,
            bits: this.bits,
            length: this.length,
            data: (this.data || []).slice()
        };
    }
}
AudioWaveform.id = 'proto.pub.v1.models.AudioWaveform';

/**
 * Message implementation for proto.pub.v1.analytics.SendFeedbackReq
 */
class SendFeedbackReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendFeedbackReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.feedbackType = _value.feedbackType;
        this.description = _value.description;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        this.severity = _value.severity;
        this.logs = _value.logs;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        SendFeedbackReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendFeedbackReq();
        SendFeedbackReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.feedbackType = _instance.feedbackType || 0;
        _instance.description = _instance.description || '';
        _instance.platform = _instance.platform || undefined;
        _instance.severity = _instance.severity || '';
        _instance.logs = _instance.logs || '';
        _instance.file = _instance.file || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.feedbackType = _reader.readEnum();
                    break;
                case 2:
                    _instance.description = _reader.readString();
                    break;
                case 3:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.severity = _reader.readString();
                    break;
                case 5:
                    _instance.logs = _reader.readString();
                    break;
                case 6:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SendFeedbackReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.feedbackType) {
            _writer.writeEnum(1, _instance.feedbackType);
        }
        if (_instance.description) {
            _writer.writeString(2, _instance.description);
        }
        if (_instance.platform) {
            _writer.writeMessage(3, _instance.platform, Platform.serializeBinaryToWriter);
        }
        if (_instance.severity) {
            _writer.writeString(4, _instance.severity);
        }
        if (_instance.logs) {
            _writer.writeString(5, _instance.logs);
        }
        if (_instance.file) {
            _writer.writeMessage(6, _instance.file, File.serializeBinaryToWriter);
        }
    }
    get feedbackType() {
        return this._feedbackType;
    }
    set feedbackType(value) {
        this._feedbackType = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    get severity() {
        return this._severity;
    }
    set severity(value) {
        this._severity = value;
    }
    get logs() {
        return this._logs;
    }
    set logs(value) {
        this._logs = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        this._file = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendFeedbackReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            feedbackType: this.feedbackType,
            description: this.description,
            platform: this.platform ? this.platform.toObject() : undefined,
            severity: this.severity,
            logs: this.logs,
            file: this.file ? this.file.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            feedbackType: SendFeedbackReq.FeedbackType[this.feedbackType === null || this.feedbackType === undefined
                ? 0
                : this.feedbackType],
            description: this.description,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null,
            severity: this.severity,
            logs: this.logs,
            file: this.file ? this.file.toProtobufJSON(options) : null
        };
    }
}
SendFeedbackReq.id = 'proto.pub.v1.analytics.SendFeedbackReq';
(function (SendFeedbackReq) {
    let FeedbackType;
    (function (FeedbackType) {
        FeedbackType[FeedbackType["REPORT"] = 0] = "REPORT";
        FeedbackType[FeedbackType["PROPOSAL"] = 1] = "PROPOSAL";
    })(FeedbackType = SendFeedbackReq.FeedbackType || (SendFeedbackReq.FeedbackType = {}));
})(SendFeedbackReq || (SendFeedbackReq = {}));
/**
 * Message implementation for proto.pub.v1.analytics.SendFeedbackRes
 */
class SendFeedbackRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendFeedbackRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SendFeedbackRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendFeedbackRes();
        SendFeedbackRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SendFeedbackRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendFeedbackRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SendFeedbackRes.id = 'proto.pub.v1.analytics.SendFeedbackRes';
/**
 * Message implementation for proto.pub.v1.analytics.ReportCrashReq
 */
class ReportCrashReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportCrashReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.crashes = (_value.crashes || []).map(m => new AnalyticsCrash(m));
        ReportCrashReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportCrashReq();
        ReportCrashReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.crashes = _instance.crashes || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new AnalyticsCrash();
                    _reader.readMessage(messageInitializer1, AnalyticsCrash.deserializeBinaryFromReader);
                    (_instance.crashes = _instance.crashes || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReportCrashReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.crashes && _instance.crashes.length) {
            _writer.writeRepeatedMessage(1, _instance.crashes, AnalyticsCrash.serializeBinaryToWriter);
        }
    }
    get crashes() {
        return this._crashes;
    }
    set crashes(value) {
        this._crashes = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportCrashReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            crashes: (this.crashes || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            crashes: (this.crashes || []).map(m => m.toProtobufJSON(options))
        };
    }
}
ReportCrashReq.id = 'proto.pub.v1.analytics.ReportCrashReq';
/**
 * Message implementation for proto.pub.v1.analytics.AnalyticsCrash
 */
class AnalyticsCrash {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AnalyticsCrash to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.timestamp = _value.timestamp;
        this.error = _value.error;
        this.stackTraces = (_value.stackTraces || []).slice();
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        this.level = _value.level;
        this.logs = (_value.logs || []).slice();
        this.labels = (_value.labels || []).slice();
        (this.customKeys = _value.customKeys
            ? Object.keys(_value.customKeys).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.customKeys[k] })), {})
            : {}),
            AnalyticsCrash.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AnalyticsCrash();
        AnalyticsCrash.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.timestamp = _instance.timestamp || '0';
        _instance.error = _instance.error || '';
        _instance.stackTraces = _instance.stackTraces || [];
        _instance.platform = _instance.platform || undefined;
        _instance.level = _instance.level || '';
        _instance.logs = _instance.logs || [];
        _instance.labels = _instance.labels || [];
        _instance.customKeys = _instance.customKeys || {};
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.timestamp = _reader.readInt64String();
                    break;
                case 2:
                    _instance.error = _reader.readString();
                    break;
                case 3:
                    (_instance.stackTraces = _instance.stackTraces || []).push(_reader.readString());
                    break;
                case 4:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.level = _reader.readString();
                    break;
                case 6:
                    (_instance.logs = _instance.logs || []).push(_reader.readString());
                    break;
                case 7:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                case 8:
                    const msg_8 = {};
                    _reader.readMessage(msg_8, AnalyticsCrash.CustomKeysEntry.deserializeBinaryFromReader);
                    _instance.customKeys = _instance.customKeys || {};
                    _instance.customKeys[msg_8.key] = msg_8.value;
                    break;
                default:
                    _reader.skipField();
            }
        }
        AnalyticsCrash.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.timestamp) {
            _writer.writeInt64String(1, _instance.timestamp);
        }
        if (_instance.error) {
            _writer.writeString(2, _instance.error);
        }
        if (_instance.stackTraces && _instance.stackTraces.length) {
            _writer.writeRepeatedString(3, _instance.stackTraces);
        }
        if (_instance.platform) {
            _writer.writeMessage(4, _instance.platform, Platform.serializeBinaryToWriter);
        }
        if (_instance.level) {
            _writer.writeString(5, _instance.level);
        }
        if (_instance.logs && _instance.logs.length) {
            _writer.writeRepeatedString(6, _instance.logs);
        }
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(7, _instance.labels);
        }
        if (!!_instance.customKeys) {
            const keys_8 = Object.keys(_instance.customKeys);
            if (keys_8.length) {
                const repeated_8 = keys_8
                    .map(key => ({ key: key, value: _instance.customKeys[key] }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(8, repeated_8, AnalyticsCrash.CustomKeysEntry.serializeBinaryToWriter);
            }
        }
    }
    get timestamp() {
        return this._timestamp;
    }
    set timestamp(value) {
        this._timestamp = value;
    }
    get error() {
        return this._error;
    }
    set error(value) {
        this._error = value;
    }
    get stackTraces() {
        return this._stackTraces;
    }
    set stackTraces(value) {
        this._stackTraces = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    get level() {
        return this._level;
    }
    set level(value) {
        this._level = value;
    }
    get logs() {
        return this._logs;
    }
    set logs(value) {
        this._logs = value;
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    get customKeys() {
        return this._customKeys;
    }
    set customKeys(value) {
        this._customKeys = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AnalyticsCrash.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            timestamp: this.timestamp,
            error: this.error,
            stackTraces: (this.stackTraces || []).slice(),
            platform: this.platform ? this.platform.toObject() : undefined,
            level: this.level,
            logs: (this.logs || []).slice(),
            labels: (this.labels || []).slice(),
            customKeys: this.customKeys
                ? Object.keys(this.customKeys).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.customKeys[k] })), {})
                : {}
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            timestamp: this.timestamp,
            error: this.error,
            stackTraces: (this.stackTraces || []).slice(),
            platform: this.platform ? this.platform.toProtobufJSON(options) : null,
            level: this.level,
            logs: (this.logs || []).slice(),
            labels: (this.labels || []).slice(),
            customKeys: this.customKeys
                ? Object.keys(this.customKeys).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.customKeys[k] })), {})
                : {}
        };
    }
}
AnalyticsCrash.id = 'proto.pub.v1.analytics.AnalyticsCrash';
(function (AnalyticsCrash) {
    /**
     * Message implementation for proto.pub.v1.analytics.CustomKeysEntry
     */
    class CustomKeysEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CustomKeysEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value;
            CustomKeysEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CustomKeysEntry();
            CustomKeysEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CustomKeysEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeString(2, _instance.value);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CustomKeysEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value
            };
        }
    }
    CustomKeysEntry.id = 'proto.pub.v1.analytics.CustomKeysEntry';
    AnalyticsCrash.CustomKeysEntry = CustomKeysEntry;
})(AnalyticsCrash || (AnalyticsCrash = {}));
/**
 * Message implementation for proto.pub.v1.analytics.ReportCrashRes
 */
class ReportCrashRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportCrashRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ReportCrashRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportCrashRes();
        ReportCrashRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ReportCrashRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportCrashRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ReportCrashRes.id = 'proto.pub.v1.analytics.ReportCrashRes';
/**
 * Message implementation for proto.pub.v1.analytics.ReportEventReq
 */
class ReportEventReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportEventReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.events = (_value.events || []).map(m => new AnalyticsEvent(m));
        ReportEventReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportEventReq();
        ReportEventReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.events = _instance.events || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new AnalyticsEvent();
                    _reader.readMessage(messageInitializer1, AnalyticsEvent.deserializeBinaryFromReader);
                    (_instance.events = _instance.events || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReportEventReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.events && _instance.events.length) {
            _writer.writeRepeatedMessage(1, _instance.events, AnalyticsEvent.serializeBinaryToWriter);
        }
    }
    get events() {
        return this._events;
    }
    set events(value) {
        this._events = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportEventReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            events: (this.events || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            events: (this.events || []).map(m => m.toProtobufJSON(options))
        };
    }
}
ReportEventReq.id = 'proto.pub.v1.analytics.ReportEventReq';
/**
 * Message implementation for proto.pub.v1.analytics.AnalyticsEvent
 */
class AnalyticsEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AnalyticsEvent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.timestamp = _value.timestamp;
        (this.eventDetails = _value.eventDetails
            ? Object.keys(_value.eventDetails).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.eventDetails[k] })), {})
            : {}),
            (this.logs = (_value.logs || []).slice());
        this.labels = (_value.labels || []).slice();
        AnalyticsEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AnalyticsEvent();
        AnalyticsEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.timestamp = _instance.timestamp || '0';
        _instance.eventDetails = _instance.eventDetails || {};
        _instance.logs = _instance.logs || [];
        _instance.labels = _instance.labels || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.timestamp = _reader.readInt64String();
                    break;
                case 2:
                    const msg_2 = {};
                    _reader.readMessage(msg_2, AnalyticsEvent.EventDetailsEntry.deserializeBinaryFromReader);
                    _instance.eventDetails = _instance.eventDetails || {};
                    _instance.eventDetails[msg_2.key] = msg_2.value;
                    break;
                case 3:
                    (_instance.logs = _instance.logs || []).push(_reader.readString());
                    break;
                case 4:
                    (_instance.labels = _instance.labels || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        AnalyticsEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.timestamp) {
            _writer.writeInt64String(1, _instance.timestamp);
        }
        if (!!_instance.eventDetails) {
            const keys_2 = Object.keys(_instance.eventDetails);
            if (keys_2.length) {
                const repeated_2 = keys_2
                    .map(key => ({
                    key: key,
                    value: _instance.eventDetails[key]
                }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(2, repeated_2, AnalyticsEvent.EventDetailsEntry.serializeBinaryToWriter);
            }
        }
        if (_instance.logs && _instance.logs.length) {
            _writer.writeRepeatedString(3, _instance.logs);
        }
        if (_instance.labels && _instance.labels.length) {
            _writer.writeRepeatedString(4, _instance.labels);
        }
    }
    get timestamp() {
        return this._timestamp;
    }
    set timestamp(value) {
        this._timestamp = value;
    }
    get eventDetails() {
        return this._eventDetails;
    }
    set eventDetails(value) {
        this._eventDetails = value;
    }
    get logs() {
        return this._logs;
    }
    set logs(value) {
        this._logs = value;
    }
    get labels() {
        return this._labels;
    }
    set labels(value) {
        this._labels = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AnalyticsEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            timestamp: this.timestamp,
            eventDetails: this.eventDetails
                ? Object.keys(this.eventDetails).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.eventDetails[k] })), {})
                : {},
            logs: (this.logs || []).slice(),
            labels: (this.labels || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            timestamp: this.timestamp,
            eventDetails: this.eventDetails
                ? Object.keys(this.eventDetails).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.eventDetails[k] })), {})
                : {},
            logs: (this.logs || []).slice(),
            labels: (this.labels || []).slice()
        };
    }
}
AnalyticsEvent.id = 'proto.pub.v1.analytics.AnalyticsEvent';
(function (AnalyticsEvent) {
    /**
     * Message implementation for proto.pub.v1.analytics.EventDetailsEntry
     */
    class EventDetailsEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of EventDetailsEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value;
            EventDetailsEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new EventDetailsEntry();
            EventDetailsEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            EventDetailsEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeString(2, _instance.value);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            EventDetailsEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value
            };
        }
    }
    EventDetailsEntry.id = 'proto.pub.v1.analytics.EventDetailsEntry';
    AnalyticsEvent.EventDetailsEntry = EventDetailsEntry;
})(AnalyticsEvent || (AnalyticsEvent = {}));
/**
 * Message implementation for proto.pub.v1.analytics.ReportEventRes
 */
class ReportEventRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportEventRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ReportEventRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportEventRes();
        ReportEventRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ReportEventRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportEventRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ReportEventRes.id = 'proto.pub.v1.analytics.ReportEventRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for Analytics.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_ANALYTICS_CLIENT_SETTINGS = new InjectionToken('GRPC_ANALYTICS_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.analytics.Analytics
 */
class AnalyticsClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.analytics.Analytics/SendFeedback
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SendFeedbackRes>>
             */
            sendFeedback: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.analytics.Analytics/SendFeedback',
                    requestData,
                    requestMetadata,
                    requestClass: SendFeedbackReq,
                    responseClass: SendFeedbackRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.analytics.Analytics/ReportCrash
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ReportCrashRes>>
             */
            reportCrash: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.analytics.Analytics/ReportCrash',
                    requestData,
                    requestMetadata,
                    requestClass: ReportCrashReq,
                    responseClass: ReportCrashRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.analytics.Analytics/ReportEvent
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ReportEventRes>>
             */
            reportEvent: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.analytics.Analytics/ReportEvent',
                    requestData,
                    requestMetadata,
                    requestClass: ReportEventReq,
                    responseClass: ReportEventRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.analytics.Analytics', settings);
    }
    /**
     * Unary call @/proto.pub.v1.analytics.Analytics/SendFeedback
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SendFeedbackRes>
     */
    sendFeedback(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .sendFeedback(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.analytics.Analytics/ReportCrash
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ReportCrashRes>
     */
    reportCrash(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .reportCrash(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.analytics.Analytics/ReportEvent
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ReportEventRes>
     */
    reportEvent(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .reportEvent(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
AnalyticsClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AnalyticsClient, deps: [{ token: GRPC_ANALYTICS_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
AnalyticsClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AnalyticsClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AnalyticsClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_ANALYTICS_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
//
// THIS IS A GENERATED FILE
// DO NOT MODIFY IT! YOUR CHANGES WILL BE LOST
var Categories;
(function (Categories) {
    Categories[Categories["USER"] = 0] = "USER";
    Categories[Categories["SYSTEM"] = 1] = "SYSTEM";
    Categories[Categories["GROUP"] = 2] = "GROUP";
    Categories[Categories["CHANNEL"] = 3] = "CHANNEL";
    Categories[Categories["BOT"] = 4] = "BOT";
    Categories[Categories["STORE"] = 5] = "STORE";
})(Categories || (Categories = {}));

/**
 * Message implementation for proto.pub.v1.models.Uid
 */
class Uid {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Uid to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.category = _value.category;
        this.node = _value.node;
        this.sessionId = _value.sessionId;
        Uid.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Uid();
        Uid.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.category = _instance.category || 0;
        _instance.node = _instance.node || '';
        _instance.sessionId = _instance.sessionId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.category = _reader.readEnum();
                    break;
                case 2:
                    _instance.node = _reader.readString();
                    break;
                case 3:
                    _instance.sessionId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Uid.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.category) {
            _writer.writeEnum(1, _instance.category);
        }
        if (_instance.node) {
            _writer.writeString(2, _instance.node);
        }
        if (_instance.sessionId) {
            _writer.writeString(3, _instance.sessionId);
        }
    }
    get category() {
        return this._category;
    }
    set category(value) {
        this._category = value;
    }
    get node() {
        return this._node;
    }
    set node(value) {
        this._node = value;
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Uid.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            category: this.category,
            node: this.node,
            sessionId: this.sessionId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            category: Categories[this.category === null || this.category === undefined
                ? 0
                : this.category],
            node: this.node,
            sessionId: this.sessionId
        };
    }
}
Uid.id = 'proto.pub.v1.models.Uid';

/**
 * Message implementation for proto.pub.v1.models.Avatar
 */
class Avatar {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Avatar to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.category = _value.category;
        this.node = _value.node;
        this.createdOn = _value.createdOn;
        this.fileUuid = _value.fileUuid;
        this.fileName = _value.fileName;
        Avatar.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Avatar();
        Avatar.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.category = _instance.category || 0;
        _instance.node = _instance.node || '';
        _instance.createdOn = _instance.createdOn || '0';
        _instance.fileUuid = _instance.fileUuid || '';
        _instance.fileName = _instance.fileName || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.category = _reader.readEnum();
                    break;
                case 2:
                    _instance.node = _reader.readString();
                    break;
                case 3:
                    _instance.createdOn = _reader.readInt64String();
                    break;
                case 4:
                    _instance.fileUuid = _reader.readString();
                    break;
                case 5:
                    _instance.fileName = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Avatar.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.category) {
            _writer.writeEnum(1, _instance.category);
        }
        if (_instance.node) {
            _writer.writeString(2, _instance.node);
        }
        if (_instance.createdOn) {
            _writer.writeInt64String(3, _instance.createdOn);
        }
        if (_instance.fileUuid) {
            _writer.writeString(4, _instance.fileUuid);
        }
        if (_instance.fileName) {
            _writer.writeString(5, _instance.fileName);
        }
    }
    get category() {
        return this._category;
    }
    set category(value) {
        this._category = value;
    }
    get node() {
        return this._node;
    }
    set node(value) {
        this._node = value;
    }
    get createdOn() {
        return this._createdOn;
    }
    set createdOn(value) {
        this._createdOn = value;
    }
    get fileUuid() {
        return this._fileUuid;
    }
    set fileUuid(value) {
        this._fileUuid = value;
    }
    get fileName() {
        return this._fileName;
    }
    set fileName(value) {
        this._fileName = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Avatar.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            category: this.category,
            node: this.node,
            createdOn: this.createdOn,
            fileUuid: this.fileUuid,
            fileName: this.fileName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            category: Categories[this.category === null || this.category === undefined
                ? 0
                : this.category],
            node: this.node,
            createdOn: this.createdOn,
            fileUuid: this.fileUuid,
            fileName: this.fileName
        };
    }
}
Avatar.id = 'proto.pub.v1.models.Avatar';

/**
 * Message implementation for proto.pub.v1.avatar.GetAvatarReq
 */
class GetAvatarReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uidList = (_value.uidList || []).map(m => new Uid(m));
        GetAvatarReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAvatarReq();
        GetAvatarReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uidList = _instance.uidList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Uid();
                    _reader.readMessage(messageInitializer1, Uid.deserializeBinaryFromReader);
                    (_instance.uidList = _instance.uidList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAvatarReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uidList && _instance.uidList.length) {
            _writer.writeRepeatedMessage(1, _instance.uidList, Uid.serializeBinaryToWriter);
        }
    }
    get uidList() {
        return this._uidList;
    }
    set uidList(value) {
        this._uidList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAvatarReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uidList: (this.uidList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uidList: (this.uidList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetAvatarReq.id = 'proto.pub.v1.avatar.GetAvatarReq';
/**
 * Message implementation for proto.pub.v1.avatar.GetAvatarRes
 */
class GetAvatarRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = (_value.avatar || []).map(m => new Avatar(m));
        GetAvatarRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAvatarRes();
        GetAvatarRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Avatar();
                    _reader.readMessage(messageInitializer1, Avatar.deserializeBinaryFromReader);
                    (_instance.avatar = _instance.avatar || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAvatarRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar && _instance.avatar.length) {
            _writer.writeRepeatedMessage(1, _instance.avatar, Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAvatarRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: (this.avatar || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: (this.avatar || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetAvatarRes.id = 'proto.pub.v1.avatar.GetAvatarRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for AvatarService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_AVATAR_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_AVATAR_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.avatar.AvatarService
 */
class AvatarServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.avatar.AvatarService/GetAvatar
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetAvatarRes>>
             */
            getAvatar: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.avatar.AvatarService/GetAvatar',
                    requestData,
                    requestMetadata,
                    requestClass: GetAvatarReq,
                    responseClass: GetAvatarRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.avatar.AvatarService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.avatar.AvatarService/GetAvatar
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetAvatarRes>
     */
    getAvatar(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAvatar(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
AvatarServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AvatarServiceClient, deps: [{ token: GRPC_AVATAR_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
AvatarServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AvatarServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AvatarServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_AVATAR_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.models.Location
 */
class Location {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Location to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.latitude = _value.latitude;
        this.longitude = _value.longitude;
        Location.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Location();
        Location.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.latitude = _instance.latitude || 0;
        _instance.longitude = _instance.longitude || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.latitude = _reader.readDouble();
                    break;
                case 2:
                    _instance.longitude = _reader.readDouble();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Location.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.latitude) {
            _writer.writeDouble(1, _instance.latitude);
        }
        if (_instance.longitude) {
            _writer.writeDouble(2, _instance.longitude);
        }
    }
    get latitude() {
        return this._latitude;
    }
    set latitude(value) {
        this._latitude = value;
    }
    get longitude() {
        return this._longitude;
    }
    set longitude(value) {
        this._longitude = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Location.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    }
}
Location.id = 'proto.pub.v1.models.Location';
/**
 * Message implementation for proto.pub.v1.models.LiveLocation
 */
class LiveLocation {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LiveLocation to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.time = _value.time;
        this.location = _value.location ? new Location(_value.location) : undefined;
        LiveLocation.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LiveLocation();
        LiveLocation.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.time = _instance.time || '0';
        _instance.location = _instance.location || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.time = _reader.readInt64String();
                    break;
                case 5:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        LiveLocation.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.from) {
            _writer.writeMessage(2, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(3, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.time) {
            _writer.writeInt64String(4, _instance.time);
        }
        if (_instance.location) {
            _writer.writeMessage(5, _instance.location, Location.serializeBinaryToWriter);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LiveLocation.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            time: this.time,
            location: this.location ? this.location.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            time: this.time,
            location: this.location ? this.location.toProtobufJSON(options) : null
        };
    }
}
LiveLocation.id = 'proto.pub.v1.models.LiveLocation';

/**
 * Message implementation for proto.pub.v1.models.Form
 */
class Form {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Form to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.title = _value.title;
        this.fields = (_value.fields || []).map(m => new Form.Field(m));
        this.lockAfter = _value.lockAfter;
        Form.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Form();
        Form.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.title = _instance.title || '';
        _instance.fields = _instance.fields || [];
        _instance.lockAfter = _instance.lockAfter || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.title = _reader.readString();
                    break;
                case 3:
                    const messageInitializer3 = new Form.Field();
                    _reader.readMessage(messageInitializer3, Form.Field.deserializeBinaryFromReader);
                    (_instance.fields = _instance.fields || []).push(messageInitializer3);
                    break;
                case 4:
                    _instance.lockAfter = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Form.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.title) {
            _writer.writeString(2, _instance.title);
        }
        if (_instance.fields && _instance.fields.length) {
            _writer.writeRepeatedMessage(3, _instance.fields, Form.Field.serializeBinaryToWriter);
        }
        if (_instance.lockAfter) {
            _writer.writeInt64String(4, _instance.lockAfter);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get title() {
        return this._title;
    }
    set title(value) {
        this._title = value;
    }
    get fields() {
        return this._fields;
    }
    set fields(value) {
        this._fields = value;
    }
    get lockAfter() {
        return this._lockAfter;
    }
    set lockAfter(value) {
        this._lockAfter = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Form.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            title: this.title,
            fields: (this.fields || []).map(m => m.toObject()),
            lockAfter: this.lockAfter
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            title: this.title,
            fields: (this.fields || []).map(m => m.toProtobufJSON(options)),
            lockAfter: this.lockAfter
        };
    }
}
Form.id = 'proto.pub.v1.models.Form';
(function (Form) {
    /**
     * Message implementation for proto.pub.v1.models.TextField
     */
    class TextField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TextField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.defaultText = _value.defaultText;
            this.min = _value.min;
            this.max = _value.max;
            this.preValidationRegex = _value.preValidationRegex;
            this.placeholder = _value.placeholder;
            TextField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TextField();
            TextField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.defaultText = _instance.defaultText || '';
            _instance.min = _instance.min || 0;
            _instance.max = _instance.max || 0;
            _instance.preValidationRegex = _instance.preValidationRegex || '';
            _instance.placeholder = _instance.placeholder || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.defaultText = _reader.readString();
                        break;
                    case 2:
                        _instance.min = _reader.readInt32();
                        break;
                    case 3:
                        _instance.max = _reader.readInt32();
                        break;
                    case 4:
                        _instance.preValidationRegex = _reader.readString();
                        break;
                    case 5:
                        _instance.placeholder = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TextField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.defaultText) {
                _writer.writeString(1, _instance.defaultText);
            }
            if (_instance.min) {
                _writer.writeInt32(2, _instance.min);
            }
            if (_instance.max) {
                _writer.writeInt32(3, _instance.max);
            }
            if (_instance.preValidationRegex) {
                _writer.writeString(4, _instance.preValidationRegex);
            }
            if (_instance.placeholder) {
                _writer.writeString(5, _instance.placeholder);
            }
        }
        get defaultText() {
            return this._defaultText;
        }
        set defaultText(value) {
            this._defaultText = value;
        }
        get min() {
            return this._min;
        }
        set min(value) {
            this._min = value;
        }
        get max() {
            return this._max;
        }
        set max(value) {
            this._max = value;
        }
        get preValidationRegex() {
            return this._preValidationRegex;
        }
        set preValidationRegex(value) {
            this._preValidationRegex = value;
        }
        get placeholder() {
            return this._placeholder;
        }
        set placeholder(value) {
            this._placeholder = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TextField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                defaultText: this.defaultText,
                min: this.min,
                max: this.max,
                preValidationRegex: this.preValidationRegex,
                placeholder: this.placeholder
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                defaultText: this.defaultText,
                min: this.min,
                max: this.max,
                preValidationRegex: this.preValidationRegex,
                placeholder: this.placeholder
            };
        }
    }
    TextField.id = 'proto.pub.v1.models.TextField';
    Form.TextField = TextField;
    /**
     * Message implementation for proto.pub.v1.models.FormattedTextField
     */
    class FormattedTextField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of FormattedTextField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.partitionsSizes = (_value.partitionsSizes || []).slice();
            this.defaultText = _value.defaultText;
            this.preValidationRegex = _value.preValidationRegex;
            FormattedTextField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new FormattedTextField();
            FormattedTextField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.partitionsSizes = _instance.partitionsSizes || [];
            _instance.defaultText = _instance.defaultText || '';
            _instance.preValidationRegex = _instance.preValidationRegex || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        (_instance.partitionsSizes = _instance.partitionsSizes || []).push(...(_reader.readPackedInt32() || []));
                        break;
                    case 2:
                        _instance.defaultText = _reader.readString();
                        break;
                    case 4:
                        _instance.preValidationRegex = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            FormattedTextField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.partitionsSizes && _instance.partitionsSizes.length) {
                _writer.writePackedInt32(1, _instance.partitionsSizes);
            }
            if (_instance.defaultText) {
                _writer.writeString(2, _instance.defaultText);
            }
            if (_instance.preValidationRegex) {
                _writer.writeString(4, _instance.preValidationRegex);
            }
        }
        get partitionsSizes() {
            return this._partitionsSizes;
        }
        set partitionsSizes(value) {
            this._partitionsSizes = value;
        }
        get defaultText() {
            return this._defaultText;
        }
        set defaultText(value) {
            this._defaultText = value;
        }
        get preValidationRegex() {
            return this._preValidationRegex;
        }
        set preValidationRegex(value) {
            this._preValidationRegex = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            FormattedTextField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                partitionsSizes: (this.partitionsSizes || []).slice(),
                defaultText: this.defaultText,
                preValidationRegex: this.preValidationRegex
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                partitionsSizes: (this.partitionsSizes || []).slice(),
                defaultText: this.defaultText,
                preValidationRegex: this.preValidationRegex
            };
        }
    }
    FormattedTextField.id = 'proto.pub.v1.models.FormattedTextField';
    Form.FormattedTextField = FormattedTextField;
    /**
     * Message implementation for proto.pub.v1.models.RichFormattedTextField
     */
    class RichFormattedTextField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of RichFormattedTextField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.partitions = (_value.partitions || []).map(m => new Form.TextField(m));
            RichFormattedTextField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new RichFormattedTextField();
            RichFormattedTextField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.partitions = _instance.partitions || [];
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        const messageInitializer1 = new Form.TextField();
                        _reader.readMessage(messageInitializer1, Form.TextField.deserializeBinaryFromReader);
                        (_instance.partitions = _instance.partitions || []).push(messageInitializer1);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            RichFormattedTextField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.partitions && _instance.partitions.length) {
                _writer.writeRepeatedMessage(1, _instance.partitions, Form.TextField.serializeBinaryToWriter);
            }
        }
        get partitions() {
            return this._partitions;
        }
        set partitions(value) {
            this._partitions = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            RichFormattedTextField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                partitions: (this.partitions || []).map(m => m.toObject())
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                partitions: (this.partitions || []).map(m => m.toProtobufJSON(options))
            };
        }
    }
    RichFormattedTextField.id = 'proto.pub.v1.models.RichFormattedTextField';
    Form.RichFormattedTextField = RichFormattedTextField;
    /**
     * Message implementation for proto.pub.v1.models.NumberField
     */
    class NumberField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of NumberField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.defaultNumber = _value.defaultNumber;
            this.min = _value.min;
            this.max = _value.max;
            NumberField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new NumberField();
            NumberField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.defaultNumber = _instance.defaultNumber || 0;
            _instance.min = _instance.min || 0;
            _instance.max = _instance.max || 0;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.defaultNumber = _reader.readDouble();
                        break;
                    case 2:
                        _instance.min = _reader.readDouble();
                        break;
                    case 3:
                        _instance.max = _reader.readDouble();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            NumberField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.defaultNumber) {
                _writer.writeDouble(1, _instance.defaultNumber);
            }
            if (_instance.min) {
                _writer.writeDouble(2, _instance.min);
            }
            if (_instance.max) {
                _writer.writeDouble(3, _instance.max);
            }
        }
        get defaultNumber() {
            return this._defaultNumber;
        }
        set defaultNumber(value) {
            this._defaultNumber = value;
        }
        get min() {
            return this._min;
        }
        set min(value) {
            this._min = value;
        }
        get max() {
            return this._max;
        }
        set max(value) {
            this._max = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            NumberField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                defaultNumber: this.defaultNumber,
                min: this.min,
                max: this.max
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                defaultNumber: this.defaultNumber,
                min: this.min,
                max: this.max
            };
        }
    }
    NumberField.id = 'proto.pub.v1.models.NumberField';
    Form.NumberField = NumberField;
    /**
     * Message implementation for proto.pub.v1.models.DateField
     */
    class DateField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of DateField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.defaultDate = _value.defaultDate;
            this.isHijriShamsi = _value.isHijriShamsi;
            this.validStartDate = _value.validStartDate;
            this.validEndDate = _value.validEndDate;
            DateField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new DateField();
            DateField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.defaultDate = _instance.defaultDate || '';
            _instance.isHijriShamsi = _instance.isHijriShamsi || false;
            _instance.validStartDate = _instance.validStartDate || '';
            _instance.validEndDate = _instance.validEndDate || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.defaultDate = _reader.readString();
                        break;
                    case 2:
                        _instance.isHijriShamsi = _reader.readBool();
                        break;
                    case 3:
                        _instance.validStartDate = _reader.readString();
                        break;
                    case 4:
                        _instance.validEndDate = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            DateField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.defaultDate) {
                _writer.writeString(1, _instance.defaultDate);
            }
            if (_instance.isHijriShamsi) {
                _writer.writeBool(2, _instance.isHijriShamsi);
            }
            if (_instance.validStartDate) {
                _writer.writeString(3, _instance.validStartDate);
            }
            if (_instance.validEndDate) {
                _writer.writeString(4, _instance.validEndDate);
            }
        }
        get defaultDate() {
            return this._defaultDate;
        }
        set defaultDate(value) {
            this._defaultDate = value;
        }
        get isHijriShamsi() {
            return this._isHijriShamsi;
        }
        set isHijriShamsi(value) {
            this._isHijriShamsi = value;
        }
        get validStartDate() {
            return this._validStartDate;
        }
        set validStartDate(value) {
            this._validStartDate = value;
        }
        get validEndDate() {
            return this._validEndDate;
        }
        set validEndDate(value) {
            this._validEndDate = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            DateField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                defaultDate: this.defaultDate,
                isHijriShamsi: this.isHijriShamsi,
                validStartDate: this.validStartDate,
                validEndDate: this.validEndDate
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                defaultDate: this.defaultDate,
                isHijriShamsi: this.isHijriShamsi,
                validStartDate: this.validStartDate,
                validEndDate: this.validEndDate
            };
        }
    }
    DateField.id = 'proto.pub.v1.models.DateField';
    Form.DateField = DateField;
    /**
     * Message implementation for proto.pub.v1.models.TimeField
     */
    class TimeField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TimeField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.defaultTime = _value.defaultTime;
            this.validStartTime = _value.validStartTime;
            this.validEndTime = _value.validEndTime;
            TimeField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TimeField();
            TimeField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.defaultTime = _instance.defaultTime || '';
            _instance.validStartTime = _instance.validStartTime || '';
            _instance.validEndTime = _instance.validEndTime || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 2:
                        _instance.defaultTime = _reader.readString();
                        break;
                    case 1:
                        _instance.validStartTime = _reader.readString();
                        break;
                    case 3:
                        _instance.validEndTime = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TimeField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.defaultTime) {
                _writer.writeString(2, _instance.defaultTime);
            }
            if (_instance.validStartTime) {
                _writer.writeString(1, _instance.validStartTime);
            }
            if (_instance.validEndTime) {
                _writer.writeString(3, _instance.validEndTime);
            }
        }
        get defaultTime() {
            return this._defaultTime;
        }
        set defaultTime(value) {
            this._defaultTime = value;
        }
        get validStartTime() {
            return this._validStartTime;
        }
        set validStartTime(value) {
            this._validStartTime = value;
        }
        get validEndTime() {
            return this._validEndTime;
        }
        set validEndTime(value) {
            this._validEndTime = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TimeField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                defaultTime: this.defaultTime,
                validStartTime: this.validStartTime,
                validEndTime: this.validEndTime
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                defaultTime: this.defaultTime,
                validStartTime: this.validStartTime,
                validEndTime: this.validEndTime
            };
        }
    }
    TimeField.id = 'proto.pub.v1.models.TimeField';
    Form.TimeField = TimeField;
    /**
     * Message implementation for proto.pub.v1.models.DataAndTimeField
     */
    class DataAndTimeField {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of DataAndTimeField to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.defaultDate = _value.defaultDate;
            this.isHijriShamsi = _value.isHijriShamsi;
            this.validStartDate = _value.validStartDate;
            this.validEndDate = _value.validEndDate;
            DataAndTimeField.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new DataAndTimeField();
            DataAndTimeField.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.defaultDate = _instance.defaultDate || '';
            _instance.isHijriShamsi = _instance.isHijriShamsi || false;
            _instance.validStartDate = _instance.validStartDate || '';
            _instance.validEndDate = _instance.validEndDate || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.defaultDate = _reader.readString();
                        break;
                    case 2:
                        _instance.isHijriShamsi = _reader.readBool();
                        break;
                    case 3:
                        _instance.validStartDate = _reader.readString();
                        break;
                    case 4:
                        _instance.validEndDate = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            DataAndTimeField.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.defaultDate) {
                _writer.writeString(1, _instance.defaultDate);
            }
            if (_instance.isHijriShamsi) {
                _writer.writeBool(2, _instance.isHijriShamsi);
            }
            if (_instance.validStartDate) {
                _writer.writeString(3, _instance.validStartDate);
            }
            if (_instance.validEndDate) {
                _writer.writeString(4, _instance.validEndDate);
            }
        }
        get defaultDate() {
            return this._defaultDate;
        }
        set defaultDate(value) {
            this._defaultDate = value;
        }
        get isHijriShamsi() {
            return this._isHijriShamsi;
        }
        set isHijriShamsi(value) {
            this._isHijriShamsi = value;
        }
        get validStartDate() {
            return this._validStartDate;
        }
        set validStartDate(value) {
            this._validStartDate = value;
        }
        get validEndDate() {
            return this._validEndDate;
        }
        set validEndDate(value) {
            this._validEndDate = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            DataAndTimeField.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                defaultDate: this.defaultDate,
                isHijriShamsi: this.isHijriShamsi,
                validStartDate: this.validStartDate,
                validEndDate: this.validEndDate
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                defaultDate: this.defaultDate,
                isHijriShamsi: this.isHijriShamsi,
                validStartDate: this.validStartDate,
                validEndDate: this.validEndDate
            };
        }
    }
    DataAndTimeField.id = 'proto.pub.v1.models.DataAndTimeField';
    Form.DataAndTimeField = DataAndTimeField;
    /**
     * Message implementation for proto.pub.v1.models.CheckBox
     */
    class CheckBox {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CheckBox to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.defaultSelected = _value.defaultSelected;
            CheckBox.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CheckBox();
            CheckBox.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.defaultSelected = _instance.defaultSelected || false;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.defaultSelected = _reader.readBool();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CheckBox.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.defaultSelected) {
                _writer.writeBool(1, _instance.defaultSelected);
            }
        }
        get defaultSelected() {
            return this._defaultSelected;
        }
        set defaultSelected(value) {
            this._defaultSelected = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CheckBox.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                defaultSelected: this.defaultSelected
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                defaultSelected: this.defaultSelected
            };
        }
    }
    CheckBox.id = 'proto.pub.v1.models.CheckBox';
    Form.CheckBox = CheckBox;
    /**
     * Message implementation for proto.pub.v1.models.RadioButtonList
     */
    class RadioButtonList {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of RadioButtonList to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.values = (_value.values || []).slice();
            RadioButtonList.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new RadioButtonList();
            RadioButtonList.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.values = _instance.values || [];
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        (_instance.values = _instance.values || []).push(_reader.readString());
                        break;
                    default:
                        _reader.skipField();
                }
            }
            RadioButtonList.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.values && _instance.values.length) {
                _writer.writeRepeatedString(1, _instance.values);
            }
        }
        get values() {
            return this._values;
        }
        set values(value) {
            this._values = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            RadioButtonList.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                values: (this.values || []).slice()
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                values: (this.values || []).slice()
            };
        }
    }
    RadioButtonList.id = 'proto.pub.v1.models.RadioButtonList';
    Form.RadioButtonList = RadioButtonList;
    /**
     * Message implementation for proto.pub.v1.models.List
     */
    class List {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of List to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.values = (_value.values || []).slice();
            List.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new List();
            List.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.values = _instance.values || [];
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        (_instance.values = _instance.values || []).push(_reader.readString());
                        break;
                    default:
                        _reader.skipField();
                }
            }
            List.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.values && _instance.values.length) {
                _writer.writeRepeatedString(1, _instance.values);
            }
        }
        get values() {
            return this._values;
        }
        set values(value) {
            this._values = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            List.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                values: (this.values || []).slice()
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                values: (this.values || []).slice()
            };
        }
    }
    List.id = 'proto.pub.v1.models.List';
    Form.List = List;
    /**
     * Message implementation for proto.pub.v1.models.Field
     */
    class Field {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Field to deeply clone from
         */
        constructor(_value) {
            this._type = Field.TypeCase.none;
            _value = _value || {};
            this.id = _value.id;
            this.hint = _value.hint;
            this.isOptional = _value.isOptional;
            this.textField = _value.textField
                ? new Form.TextField(_value.textField)
                : undefined;
            this.formattedTextField = _value.formattedTextField
                ? new Form.FormattedTextField(_value.formattedTextField)
                : undefined;
            this.richFormattedTextField = _value.richFormattedTextField
                ? new Form.RichFormattedTextField(_value.richFormattedTextField)
                : undefined;
            this.numberField = _value.numberField
                ? new Form.NumberField(_value.numberField)
                : undefined;
            this.dateField = _value.dateField
                ? new Form.DateField(_value.dateField)
                : undefined;
            this.timeField = _value.timeField
                ? new Form.TimeField(_value.timeField)
                : undefined;
            this.dateAndTimeField = _value.dateAndTimeField
                ? new Form.DataAndTimeField(_value.dateAndTimeField)
                : undefined;
            this.checkbox = _value.checkbox
                ? new Form.CheckBox(_value.checkbox)
                : undefined;
            this.radioButtonList = _value.radioButtonList
                ? new Form.RadioButtonList(_value.radioButtonList)
                : undefined;
            this.list = _value.list ? new Form.List(_value.list) : undefined;
            Field.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Field();
            Field.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.id = _instance.id || '';
            _instance.hint = _instance.hint || '';
            _instance.isOptional = _instance.isOptional || false;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.id = _reader.readString();
                        break;
                    case 2:
                        _instance.hint = _reader.readString();
                        break;
                    case 3:
                        _instance.isOptional = _reader.readBool();
                        break;
                    case 4:
                        _instance.textField = new Form.TextField();
                        _reader.readMessage(_instance.textField, Form.TextField.deserializeBinaryFromReader);
                        break;
                    case 11:
                        _instance.formattedTextField = new Form.FormattedTextField();
                        _reader.readMessage(_instance.formattedTextField, Form.FormattedTextField.deserializeBinaryFromReader);
                        break;
                    case 12:
                        _instance.richFormattedTextField = new Form.RichFormattedTextField();
                        _reader.readMessage(_instance.richFormattedTextField, Form.RichFormattedTextField.deserializeBinaryFromReader);
                        break;
                    case 5:
                        _instance.numberField = new Form.NumberField();
                        _reader.readMessage(_instance.numberField, Form.NumberField.deserializeBinaryFromReader);
                        break;
                    case 6:
                        _instance.dateField = new Form.DateField();
                        _reader.readMessage(_instance.dateField, Form.DateField.deserializeBinaryFromReader);
                        break;
                    case 7:
                        _instance.timeField = new Form.TimeField();
                        _reader.readMessage(_instance.timeField, Form.TimeField.deserializeBinaryFromReader);
                        break;
                    case 13:
                        _instance.dateAndTimeField = new Form.DataAndTimeField();
                        _reader.readMessage(_instance.dateAndTimeField, Form.DataAndTimeField.deserializeBinaryFromReader);
                        break;
                    case 8:
                        _instance.checkbox = new Form.CheckBox();
                        _reader.readMessage(_instance.checkbox, Form.CheckBox.deserializeBinaryFromReader);
                        break;
                    case 9:
                        _instance.radioButtonList = new Form.RadioButtonList();
                        _reader.readMessage(_instance.radioButtonList, Form.RadioButtonList.deserializeBinaryFromReader);
                        break;
                    case 10:
                        _instance.list = new Form.List();
                        _reader.readMessage(_instance.list, Form.List.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Field.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.id) {
                _writer.writeString(1, _instance.id);
            }
            if (_instance.hint) {
                _writer.writeString(2, _instance.hint);
            }
            if (_instance.isOptional) {
                _writer.writeBool(3, _instance.isOptional);
            }
            if (_instance.textField) {
                _writer.writeMessage(4, _instance.textField, Form.TextField.serializeBinaryToWriter);
            }
            if (_instance.formattedTextField) {
                _writer.writeMessage(11, _instance.formattedTextField, Form.FormattedTextField.serializeBinaryToWriter);
            }
            if (_instance.richFormattedTextField) {
                _writer.writeMessage(12, _instance.richFormattedTextField, Form.RichFormattedTextField.serializeBinaryToWriter);
            }
            if (_instance.numberField) {
                _writer.writeMessage(5, _instance.numberField, Form.NumberField.serializeBinaryToWriter);
            }
            if (_instance.dateField) {
                _writer.writeMessage(6, _instance.dateField, Form.DateField.serializeBinaryToWriter);
            }
            if (_instance.timeField) {
                _writer.writeMessage(7, _instance.timeField, Form.TimeField.serializeBinaryToWriter);
            }
            if (_instance.dateAndTimeField) {
                _writer.writeMessage(13, _instance.dateAndTimeField, Form.DataAndTimeField.serializeBinaryToWriter);
            }
            if (_instance.checkbox) {
                _writer.writeMessage(8, _instance.checkbox, Form.CheckBox.serializeBinaryToWriter);
            }
            if (_instance.radioButtonList) {
                _writer.writeMessage(9, _instance.radioButtonList, Form.RadioButtonList.serializeBinaryToWriter);
            }
            if (_instance.list) {
                _writer.writeMessage(10, _instance.list, Form.List.serializeBinaryToWriter);
            }
        }
        get id() {
            return this._id;
        }
        set id(value) {
            this._id = value;
        }
        get hint() {
            return this._hint;
        }
        set hint(value) {
            this._hint = value;
        }
        get isOptional() {
            return this._isOptional;
        }
        set isOptional(value) {
            this._isOptional = value;
        }
        get textField() {
            return this._textField;
        }
        set textField(value) {
            if (value !== undefined && value !== null) {
                this._formattedTextField = this._richFormattedTextField = this._numberField = this._dateField = this._timeField = this._dateAndTimeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.textField;
            }
            this._textField = value;
        }
        get formattedTextField() {
            return this._formattedTextField;
        }
        set formattedTextField(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._richFormattedTextField = this._numberField = this._dateField = this._timeField = this._dateAndTimeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.formattedTextField;
            }
            this._formattedTextField = value;
        }
        get richFormattedTextField() {
            return this._richFormattedTextField;
        }
        set richFormattedTextField(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._numberField = this._dateField = this._timeField = this._dateAndTimeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.richFormattedTextField;
            }
            this._richFormattedTextField = value;
        }
        get numberField() {
            return this._numberField;
        }
        set numberField(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._dateField = this._timeField = this._dateAndTimeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.numberField;
            }
            this._numberField = value;
        }
        get dateField() {
            return this._dateField;
        }
        set dateField(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._numberField = this._timeField = this._dateAndTimeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.dateField;
            }
            this._dateField = value;
        }
        get timeField() {
            return this._timeField;
        }
        set timeField(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._numberField = this._dateField = this._dateAndTimeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.timeField;
            }
            this._timeField = value;
        }
        get dateAndTimeField() {
            return this._dateAndTimeField;
        }
        set dateAndTimeField(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._numberField = this._dateField = this._timeField = this._checkbox = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.dateAndTimeField;
            }
            this._dateAndTimeField = value;
        }
        get checkbox() {
            return this._checkbox;
        }
        set checkbox(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._numberField = this._dateField = this._timeField = this._dateAndTimeField = this._radioButtonList = this._list = undefined;
                this._type = Field.TypeCase.checkbox;
            }
            this._checkbox = value;
        }
        get radioButtonList() {
            return this._radioButtonList;
        }
        set radioButtonList(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._numberField = this._dateField = this._timeField = this._dateAndTimeField = this._checkbox = this._list = undefined;
                this._type = Field.TypeCase.radioButtonList;
            }
            this._radioButtonList = value;
        }
        get list() {
            return this._list;
        }
        set list(value) {
            if (value !== undefined && value !== null) {
                this._textField = this._formattedTextField = this._richFormattedTextField = this._numberField = this._dateField = this._timeField = this._dateAndTimeField = this._checkbox = this._radioButtonList = undefined;
                this._type = Field.TypeCase.list;
            }
            this._list = value;
        }
        get type() {
            return this._type;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Field.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                id: this.id,
                hint: this.hint,
                isOptional: this.isOptional,
                textField: this.textField ? this.textField.toObject() : undefined,
                formattedTextField: this.formattedTextField
                    ? this.formattedTextField.toObject()
                    : undefined,
                richFormattedTextField: this.richFormattedTextField
                    ? this.richFormattedTextField.toObject()
                    : undefined,
                numberField: this.numberField ? this.numberField.toObject() : undefined,
                dateField: this.dateField ? this.dateField.toObject() : undefined,
                timeField: this.timeField ? this.timeField.toObject() : undefined,
                dateAndTimeField: this.dateAndTimeField
                    ? this.dateAndTimeField.toObject()
                    : undefined,
                checkbox: this.checkbox ? this.checkbox.toObject() : undefined,
                radioButtonList: this.radioButtonList
                    ? this.radioButtonList.toObject()
                    : undefined,
                list: this.list ? this.list.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                id: this.id,
                hint: this.hint,
                isOptional: this.isOptional,
                textField: this.textField
                    ? this.textField.toProtobufJSON(options)
                    : null,
                formattedTextField: this.formattedTextField
                    ? this.formattedTextField.toProtobufJSON(options)
                    : null,
                richFormattedTextField: this.richFormattedTextField
                    ? this.richFormattedTextField.toProtobufJSON(options)
                    : null,
                numberField: this.numberField
                    ? this.numberField.toProtobufJSON(options)
                    : null,
                dateField: this.dateField
                    ? this.dateField.toProtobufJSON(options)
                    : null,
                timeField: this.timeField
                    ? this.timeField.toProtobufJSON(options)
                    : null,
                dateAndTimeField: this.dateAndTimeField
                    ? this.dateAndTimeField.toProtobufJSON(options)
                    : null,
                checkbox: this.checkbox ? this.checkbox.toProtobufJSON(options) : null,
                radioButtonList: this.radioButtonList
                    ? this.radioButtonList.toProtobufJSON(options)
                    : null,
                list: this.list ? this.list.toProtobufJSON(options) : null
            };
        }
    }
    Field.id = 'proto.pub.v1.models.Field';
    Form.Field = Field;
    (function (Field) {
        let TypeCase;
        (function (TypeCase) {
            TypeCase[TypeCase["none"] = 0] = "none";
            TypeCase[TypeCase["textField"] = 1] = "textField";
            TypeCase[TypeCase["formattedTextField"] = 2] = "formattedTextField";
            TypeCase[TypeCase["richFormattedTextField"] = 3] = "richFormattedTextField";
            TypeCase[TypeCase["numberField"] = 4] = "numberField";
            TypeCase[TypeCase["dateField"] = 5] = "dateField";
            TypeCase[TypeCase["timeField"] = 6] = "timeField";
            TypeCase[TypeCase["dateAndTimeField"] = 7] = "dateAndTimeField";
            TypeCase[TypeCase["checkbox"] = 8] = "checkbox";
            TypeCase[TypeCase["radioButtonList"] = 9] = "radioButtonList";
            TypeCase[TypeCase["list"] = 10] = "list";
        })(TypeCase = Field.TypeCase || (Field.TypeCase = {}));
    })(Field = Form.Field || (Form.Field = {}));
})(Form || (Form = {}));
/**
 * Message implementation for proto.pub.v1.models.Buttons
 */
class Buttons {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Buttons to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.text = _value.text;
        this.buttons = (_value.buttons || []).slice();
        this.lockAfter = _value.lockAfter;
        Buttons.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Buttons();
        Buttons.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
        _instance.buttons = _instance.buttons || [];
        _instance.lockAfter = _instance.lockAfter || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 3:
                    _instance.text = _reader.readString();
                    break;
                case 1:
                    (_instance.buttons = _instance.buttons || []).push(_reader.readString());
                    break;
                case 2:
                    _instance.lockAfter = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Buttons.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(3, _instance.text);
        }
        if (_instance.buttons && _instance.buttons.length) {
            _writer.writeRepeatedString(1, _instance.buttons);
        }
        if (_instance.lockAfter) {
            _writer.writeInt64String(2, _instance.lockAfter);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get buttons() {
        return this._buttons;
    }
    set buttons(value) {
        this._buttons = value;
    }
    get lockAfter() {
        return this._lockAfter;
    }
    set lockAfter(value) {
        this._lockAfter = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Buttons.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text,
            buttons: (this.buttons || []).slice(),
            lockAfter: this.lockAfter
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text,
            buttons: (this.buttons || []).slice(),
            lockAfter: this.lockAfter
        };
    }
}
Buttons.id = 'proto.pub.v1.models.Buttons';
/**
 * Message implementation for proto.pub.v1.models.FormResult
 */
class FormResult {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FormResult to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        (this.values = _value.values
            ? Object.keys(_value.values).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.values[k] })), {})
            : {}),
            (this.previewOverride = _value.previewOverride
                ? Object.keys(_value.previewOverride).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.previewOverride[k] })), {})
                : {}),
            FormResult.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FormResult();
        FormResult.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.values = _instance.values || {};
        _instance.previewOverride = _instance.previewOverride || {};
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    const msg_2 = {};
                    _reader.readMessage(msg_2, FormResult.ValuesEntry.deserializeBinaryFromReader);
                    _instance.values = _instance.values || {};
                    _instance.values[msg_2.key] = msg_2.value;
                    break;
                case 3:
                    const msg_3 = {};
                    _reader.readMessage(msg_3, FormResult.PreviewOverrideEntry.deserializeBinaryFromReader);
                    _instance.previewOverride = _instance.previewOverride || {};
                    _instance.previewOverride[msg_3.key] = msg_3.value;
                    break;
                default:
                    _reader.skipField();
            }
        }
        FormResult.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (!!_instance.values) {
            const keys_2 = Object.keys(_instance.values);
            if (keys_2.length) {
                const repeated_2 = keys_2
                    .map(key => ({ key: key, value: _instance.values[key] }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(2, repeated_2, FormResult.ValuesEntry.serializeBinaryToWriter);
            }
        }
        if (!!_instance.previewOverride) {
            const keys_3 = Object.keys(_instance.previewOverride);
            if (keys_3.length) {
                const repeated_3 = keys_3
                    .map(key => ({
                    key: key,
                    value: _instance.previewOverride[key]
                }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(3, repeated_3, FormResult.PreviewOverrideEntry.serializeBinaryToWriter);
            }
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get values() {
        return this._values;
    }
    set values(value) {
        this._values = value;
    }
    get previewOverride() {
        return this._previewOverride;
    }
    set previewOverride(value) {
        this._previewOverride = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FormResult.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            values: this.values
                ? Object.keys(this.values).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.values[k] })), {})
                : {},
            previewOverride: this.previewOverride
                ? Object.keys(this.previewOverride).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.previewOverride[k] })), {})
                : {}
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            values: this.values
                ? Object.keys(this.values).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.values[k] })), {})
                : {},
            previewOverride: this.previewOverride
                ? Object.keys(this.previewOverride).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.previewOverride[k] })), {})
                : {}
        };
    }
}
FormResult.id = 'proto.pub.v1.models.FormResult';
(function (FormResult) {
    /**
     * Message implementation for proto.pub.v1.models.ValuesEntry
     */
    class ValuesEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ValuesEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value;
            ValuesEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ValuesEntry();
            ValuesEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ValuesEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeString(2, _instance.value);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ValuesEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value
            };
        }
    }
    ValuesEntry.id = 'proto.pub.v1.models.ValuesEntry';
    FormResult.ValuesEntry = ValuesEntry;
    /**
     * Message implementation for proto.pub.v1.models.PreviewOverrideEntry
     */
    class PreviewOverrideEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of PreviewOverrideEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value;
            PreviewOverrideEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new PreviewOverrideEntry();
            PreviewOverrideEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            PreviewOverrideEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeString(2, _instance.value);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            PreviewOverrideEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value
            };
        }
    }
    PreviewOverrideEntry.id = 'proto.pub.v1.models.PreviewOverrideEntry';
    FormResult.PreviewOverrideEntry = PreviewOverrideEntry;
})(FormResult || (FormResult = {}));
/**
 * Message implementation for proto.pub.v1.models.TableRow
 */
class TableRow {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TableRow to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.columns = (_value.columns || []).slice();
        this.highlight = _value.highlight;
        this.bold = _value.bold;
        TableRow.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TableRow();
        TableRow.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.columns = _instance.columns || [];
        _instance.highlight = _instance.highlight || false;
        _instance.bold = _instance.bold || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.columns = _instance.columns || []).push(_reader.readString());
                    break;
                case 2:
                    _instance.highlight = _reader.readBool();
                    break;
                case 3:
                    _instance.bold = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TableRow.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.columns && _instance.columns.length) {
            _writer.writeRepeatedString(1, _instance.columns);
        }
        if (_instance.highlight) {
            _writer.writeBool(2, _instance.highlight);
        }
        if (_instance.bold) {
            _writer.writeBool(3, _instance.bold);
        }
    }
    get columns() {
        return this._columns;
    }
    set columns(value) {
        this._columns = value;
    }
    get highlight() {
        return this._highlight;
    }
    set highlight(value) {
        this._highlight = value;
    }
    get bold() {
        return this._bold;
    }
    set bold(value) {
        this._bold = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TableRow.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            columns: (this.columns || []).slice(),
            highlight: this.highlight,
            bold: this.bold
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            columns: (this.columns || []).slice(),
            highlight: this.highlight,
            bold: this.bold
        };
    }
}
TableRow.id = 'proto.pub.v1.models.TableRow';
/**
 * Message implementation for proto.pub.v1.models.Table
 */
class Table {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Table to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.rows = (_value.rows || []).map(m => new TableRow(m));
        this.columnWidths = (_value.columnWidths || []).slice();
        Table.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Table();
        Table.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.rows = _instance.rows || [];
        _instance.columnWidths = _instance.columnWidths || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new TableRow();
                    _reader.readMessage(messageInitializer1, TableRow.deserializeBinaryFromReader);
                    (_instance.rows = _instance.rows || []).push(messageInitializer1);
                    break;
                case 2:
                    (_instance.columnWidths = _instance.columnWidths || []).push(...(_reader.readPackedDouble() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        Table.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.rows && _instance.rows.length) {
            _writer.writeRepeatedMessage(1, _instance.rows, TableRow.serializeBinaryToWriter);
        }
        if (_instance.columnWidths && _instance.columnWidths.length) {
            _writer.writePackedDouble(2, _instance.columnWidths);
        }
    }
    get rows() {
        return this._rows;
    }
    set rows(value) {
        this._rows = value;
    }
    get columnWidths() {
        return this._columnWidths;
    }
    set columnWidths(value) {
        this._columnWidths = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Table.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            rows: (this.rows || []).map(m => m.toObject()),
            columnWidths: (this.columnWidths || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            rows: (this.rows || []).map(m => m.toProtobufJSON(options)),
            columnWidths: (this.columnWidths || []).slice()
        };
    }
}
Table.id = 'proto.pub.v1.models.Table';

/**
 * Message implementation for proto.pub.v1.models.Sticker
 */
class Sticker {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Sticker to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.emojis = (_value.emojis || []).slice();
        this.isAnimated = _value.isAnimated;
        this.isVideo = _value.isVideo;
        this.stickerSetId = _value.stickerSetId;
        Sticker.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Sticker();
        Sticker.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.file = _instance.file || undefined;
        _instance.emojis = _instance.emojis || [];
        _instance.isAnimated = _instance.isAnimated || false;
        _instance.isVideo = _instance.isVideo || false;
        _instance.stickerSetId = _instance.stickerSetId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 2:
                    (_instance.emojis = _instance.emojis || []).push(_reader.readString());
                    break;
                case 3:
                    _instance.isAnimated = _reader.readBool();
                    break;
                case 4:
                    _instance.isVideo = _reader.readBool();
                    break;
                case 5:
                    _instance.stickerSetId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Sticker.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.file) {
            _writer.writeMessage(1, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.emojis && _instance.emojis.length) {
            _writer.writeRepeatedString(2, _instance.emojis);
        }
        if (_instance.isAnimated) {
            _writer.writeBool(3, _instance.isAnimated);
        }
        if (_instance.isVideo) {
            _writer.writeBool(4, _instance.isVideo);
        }
        if (_instance.stickerSetId) {
            _writer.writeString(5, _instance.stickerSetId);
        }
    }
    get file() {
        return this._file;
    }
    set file(value) {
        this._file = value;
    }
    get emojis() {
        return this._emojis;
    }
    set emojis(value) {
        this._emojis = value;
    }
    get isAnimated() {
        return this._isAnimated;
    }
    set isAnimated(value) {
        this._isAnimated = value;
    }
    get isVideo() {
        return this._isVideo;
    }
    set isVideo(value) {
        this._isVideo = value;
    }
    get stickerSetId() {
        return this._stickerSetId;
    }
    set stickerSetId(value) {
        this._stickerSetId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Sticker.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            file: this.file ? this.file.toObject() : undefined,
            emojis: (this.emojis || []).slice(),
            isAnimated: this.isAnimated,
            isVideo: this.isVideo,
            stickerSetId: this.stickerSetId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            file: this.file ? this.file.toProtobufJSON(options) : null,
            emojis: (this.emojis || []).slice(),
            isAnimated: this.isAnimated,
            isVideo: this.isVideo,
            stickerSetId: this.stickerSetId
        };
    }
}
Sticker.id = 'proto.pub.v1.models.Sticker';
/**
 * Message implementation for proto.pub.v1.models.StickerSet
 */
class StickerSet {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of StickerSet to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.name = _value.name;
        this.thumbnail = _value.thumbnail
            ? new File(_value.thumbnail)
            : undefined;
        this.stickers = (_value.stickers || []).map(m => new Sticker(m));
        StickerSet.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new StickerSet();
        StickerSet.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.name = _instance.name || '';
        _instance.thumbnail = _instance.thumbnail || undefined;
        _instance.stickers = _instance.stickers || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 4:
                    _instance.thumbnail = new File();
                    _reader.readMessage(_instance.thumbnail, File.deserializeBinaryFromReader);
                    break;
                case 3:
                    const messageInitializer3 = new Sticker();
                    _reader.readMessage(messageInitializer3, Sticker.deserializeBinaryFromReader);
                    (_instance.stickers = _instance.stickers || []).push(messageInitializer3);
                    break;
                default:
                    _reader.skipField();
            }
        }
        StickerSet.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.thumbnail) {
            _writer.writeMessage(4, _instance.thumbnail, File.serializeBinaryToWriter);
        }
        if (_instance.stickers && _instance.stickers.length) {
            _writer.writeRepeatedMessage(3, _instance.stickers, Sticker.serializeBinaryToWriter);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get thumbnail() {
        return this._thumbnail;
    }
    set thumbnail(value) {
        this._thumbnail = value;
    }
    get stickers() {
        return this._stickers;
    }
    set stickers(value) {
        this._stickers = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        StickerSet.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            name: this.name,
            thumbnail: this.thumbnail ? this.thumbnail.toObject() : undefined,
            stickers: (this.stickers || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            name: this.name,
            thumbnail: this.thumbnail ? this.thumbnail.toProtobufJSON(options) : null,
            stickers: (this.stickers || []).map(m => m.toProtobufJSON(options))
        };
    }
}
StickerSet.id = 'proto.pub.v1.models.StickerSet';

var PaymentProviderType;
(function (PaymentProviderType) {
    PaymentProviderType[PaymentProviderType["MONEASY"] = 0] = "MONEASY";
})(PaymentProviderType || (PaymentProviderType = {}));
var AcceptableCurrencies;
(function (AcceptableCurrencies) {
    AcceptableCurrencies[AcceptableCurrencies["IRR"] = 0] = "IRR";
})(AcceptableCurrencies || (AcceptableCurrencies = {}));
var WithdrawStatus;
(function (WithdrawStatus) {
    WithdrawStatus[WithdrawStatus["WITHDRAW_INITIALIZED"] = 0] = "WITHDRAW_INITIALIZED";
    WithdrawStatus[WithdrawStatus["WITHDRAW_PENDING_TO_CONFIRM"] = 1] = "WITHDRAW_PENDING_TO_CONFIRM";
    WithdrawStatus[WithdrawStatus["WITHDRAW_FAILED"] = 2] = "WITHDRAW_FAILED";
    WithdrawStatus[WithdrawStatus["WITHDRAW_REFUNDED"] = 3] = "WITHDRAW_REFUNDED";
    WithdrawStatus[WithdrawStatus["WITHDRAW_DONE"] = 4] = "WITHDRAW_DONE";
    WithdrawStatus[WithdrawStatus["WITHDRAW_UNKNOWN"] = 5] = "WITHDRAW_UNKNOWN";
})(WithdrawStatus || (WithdrawStatus = {}));
var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus[PaymentStatus["PAYMENT_INITIALIZED"] = 0] = "PAYMENT_INITIALIZED";
    PaymentStatus[PaymentStatus["PAYMENT_DONE"] = 1] = "PAYMENT_DONE";
    PaymentStatus[PaymentStatus["PAYMENT_REFUNDED"] = 2] = "PAYMENT_REFUNDED";
    PaymentStatus[PaymentStatus["PAYMENT_REVOKED"] = 3] = "PAYMENT_REVOKED";
})(PaymentStatus || (PaymentStatus = {}));
/**
 * Message implementation for proto.pub.v1.models.Commodity
 */
class Commodity {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Commodity to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.name = _value.name;
        this.price = _value.price;
        this.discountPrice = _value.discountPrice;
        this.count = _value.count;
        Commodity.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Commodity();
        Commodity.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.name = _instance.name || '';
        _instance.price = _instance.price || '0';
        _instance.discountPrice = _instance.discountPrice || '0';
        _instance.count = _instance.count || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    _instance.price = _reader.readInt64String();
                    break;
                case 4:
                    _instance.discountPrice = _reader.readInt64String();
                    break;
                case 5:
                    _instance.count = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Commodity.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.price) {
            _writer.writeInt64String(3, _instance.price);
        }
        if (_instance.discountPrice) {
            _writer.writeInt64String(4, _instance.discountPrice);
        }
        if (_instance.count) {
            _writer.writeInt64String(5, _instance.count);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get price() {
        return this._price;
    }
    set price(value) {
        this._price = value;
    }
    get discountPrice() {
        return this._discountPrice;
    }
    set discountPrice(value) {
        this._discountPrice = value;
    }
    get count() {
        return this._count;
    }
    set count(value) {
        this._count = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Commodity.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            name: this.name,
            price: this.price,
            discountPrice: this.discountPrice,
            count: this.count
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            name: this.name,
            price: this.price,
            discountPrice: this.discountPrice,
            count: this.count
        };
    }
}
Commodity.id = 'proto.pub.v1.models.Commodity';
/**
 * Message implementation for proto.pub.v1.models.Payment
 */
class Payment {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Payment to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentId = _value.paymentId;
        this.amount = _value.amount;
        this.issuer = _value.issuer
            ? new Uid(_value.issuer)
            : undefined;
        this.payer = _value.payer
            ? new Uid(_value.payer)
            : undefined;
        this.description = _value.description;
        this.commodities = (_value.commodities || []).map(m => new Commodity(m));
        this.currency = _value.currency;
        this.paymentProvider = (_value.paymentProvider || []).map(m => new PaymentProvider(m));
        this.createAt = _value.createAt;
        this.expireAt = _value.expireAt;
        Payment.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Payment();
        Payment.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentId = _instance.paymentId || '';
        _instance.amount = _instance.amount || '0';
        _instance.issuer = _instance.issuer || undefined;
        _instance.payer = _instance.payer || undefined;
        _instance.description = _instance.description || '';
        _instance.commodities = _instance.commodities || [];
        _instance.currency = _instance.currency || 0;
        _instance.paymentProvider = _instance.paymentProvider || [];
        _instance.createAt = _instance.createAt || '0';
        _instance.expireAt = _instance.expireAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.paymentId = _reader.readString();
                    break;
                case 2:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.issuer = new Uid();
                    _reader.readMessage(_instance.issuer, Uid.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.payer = new Uid();
                    _reader.readMessage(_instance.payer, Uid.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.description = _reader.readString();
                    break;
                case 6:
                    const messageInitializer6 = new Commodity();
                    _reader.readMessage(messageInitializer6, Commodity.deserializeBinaryFromReader);
                    (_instance.commodities = _instance.commodities || []).push(messageInitializer6);
                    break;
                case 7:
                    _instance.currency = _reader.readEnum();
                    break;
                case 8:
                    const messageInitializer8 = new PaymentProvider();
                    _reader.readMessage(messageInitializer8, PaymentProvider.deserializeBinaryFromReader);
                    (_instance.paymentProvider = _instance.paymentProvider || []).push(messageInitializer8);
                    break;
                case 9:
                    _instance.createAt = _reader.readInt64String();
                    break;
                case 10:
                    _instance.expireAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Payment.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentId) {
            _writer.writeString(1, _instance.paymentId);
        }
        if (_instance.amount) {
            _writer.writeInt64String(2, _instance.amount);
        }
        if (_instance.issuer) {
            _writer.writeMessage(3, _instance.issuer, Uid.serializeBinaryToWriter);
        }
        if (_instance.payer) {
            _writer.writeMessage(4, _instance.payer, Uid.serializeBinaryToWriter);
        }
        if (_instance.description) {
            _writer.writeString(5, _instance.description);
        }
        if (_instance.commodities && _instance.commodities.length) {
            _writer.writeRepeatedMessage(6, _instance.commodities, Commodity.serializeBinaryToWriter);
        }
        if (_instance.currency) {
            _writer.writeEnum(7, _instance.currency);
        }
        if (_instance.paymentProvider && _instance.paymentProvider.length) {
            _writer.writeRepeatedMessage(8, _instance.paymentProvider, PaymentProvider.serializeBinaryToWriter);
        }
        if (_instance.createAt) {
            _writer.writeInt64String(9, _instance.createAt);
        }
        if (_instance.expireAt) {
            _writer.writeInt64String(10, _instance.expireAt);
        }
    }
    get paymentId() {
        return this._paymentId;
    }
    set paymentId(value) {
        this._paymentId = value;
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get issuer() {
        return this._issuer;
    }
    set issuer(value) {
        this._issuer = value;
    }
    get payer() {
        return this._payer;
    }
    set payer(value) {
        this._payer = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get commodities() {
        return this._commodities;
    }
    set commodities(value) {
        this._commodities = value;
    }
    get currency() {
        return this._currency;
    }
    set currency(value) {
        this._currency = value;
    }
    get paymentProvider() {
        return this._paymentProvider;
    }
    set paymentProvider(value) {
        this._paymentProvider = value;
    }
    get createAt() {
        return this._createAt;
    }
    set createAt(value) {
        this._createAt = value;
    }
    get expireAt() {
        return this._expireAt;
    }
    set expireAt(value) {
        this._expireAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Payment.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentId: this.paymentId,
            amount: this.amount,
            issuer: this.issuer ? this.issuer.toObject() : undefined,
            payer: this.payer ? this.payer.toObject() : undefined,
            description: this.description,
            commodities: (this.commodities || []).map(m => m.toObject()),
            currency: this.currency,
            paymentProvider: (this.paymentProvider || []).map(m => m.toObject()),
            createAt: this.createAt,
            expireAt: this.expireAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentId: this.paymentId,
            amount: this.amount,
            issuer: this.issuer ? this.issuer.toProtobufJSON(options) : null,
            payer: this.payer ? this.payer.toProtobufJSON(options) : null,
            description: this.description,
            commodities: (this.commodities || []).map(m => m.toProtobufJSON(options)),
            currency: AcceptableCurrencies[this.currency === null || this.currency === undefined
                ? 0
                : this.currency],
            paymentProvider: (this.paymentProvider || []).map(m => m.toProtobufJSON(options)),
            createAt: this.createAt,
            expireAt: this.expireAt
        };
    }
}
Payment.id = 'proto.pub.v1.models.Payment';
/**
 * Message implementation for proto.pub.v1.models.PaymentProvider
 */
class PaymentProvider {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PaymentProvider to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentProviderType = _value.paymentProviderType;
        this.requiredPaymentIdentityInfo = _value.requiredPaymentIdentityInfo
            ? new RequiredPaymentIdentityInfo(_value.requiredPaymentIdentityInfo)
            : undefined;
        PaymentProvider.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PaymentProvider();
        PaymentProvider.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentProviderType = _instance.paymentProviderType || 0;
        _instance.requiredPaymentIdentityInfo =
            _instance.requiredPaymentIdentityInfo || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.paymentProviderType = _reader.readEnum();
                    break;
                case 2:
                    _instance.requiredPaymentIdentityInfo = new RequiredPaymentIdentityInfo();
                    _reader.readMessage(_instance.requiredPaymentIdentityInfo, RequiredPaymentIdentityInfo.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        PaymentProvider.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentProviderType) {
            _writer.writeEnum(1, _instance.paymentProviderType);
        }
        if (_instance.requiredPaymentIdentityInfo) {
            _writer.writeMessage(2, _instance.requiredPaymentIdentityInfo, RequiredPaymentIdentityInfo.serializeBinaryToWriter);
        }
    }
    get paymentProviderType() {
        return this._paymentProviderType;
    }
    set paymentProviderType(value) {
        this._paymentProviderType = value;
    }
    get requiredPaymentIdentityInfo() {
        return this._requiredPaymentIdentityInfo;
    }
    set requiredPaymentIdentityInfo(value) {
        this._requiredPaymentIdentityInfo = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PaymentProvider.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentProviderType: this.paymentProviderType,
            requiredPaymentIdentityInfo: this.requiredPaymentIdentityInfo
                ? this.requiredPaymentIdentityInfo.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentProviderType: PaymentProviderType[this.paymentProviderType === null ||
                this.paymentProviderType === undefined
                ? 0
                : this.paymentProviderType],
            requiredPaymentIdentityInfo: this.requiredPaymentIdentityInfo
                ? this.requiredPaymentIdentityInfo.toProtobufJSON(options)
                : null
        };
    }
}
PaymentProvider.id = 'proto.pub.v1.models.PaymentProvider';
/**
 * Message implementation for proto.pub.v1.models.RequiredPaymentIdentityInfo
 */
class RequiredPaymentIdentityInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RequiredPaymentIdentityInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isAddressRequired = _value.isAddressRequired;
        this.isPostCodeRequired = _value.isPostCodeRequired;
        this.isNationalCodeRequired = _value.isNationalCodeRequired;
        RequiredPaymentIdentityInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RequiredPaymentIdentityInfo();
        RequiredPaymentIdentityInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isAddressRequired = _instance.isAddressRequired || false;
        _instance.isPostCodeRequired = _instance.isPostCodeRequired || false;
        _instance.isNationalCodeRequired =
            _instance.isNationalCodeRequired || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isAddressRequired = _reader.readBool();
                    break;
                case 2:
                    _instance.isPostCodeRequired = _reader.readBool();
                    break;
                case 3:
                    _instance.isNationalCodeRequired = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RequiredPaymentIdentityInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isAddressRequired) {
            _writer.writeBool(1, _instance.isAddressRequired);
        }
        if (_instance.isPostCodeRequired) {
            _writer.writeBool(2, _instance.isPostCodeRequired);
        }
        if (_instance.isNationalCodeRequired) {
            _writer.writeBool(3, _instance.isNationalCodeRequired);
        }
    }
    get isAddressRequired() {
        return this._isAddressRequired;
    }
    set isAddressRequired(value) {
        this._isAddressRequired = value;
    }
    get isPostCodeRequired() {
        return this._isPostCodeRequired;
    }
    set isPostCodeRequired(value) {
        this._isPostCodeRequired = value;
    }
    get isNationalCodeRequired() {
        return this._isNationalCodeRequired;
    }
    set isNationalCodeRequired(value) {
        this._isNationalCodeRequired = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RequiredPaymentIdentityInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isAddressRequired: this.isAddressRequired,
            isPostCodeRequired: this.isPostCodeRequired,
            isNationalCodeRequired: this.isNationalCodeRequired
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isAddressRequired: this.isAddressRequired,
            isPostCodeRequired: this.isPostCodeRequired,
            isNationalCodeRequired: this.isNationalCodeRequired
        };
    }
}
RequiredPaymentIdentityInfo.id = 'proto.pub.v1.models.RequiredPaymentIdentityInfo';
/**
 * Message implementation for proto.pub.v1.models.PaymentInformation
 */
class PaymentInformation {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PaymentInformation to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentId = _value.paymentId;
        this.guid = _value.guid;
        this.payment = _value.payment ? new Payment(_value.payment) : undefined;
        this.status = _value.status;
        this.transaction = _value.transaction
            ? new Transaction(_value.transaction)
            : undefined;
        this.paymentIdentityInfo = _value.paymentIdentityInfo
            ? new PaymentIdentityInfo(_value.paymentIdentityInfo)
            : undefined;
        PaymentInformation.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PaymentInformation();
        PaymentInformation.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentId = _instance.paymentId || '';
        _instance.guid = _instance.guid || '';
        _instance.payment = _instance.payment || undefined;
        _instance.status = _instance.status || 0;
        _instance.transaction = _instance.transaction || undefined;
        _instance.paymentIdentityInfo = _instance.paymentIdentityInfo || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.paymentId = _reader.readString();
                    break;
                case 2:
                    _instance.guid = _reader.readString();
                    break;
                case 3:
                    _instance.payment = new Payment();
                    _reader.readMessage(_instance.payment, Payment.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.status = _reader.readEnum();
                    break;
                case 5:
                    _instance.transaction = new Transaction();
                    _reader.readMessage(_instance.transaction, Transaction.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.paymentIdentityInfo = new PaymentIdentityInfo();
                    _reader.readMessage(_instance.paymentIdentityInfo, PaymentIdentityInfo.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        PaymentInformation.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentId) {
            _writer.writeString(1, _instance.paymentId);
        }
        if (_instance.guid) {
            _writer.writeString(2, _instance.guid);
        }
        if (_instance.payment) {
            _writer.writeMessage(3, _instance.payment, Payment.serializeBinaryToWriter);
        }
        if (_instance.status) {
            _writer.writeEnum(4, _instance.status);
        }
        if (_instance.transaction) {
            _writer.writeMessage(5, _instance.transaction, Transaction.serializeBinaryToWriter);
        }
        if (_instance.paymentIdentityInfo) {
            _writer.writeMessage(6, _instance.paymentIdentityInfo, PaymentIdentityInfo.serializeBinaryToWriter);
        }
    }
    get paymentId() {
        return this._paymentId;
    }
    set paymentId(value) {
        this._paymentId = value;
    }
    get guid() {
        return this._guid;
    }
    set guid(value) {
        this._guid = value;
    }
    get payment() {
        return this._payment;
    }
    set payment(value) {
        this._payment = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get transaction() {
        return this._transaction;
    }
    set transaction(value) {
        this._transaction = value;
    }
    get paymentIdentityInfo() {
        return this._paymentIdentityInfo;
    }
    set paymentIdentityInfo(value) {
        this._paymentIdentityInfo = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PaymentInformation.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentId: this.paymentId,
            guid: this.guid,
            payment: this.payment ? this.payment.toObject() : undefined,
            status: this.status,
            transaction: this.transaction ? this.transaction.toObject() : undefined,
            paymentIdentityInfo: this.paymentIdentityInfo
                ? this.paymentIdentityInfo.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentId: this.paymentId,
            guid: this.guid,
            payment: this.payment ? this.payment.toProtobufJSON(options) : null,
            status: PaymentStatus[this.status === null || this.status === undefined ? 0 : this.status],
            transaction: this.transaction
                ? this.transaction.toProtobufJSON(options)
                : null,
            paymentIdentityInfo: this.paymentIdentityInfo
                ? this.paymentIdentityInfo.toProtobufJSON(options)
                : null
        };
    }
}
PaymentInformation.id = 'proto.pub.v1.models.PaymentInformation';
/**
 * Message implementation for proto.pub.v1.models.PaymentIdentityInfo
 */
class PaymentIdentityInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PaymentIdentityInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.phoneNumber = _value.phoneNumber;
        this.address = _value.address;
        this.postCode = _value.postCode;
        PaymentIdentityInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PaymentIdentityInfo();
        PaymentIdentityInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.phoneNumber = _instance.phoneNumber || '';
        _instance.address = _instance.address || '';
        _instance.postCode = _instance.postCode || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.phoneNumber = _reader.readString();
                    break;
                case 3:
                    _instance.address = _reader.readString();
                    break;
                case 4:
                    _instance.postCode = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PaymentIdentityInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.phoneNumber) {
            _writer.writeString(2, _instance.phoneNumber);
        }
        if (_instance.address) {
            _writer.writeString(3, _instance.address);
        }
        if (_instance.postCode) {
            _writer.writeString(4, _instance.postCode);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get address() {
        return this._address;
    }
    set address(value) {
        this._address = value;
    }
    get postCode() {
        return this._postCode;
    }
    set postCode(value) {
        this._postCode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PaymentIdentityInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            phoneNumber: this.phoneNumber,
            address: this.address,
            postCode: this.postCode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            phoneNumber: this.phoneNumber,
            address: this.address,
            postCode: this.postCode
        };
    }
}
PaymentIdentityInfo.id = 'proto.pub.v1.models.PaymentIdentityInfo';
/**
 * Message implementation for proto.pub.v1.models.Transaction
 */
class Transaction {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Transaction to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.when = _value.when;
        this.amount = _value.amount;
        this.trxCode = _value.trxCode;
        this.description = _value.description;
        this.balance = _value.balance;
        this.source = _value.source
            ? new Uid(_value.source)
            : undefined;
        this.destination = _value.destination
            ? new Uid(_value.destination)
            : undefined;
        this.guid = _value.guid;
        Transaction.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Transaction();
        Transaction.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.when = _instance.when || '0';
        _instance.amount = _instance.amount || '0';
        _instance.trxCode = _instance.trxCode || '';
        _instance.description = _instance.description || '';
        _instance.balance = _instance.balance || '0';
        _instance.source = _instance.source || undefined;
        _instance.destination = _instance.destination || undefined;
        _instance.guid = _instance.guid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.when = _reader.readInt64String();
                    break;
                case 2:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.trxCode = _reader.readString();
                    break;
                case 4:
                    _instance.description = _reader.readString();
                    break;
                case 5:
                    _instance.balance = _reader.readInt64String();
                    break;
                case 6:
                    _instance.source = new Uid();
                    _reader.readMessage(_instance.source, Uid.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.destination = new Uid();
                    _reader.readMessage(_instance.destination, Uid.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.guid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Transaction.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.when) {
            _writer.writeInt64String(1, _instance.when);
        }
        if (_instance.amount) {
            _writer.writeInt64String(2, _instance.amount);
        }
        if (_instance.trxCode) {
            _writer.writeString(3, _instance.trxCode);
        }
        if (_instance.description) {
            _writer.writeString(4, _instance.description);
        }
        if (_instance.balance) {
            _writer.writeInt64String(5, _instance.balance);
        }
        if (_instance.source) {
            _writer.writeMessage(6, _instance.source, Uid.serializeBinaryToWriter);
        }
        if (_instance.destination) {
            _writer.writeMessage(7, _instance.destination, Uid.serializeBinaryToWriter);
        }
        if (_instance.guid) {
            _writer.writeString(8, _instance.guid);
        }
    }
    get when() {
        return this._when;
    }
    set when(value) {
        this._when = value;
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get trxCode() {
        return this._trxCode;
    }
    set trxCode(value) {
        this._trxCode = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get balance() {
        return this._balance;
    }
    set balance(value) {
        this._balance = value;
    }
    get source() {
        return this._source;
    }
    set source(value) {
        this._source = value;
    }
    get destination() {
        return this._destination;
    }
    set destination(value) {
        this._destination = value;
    }
    get guid() {
        return this._guid;
    }
    set guid(value) {
        this._guid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Transaction.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            when: this.when,
            amount: this.amount,
            trxCode: this.trxCode,
            description: this.description,
            balance: this.balance,
            source: this.source ? this.source.toObject() : undefined,
            destination: this.destination ? this.destination.toObject() : undefined,
            guid: this.guid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            when: this.when,
            amount: this.amount,
            trxCode: this.trxCode,
            description: this.description,
            balance: this.balance,
            source: this.source ? this.source.toProtobufJSON(options) : null,
            destination: this.destination
                ? this.destination.toProtobufJSON(options)
                : null,
            guid: this.guid
        };
    }
}
Transaction.id = 'proto.pub.v1.models.Transaction';
/**
 * Message implementation for proto.pub.v1.models.Withdraw
 */
class Withdraw {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Withdraw to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.guid = _value.guid;
        this.amount = _value.amount;
        this.destinationName = _value.destinationName;
        this.createAt = _value.createAt;
        this.doneAt = _value.doneAt;
        this.description = _value.description;
        this.status = _value.status;
        this.amountWithoutTariff = _value.amountWithoutTariff;
        this.accountId = _value.accountId;
        this.bankReference = _value.bankReference;
        this.bankFullMessage = _value.bankFullMessage;
        this.destinationPaymentId = _value.destinationPaymentId;
        Withdraw.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Withdraw();
        Withdraw.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.guid = _instance.guid || '';
        _instance.amount = _instance.amount || '0';
        _instance.destinationName = _instance.destinationName || '';
        _instance.createAt = _instance.createAt || '0';
        _instance.doneAt = _instance.doneAt || '0';
        _instance.description = _instance.description || '';
        _instance.status = _instance.status || 0;
        _instance.amountWithoutTariff = _instance.amountWithoutTariff || '0';
        _instance.accountId = _instance.accountId || '';
        _instance.bankReference = _instance.bankReference || '';
        _instance.bankFullMessage = _instance.bankFullMessage || '';
        _instance.destinationPaymentId = _instance.destinationPaymentId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.guid = _reader.readString();
                    break;
                case 2:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.destinationName = _reader.readString();
                    break;
                case 4:
                    _instance.createAt = _reader.readInt64String();
                    break;
                case 5:
                    _instance.doneAt = _reader.readInt64String();
                    break;
                case 6:
                    _instance.description = _reader.readString();
                    break;
                case 7:
                    _instance.status = _reader.readEnum();
                    break;
                case 8:
                    _instance.amountWithoutTariff = _reader.readInt64String();
                    break;
                case 9:
                    _instance.accountId = _reader.readString();
                    break;
                case 10:
                    _instance.bankReference = _reader.readString();
                    break;
                case 11:
                    _instance.bankFullMessage = _reader.readString();
                    break;
                case 12:
                    _instance.destinationPaymentId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Withdraw.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.guid) {
            _writer.writeString(1, _instance.guid);
        }
        if (_instance.amount) {
            _writer.writeInt64String(2, _instance.amount);
        }
        if (_instance.destinationName) {
            _writer.writeString(3, _instance.destinationName);
        }
        if (_instance.createAt) {
            _writer.writeInt64String(4, _instance.createAt);
        }
        if (_instance.doneAt) {
            _writer.writeInt64String(5, _instance.doneAt);
        }
        if (_instance.description) {
            _writer.writeString(6, _instance.description);
        }
        if (_instance.status) {
            _writer.writeEnum(7, _instance.status);
        }
        if (_instance.amountWithoutTariff) {
            _writer.writeInt64String(8, _instance.amountWithoutTariff);
        }
        if (_instance.accountId) {
            _writer.writeString(9, _instance.accountId);
        }
        if (_instance.bankReference) {
            _writer.writeString(10, _instance.bankReference);
        }
        if (_instance.bankFullMessage) {
            _writer.writeString(11, _instance.bankFullMessage);
        }
        if (_instance.destinationPaymentId) {
            _writer.writeString(12, _instance.destinationPaymentId);
        }
    }
    get guid() {
        return this._guid;
    }
    set guid(value) {
        this._guid = value;
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get destinationName() {
        return this._destinationName;
    }
    set destinationName(value) {
        this._destinationName = value;
    }
    get createAt() {
        return this._createAt;
    }
    set createAt(value) {
        this._createAt = value;
    }
    get doneAt() {
        return this._doneAt;
    }
    set doneAt(value) {
        this._doneAt = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get amountWithoutTariff() {
        return this._amountWithoutTariff;
    }
    set amountWithoutTariff(value) {
        this._amountWithoutTariff = value;
    }
    get accountId() {
        return this._accountId;
    }
    set accountId(value) {
        this._accountId = value;
    }
    get bankReference() {
        return this._bankReference;
    }
    set bankReference(value) {
        this._bankReference = value;
    }
    get bankFullMessage() {
        return this._bankFullMessage;
    }
    set bankFullMessage(value) {
        this._bankFullMessage = value;
    }
    get destinationPaymentId() {
        return this._destinationPaymentId;
    }
    set destinationPaymentId(value) {
        this._destinationPaymentId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Withdraw.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            guid: this.guid,
            amount: this.amount,
            destinationName: this.destinationName,
            createAt: this.createAt,
            doneAt: this.doneAt,
            description: this.description,
            status: this.status,
            amountWithoutTariff: this.amountWithoutTariff,
            accountId: this.accountId,
            bankReference: this.bankReference,
            bankFullMessage: this.bankFullMessage,
            destinationPaymentId: this.destinationPaymentId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            guid: this.guid,
            amount: this.amount,
            destinationName: this.destinationName,
            createAt: this.createAt,
            doneAt: this.doneAt,
            description: this.description,
            status: WithdrawStatus[this.status === null || this.status === undefined ? 0 : this.status],
            amountWithoutTariff: this.amountWithoutTariff,
            accountId: this.accountId,
            bankReference: this.bankReference,
            bankFullMessage: this.bankFullMessage,
            destinationPaymentId: this.destinationPaymentId
        };
    }
}
Withdraw.id = 'proto.pub.v1.models.Withdraw';

/**
 * Message implementation for proto.pub.v1.models.PersistentEvent
 */
class PersistentEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PersistentEvent to deeply clone from
     */
    constructor(_value) {
        this._type = PersistentEvent.TypeCase.none;
        _value = _value || {};
        this.mucSpecificPersistentEvent = _value.mucSpecificPersistentEvent
            ? new MucSpecificPersistentEvent(_value.mucSpecificPersistentEvent)
            : undefined;
        this.messageManipulationPersistentEvent = _value.messageManipulationPersistentEvent
            ? new MessageManipulationPersistentEvent(_value.messageManipulationPersistentEvent)
            : undefined;
        this.adminSpecificPersistentEvent = _value.adminSpecificPersistentEvent
            ? new AdminSpecificPersistentEvent(_value.adminSpecificPersistentEvent)
            : undefined;
        this.botSpecificPersistentEvent = _value.botSpecificPersistentEvent
            ? new BotSpecificPersistentEvent(_value.botSpecificPersistentEvent)
            : undefined;
        PersistentEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PersistentEvent();
        PersistentEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.mucSpecificPersistentEvent = new MucSpecificPersistentEvent();
                    _reader.readMessage(_instance.mucSpecificPersistentEvent, MucSpecificPersistentEvent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageManipulationPersistentEvent = new MessageManipulationPersistentEvent();
                    _reader.readMessage(_instance.messageManipulationPersistentEvent, MessageManipulationPersistentEvent.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.adminSpecificPersistentEvent = new AdminSpecificPersistentEvent();
                    _reader.readMessage(_instance.adminSpecificPersistentEvent, AdminSpecificPersistentEvent.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.botSpecificPersistentEvent = new BotSpecificPersistentEvent();
                    _reader.readMessage(_instance.botSpecificPersistentEvent, BotSpecificPersistentEvent.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        PersistentEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.mucSpecificPersistentEvent) {
            _writer.writeMessage(1, _instance.mucSpecificPersistentEvent, MucSpecificPersistentEvent.serializeBinaryToWriter);
        }
        if (_instance.messageManipulationPersistentEvent) {
            _writer.writeMessage(2, _instance.messageManipulationPersistentEvent, MessageManipulationPersistentEvent.serializeBinaryToWriter);
        }
        if (_instance.adminSpecificPersistentEvent) {
            _writer.writeMessage(3, _instance.adminSpecificPersistentEvent, AdminSpecificPersistentEvent.serializeBinaryToWriter);
        }
        if (_instance.botSpecificPersistentEvent) {
            _writer.writeMessage(4, _instance.botSpecificPersistentEvent, BotSpecificPersistentEvent.serializeBinaryToWriter);
        }
    }
    get mucSpecificPersistentEvent() {
        return this._mucSpecificPersistentEvent;
    }
    set mucSpecificPersistentEvent(value) {
        if (value !== undefined && value !== null) {
            this._messageManipulationPersistentEvent = this._adminSpecificPersistentEvent = this._botSpecificPersistentEvent = undefined;
            this._type = PersistentEvent.TypeCase.mucSpecificPersistentEvent;
        }
        this._mucSpecificPersistentEvent = value;
    }
    get messageManipulationPersistentEvent() {
        return this._messageManipulationPersistentEvent;
    }
    set messageManipulationPersistentEvent(value) {
        if (value !== undefined && value !== null) {
            this._mucSpecificPersistentEvent = this._adminSpecificPersistentEvent = this._botSpecificPersistentEvent = undefined;
            this._type = PersistentEvent.TypeCase.messageManipulationPersistentEvent;
        }
        this._messageManipulationPersistentEvent = value;
    }
    get adminSpecificPersistentEvent() {
        return this._adminSpecificPersistentEvent;
    }
    set adminSpecificPersistentEvent(value) {
        if (value !== undefined && value !== null) {
            this._mucSpecificPersistentEvent = this._messageManipulationPersistentEvent = this._botSpecificPersistentEvent = undefined;
            this._type = PersistentEvent.TypeCase.adminSpecificPersistentEvent;
        }
        this._adminSpecificPersistentEvent = value;
    }
    get botSpecificPersistentEvent() {
        return this._botSpecificPersistentEvent;
    }
    set botSpecificPersistentEvent(value) {
        if (value !== undefined && value !== null) {
            this._mucSpecificPersistentEvent = this._messageManipulationPersistentEvent = this._adminSpecificPersistentEvent = undefined;
            this._type = PersistentEvent.TypeCase.botSpecificPersistentEvent;
        }
        this._botSpecificPersistentEvent = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PersistentEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            mucSpecificPersistentEvent: this.mucSpecificPersistentEvent
                ? this.mucSpecificPersistentEvent.toObject()
                : undefined,
            messageManipulationPersistentEvent: this
                .messageManipulationPersistentEvent
                ? this.messageManipulationPersistentEvent.toObject()
                : undefined,
            adminSpecificPersistentEvent: this.adminSpecificPersistentEvent
                ? this.adminSpecificPersistentEvent.toObject()
                : undefined,
            botSpecificPersistentEvent: this.botSpecificPersistentEvent
                ? this.botSpecificPersistentEvent.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            mucSpecificPersistentEvent: this.mucSpecificPersistentEvent
                ? this.mucSpecificPersistentEvent.toProtobufJSON(options)
                : null,
            messageManipulationPersistentEvent: this
                .messageManipulationPersistentEvent
                ? this.messageManipulationPersistentEvent.toProtobufJSON(options)
                : null,
            adminSpecificPersistentEvent: this.adminSpecificPersistentEvent
                ? this.adminSpecificPersistentEvent.toProtobufJSON(options)
                : null,
            botSpecificPersistentEvent: this.botSpecificPersistentEvent
                ? this.botSpecificPersistentEvent.toProtobufJSON(options)
                : null
        };
    }
}
PersistentEvent.id = 'proto.pub.v1.models.PersistentEvent';
(function (PersistentEvent) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["mucSpecificPersistentEvent"] = 1] = "mucSpecificPersistentEvent";
        TypeCase[TypeCase["messageManipulationPersistentEvent"] = 2] = "messageManipulationPersistentEvent";
        TypeCase[TypeCase["adminSpecificPersistentEvent"] = 3] = "adminSpecificPersistentEvent";
        TypeCase[TypeCase["botSpecificPersistentEvent"] = 4] = "botSpecificPersistentEvent";
    })(TypeCase = PersistentEvent.TypeCase || (PersistentEvent.TypeCase = {}));
})(PersistentEvent || (PersistentEvent = {}));
/**
 * Message implementation for proto.pub.v1.models.MucSpecificPersistentEvent
 */
class MucSpecificPersistentEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MucSpecificPersistentEvent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.issuer = _value.issuer
            ? new Uid(_value.issuer)
            : undefined;
        this.issue = _value.issue;
        this.assignee = _value.assignee
            ? new Uid(_value.assignee)
            : undefined;
        this.messageId = _value.messageId;
        this.avatar = _value.avatar
            ? new Avatar(_value.avatar)
            : undefined;
        this.name = _value.name;
        MucSpecificPersistentEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MucSpecificPersistentEvent();
        MucSpecificPersistentEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.issuer = _instance.issuer || undefined;
        _instance.issue = _instance.issue || 0;
        _instance.assignee = _instance.assignee || undefined;
        _instance.messageId = _instance.messageId || '0';
        _instance.avatar = _instance.avatar || undefined;
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.issuer = new Uid();
                    _reader.readMessage(_instance.issuer, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.issue = _reader.readEnum();
                    break;
                case 3:
                    _instance.assignee = new Uid();
                    _reader.readMessage(_instance.assignee, Uid.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 5:
                    _instance.avatar = new Avatar();
                    _reader.readMessage(_instance.avatar, Avatar.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        MucSpecificPersistentEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.issuer) {
            _writer.writeMessage(1, _instance.issuer, Uid.serializeBinaryToWriter);
        }
        if (_instance.issue) {
            _writer.writeEnum(2, _instance.issue);
        }
        if (_instance.assignee) {
            _writer.writeMessage(3, _instance.assignee, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(4, _instance.messageId);
        }
        if (_instance.avatar) {
            _writer.writeMessage(5, _instance.avatar, Avatar.serializeBinaryToWriter);
        }
        if (_instance.name) {
            _writer.writeString(6, _instance.name);
        }
    }
    get issuer() {
        return this._issuer;
    }
    set issuer(value) {
        this._issuer = value;
    }
    get issue() {
        return this._issue;
    }
    set issue(value) {
        this._issue = value;
    }
    get assignee() {
        return this._assignee;
    }
    set assignee(value) {
        this._assignee = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MucSpecificPersistentEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            issuer: this.issuer ? this.issuer.toObject() : undefined,
            issue: this.issue,
            assignee: this.assignee ? this.assignee.toObject() : undefined,
            messageId: this.messageId,
            avatar: this.avatar ? this.avatar.toObject() : undefined,
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            issuer: this.issuer ? this.issuer.toProtobufJSON(options) : null,
            issue: MucSpecificPersistentEvent.Issue[this.issue === null || this.issue === undefined ? 0 : this.issue],
            assignee: this.assignee ? this.assignee.toProtobufJSON(options) : null,
            messageId: this.messageId,
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null,
            name: this.name
        };
    }
}
MucSpecificPersistentEvent.id = 'proto.pub.v1.models.MucSpecificPersistentEvent';
(function (MucSpecificPersistentEvent) {
    let Issue;
    (function (Issue) {
        Issue[Issue["KICK_USER"] = 0] = "KICK_USER";
        Issue[Issue["ADD_USER"] = 1] = "ADD_USER";
        Issue[Issue["PIN_MESSAGE"] = 2] = "PIN_MESSAGE";
        Issue[Issue["NAME_CHANGED"] = 3] = "NAME_CHANGED";
        Issue[Issue["AVATAR_CHANGED"] = 4] = "AVATAR_CHANGED";
        Issue[Issue["MUC_CREATED"] = 5] = "MUC_CREATED";
        Issue[Issue["LEAVE_USER"] = 6] = "LEAVE_USER";
        Issue[Issue["JOINED_USER"] = 7] = "JOINED_USER";
        Issue[Issue["DELETED"] = 8] = "DELETED";
    })(Issue = MucSpecificPersistentEvent.Issue || (MucSpecificPersistentEvent.Issue = {}));
})(MucSpecificPersistentEvent || (MucSpecificPersistentEvent = {}));
/**
 * Message implementation for proto.pub.v1.models.MessageManipulationPersistentEvent
 */
class MessageManipulationPersistentEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageManipulationPersistentEvent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.action = _value.action;
        this.messageId = _value.messageId;
        this.manipulationTime = _value.manipulationTime;
        MessageManipulationPersistentEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageManipulationPersistentEvent();
        MessageManipulationPersistentEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.action = _instance.action || 0;
        _instance.messageId = _instance.messageId || '0';
        _instance.manipulationTime = _instance.manipulationTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.action = _reader.readEnum();
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.manipulationTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageManipulationPersistentEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.action) {
            _writer.writeEnum(1, _instance.action);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
        if (_instance.manipulationTime) {
            _writer.writeInt64String(3, _instance.manipulationTime);
        }
    }
    get action() {
        return this._action;
    }
    set action(value) {
        this._action = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get manipulationTime() {
        return this._manipulationTime;
    }
    set manipulationTime(value) {
        this._manipulationTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageManipulationPersistentEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            action: this.action,
            messageId: this.messageId,
            manipulationTime: this.manipulationTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            action: MessageManipulationPersistentEvent.Action[this.action === null || this.action === undefined ? 0 : this.action],
            messageId: this.messageId,
            manipulationTime: this.manipulationTime
        };
    }
}
MessageManipulationPersistentEvent.id = 'proto.pub.v1.models.MessageManipulationPersistentEvent';
(function (MessageManipulationPersistentEvent) {
    let Action;
    (function (Action) {
        Action[Action["EDITED"] = 0] = "EDITED";
        Action[Action["DELETED"] = 1] = "DELETED";
    })(Action = MessageManipulationPersistentEvent.Action || (MessageManipulationPersistentEvent.Action = {}));
})(MessageManipulationPersistentEvent || (MessageManipulationPersistentEvent = {}));
/**
 * Message implementation for proto.pub.v1.models.AdminSpecificPersistentEvent
 */
class AdminSpecificPersistentEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AdminSpecificPersistentEvent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.event = _value.event;
        AdminSpecificPersistentEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AdminSpecificPersistentEvent();
        AdminSpecificPersistentEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.event = _instance.event || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.event = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        AdminSpecificPersistentEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.event) {
            _writer.writeEnum(1, _instance.event);
        }
    }
    get event() {
        return this._event;
    }
    set event(value) {
        this._event = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AdminSpecificPersistentEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            event: this.event
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            event: AdminSpecificPersistentEvent.Event[this.event === null || this.event === undefined ? 0 : this.event]
        };
    }
}
AdminSpecificPersistentEvent.id = 'proto.pub.v1.models.AdminSpecificPersistentEvent';
(function (AdminSpecificPersistentEvent) {
    let Event;
    (function (Event) {
        Event[Event["NEW_CONTACT_ADDED"] = 0] = "NEW_CONTACT_ADDED";
    })(Event = AdminSpecificPersistentEvent.Event || (AdminSpecificPersistentEvent.Event = {}));
})(AdminSpecificPersistentEvent || (AdminSpecificPersistentEvent = {}));
/**
 * Message implementation for proto.pub.v1.models.BotSpecificPersistentEvent
 */
class BotSpecificPersistentEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BotSpecificPersistentEvent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.event = _value.event;
        this.messageId = _value.messageId;
        this.errorMessage = _value.errorMessage;
        BotSpecificPersistentEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BotSpecificPersistentEvent();
        BotSpecificPersistentEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.event = _instance.event || 0;
        _instance.messageId = _instance.messageId || '0';
        _instance.errorMessage = _instance.errorMessage || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.event = _reader.readEnum();
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.errorMessage = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BotSpecificPersistentEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.event) {
            _writer.writeEnum(1, _instance.event);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
        if (_instance.errorMessage) {
            _writer.writeString(3, _instance.errorMessage);
        }
    }
    get event() {
        return this._event;
    }
    set event(value) {
        this._event = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get errorMessage() {
        return this._errorMessage;
    }
    set errorMessage(value) {
        this._errorMessage = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BotSpecificPersistentEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            event: this.event,
            messageId: this.messageId,
            errorMessage: this.errorMessage
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            event: BotSpecificPersistentEvent.BotEvent[this.event === null || this.event === undefined ? 0 : this.event],
            messageId: this.messageId,
            errorMessage: this.errorMessage
        };
    }
}
BotSpecificPersistentEvent.id = 'proto.pub.v1.models.BotSpecificPersistentEvent';
(function (BotSpecificPersistentEvent) {
    let BotEvent;
    (function (BotEvent) {
        BotEvent[BotEvent["BOT_NOT_RESPONDING"] = 0] = "BOT_NOT_RESPONDING";
    })(BotEvent = BotSpecificPersistentEvent.BotEvent || (BotSpecificPersistentEvent.BotEvent = {}));
})(BotSpecificPersistentEvent || (BotSpecificPersistentEvent = {}));

var PrivateDataType;
(function (PrivateDataType) {
    PrivateDataType[PrivateDataType["PHONE_NUMBER"] = 0] = "PHONE_NUMBER";
    PrivateDataType[PrivateDataType["USERNAME"] = 1] = "USERNAME";
    PrivateDataType[PrivateDataType["EMAIL"] = 2] = "EMAIL";
    PrivateDataType[PrivateDataType["NAME"] = 3] = "NAME";
    PrivateDataType[PrivateDataType["LOCATION"] = 4] = "LOCATION";
    PrivateDataType[PrivateDataType["FILE"] = 5] = "FILE";
})(PrivateDataType || (PrivateDataType = {}));
/**
 * Message implementation for proto.pub.v1.models.SharePrivateDataRequest
 */
class SharePrivateDataRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SharePrivateDataRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.data = _value.data;
        this.fileMemeTypeFilters = (_value.fileMemeTypeFilters || []).map(m => new MemeType(m));
        this.token = _value.token;
        this.description = _value.description;
        SharePrivateDataRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SharePrivateDataRequest();
        SharePrivateDataRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.data = _instance.data || 0;
        _instance.fileMemeTypeFilters = _instance.fileMemeTypeFilters || [];
        _instance.token = _instance.token || '';
        _instance.description = _instance.description || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.data = _reader.readEnum();
                    break;
                case 4:
                    const messageInitializer4 = new MemeType();
                    _reader.readMessage(messageInitializer4, MemeType.deserializeBinaryFromReader);
                    (_instance.fileMemeTypeFilters =
                        _instance.fileMemeTypeFilters || []).push(messageInitializer4);
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                case 3:
                    _instance.description = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SharePrivateDataRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.data) {
            _writer.writeEnum(1, _instance.data);
        }
        if (_instance.fileMemeTypeFilters && _instance.fileMemeTypeFilters.length) {
            _writer.writeRepeatedMessage(4, _instance.fileMemeTypeFilters, MemeType.serializeBinaryToWriter);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
        if (_instance.description) {
            _writer.writeString(3, _instance.description);
        }
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    get fileMemeTypeFilters() {
        return this._fileMemeTypeFilters;
    }
    set fileMemeTypeFilters(value) {
        this._fileMemeTypeFilters = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SharePrivateDataRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            data: this.data,
            fileMemeTypeFilters: (this.fileMemeTypeFilters || []).map(m => m.toObject()),
            token: this.token,
            description: this.description
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            data: PrivateDataType[this.data === null || this.data === undefined ? 0 : this.data],
            fileMemeTypeFilters: (this.fileMemeTypeFilters || []).map(m => m.toProtobufJSON(options)),
            token: this.token,
            description: this.description
        };
    }
}
SharePrivateDataRequest.id = 'proto.pub.v1.models.SharePrivateDataRequest';
/**
 * Message implementation for proto.pub.v1.models.SharePrivateDataAcceptance
 */
class SharePrivateDataAcceptance {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SharePrivateDataAcceptance to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.data = _value.data;
        this.token = _value.token;
        SharePrivateDataAcceptance.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SharePrivateDataAcceptance();
        SharePrivateDataAcceptance.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.data = _instance.data || 0;
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.data = _reader.readEnum();
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SharePrivateDataAcceptance.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.data) {
            _writer.writeEnum(1, _instance.data);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SharePrivateDataAcceptance.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            data: this.data,
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            data: PrivateDataType[this.data === null || this.data === undefined ? 0 : this.data],
            token: this.token
        };
    }
}
SharePrivateDataAcceptance.id = 'proto.pub.v1.models.SharePrivateDataAcceptance';
/**
 * Message implementation for proto.pub.v1.models.SharePrivateDataAcceptanceData
 */
class SharePrivateDataAcceptanceData {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SharePrivateDataAcceptanceData to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.typeOfData = _value.typeOfData;
        this.token = _value.token;
        this.data = _value.data;
        this.time = _value.time;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.messageId = _value.messageId;
        SharePrivateDataAcceptanceData.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SharePrivateDataAcceptanceData();
        SharePrivateDataAcceptanceData.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.typeOfData = _instance.typeOfData || 0;
        _instance.token = _instance.token || '';
        _instance.data = _instance.data || '';
        _instance.time = _instance.time || '0';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.typeOfData = _reader.readEnum();
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                case 3:
                    _instance.data = _reader.readString();
                    break;
                case 4:
                    _instance.time = _reader.readInt64String();
                    break;
                case 5:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SharePrivateDataAcceptanceData.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.typeOfData) {
            _writer.writeEnum(1, _instance.typeOfData);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
        if (_instance.data) {
            _writer.writeString(3, _instance.data);
        }
        if (_instance.time) {
            _writer.writeInt64String(4, _instance.time);
        }
        if (_instance.from) {
            _writer.writeMessage(5, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(6, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(7, _instance.messageId);
        }
    }
    get typeOfData() {
        return this._typeOfData;
    }
    set typeOfData(value) {
        this._typeOfData = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SharePrivateDataAcceptanceData.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            typeOfData: this.typeOfData,
            token: this.token,
            data: this.data,
            time: this.time,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            typeOfData: PrivateDataType[this.typeOfData === null || this.typeOfData === undefined
                ? 0
                : this.typeOfData],
            token: this.token,
            data: this.data,
            time: this.time,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
SharePrivateDataAcceptanceData.id = 'proto.pub.v1.models.SharePrivateDataAcceptanceData';

/**
 * Message implementation for proto.pub.v1.models.Poll
 */
class Poll {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Poll to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.title = _value.title;
        this.options = (_value.options || []).slice();
        this.allowMultipleAnswers = _value.allowMultipleAnswers;
        this.isAnonymous = _value.isAnonymous;
        this.isQuiz = _value.isQuiz;
        this.correctAnswer = _value.correctAnswer;
        this.expireTime = _value.expireTime;
        Poll.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Poll();
        Poll.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.title = _instance.title || '';
        _instance.options = _instance.options || [];
        _instance.allowMultipleAnswers = _instance.allowMultipleAnswers || false;
        _instance.isAnonymous = _instance.isAnonymous || false;
        _instance.isQuiz = _instance.isQuiz || false;
        _instance.correctAnswer = _instance.correctAnswer || 0;
        _instance.expireTime = _instance.expireTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.title = _reader.readString();
                    break;
                case 3:
                    (_instance.options = _instance.options || []).push(_reader.readString());
                    break;
                case 6:
                    _instance.allowMultipleAnswers = _reader.readBool();
                    break;
                case 7:
                    _instance.isAnonymous = _reader.readBool();
                    break;
                case 4:
                    _instance.isQuiz = _reader.readBool();
                    break;
                case 5:
                    _instance.correctAnswer = _reader.readInt32();
                    break;
                case 8:
                    _instance.expireTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Poll.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.title) {
            _writer.writeString(2, _instance.title);
        }
        if (_instance.options && _instance.options.length) {
            _writer.writeRepeatedString(3, _instance.options);
        }
        if (_instance.allowMultipleAnswers) {
            _writer.writeBool(6, _instance.allowMultipleAnswers);
        }
        if (_instance.isAnonymous) {
            _writer.writeBool(7, _instance.isAnonymous);
        }
        if (_instance.isQuiz) {
            _writer.writeBool(4, _instance.isQuiz);
        }
        if (_instance.correctAnswer) {
            _writer.writeInt32(5, _instance.correctAnswer);
        }
        if (_instance.expireTime) {
            _writer.writeInt64String(8, _instance.expireTime);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get title() {
        return this._title;
    }
    set title(value) {
        this._title = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    get allowMultipleAnswers() {
        return this._allowMultipleAnswers;
    }
    set allowMultipleAnswers(value) {
        this._allowMultipleAnswers = value;
    }
    get isAnonymous() {
        return this._isAnonymous;
    }
    set isAnonymous(value) {
        this._isAnonymous = value;
    }
    get isQuiz() {
        return this._isQuiz;
    }
    set isQuiz(value) {
        this._isQuiz = value;
    }
    get correctAnswer() {
        return this._correctAnswer;
    }
    set correctAnswer(value) {
        this._correctAnswer = value;
    }
    get expireTime() {
        return this._expireTime;
    }
    set expireTime(value) {
        this._expireTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Poll.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            title: this.title,
            options: (this.options || []).slice(),
            allowMultipleAnswers: this.allowMultipleAnswers,
            isAnonymous: this.isAnonymous,
            isQuiz: this.isQuiz,
            correctAnswer: this.correctAnswer,
            expireTime: this.expireTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            title: this.title,
            options: (this.options || []).slice(),
            allowMultipleAnswers: this.allowMultipleAnswers,
            isAnonymous: this.isAnonymous,
            isQuiz: this.isQuiz,
            correctAnswer: this.correctAnswer,
            expireTime: this.expireTime
        };
    }
}
Poll.id = 'proto.pub.v1.models.Poll';

var Role;
(function (Role) {
    Role[Role["NONE"] = 0] = "NONE";
    Role[Role["MEMBER"] = 1] = "MEMBER";
    Role[Role["ADMIN"] = 2] = "ADMIN";
    Role[Role["OWNER"] = 3] = "OWNER";
})(Role || (Role = {}));
/**
 * Message implementation for proto.pub.v1.models.Member
 */
class Member {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Member to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.role = _value.role;
        Member.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Member();
        Member.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.role = _instance.role || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.role = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Member.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.role) {
            _writer.writeEnum(2, _instance.role);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get role() {
        return this._role;
    }
    set role(value) {
        this._role = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Member.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            role: this.role
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            role: Role[this.role === null || this.role === undefined ? 0 : this.role]
        };
    }
}
Member.id = 'proto.pub.v1.models.Member';
/**
 * Message implementation for proto.pub.v1.models.Ban
 */
class Ban {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Ban to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.banned = _value.banned
            ? new Uid(_value.banned)
            : undefined;
        this.banner = _value.banner
            ? new Uid(_value.banner)
            : undefined;
        this.bannedFrom = _value.bannedFrom
            ? new Uid(_value.bannedFrom)
            : undefined;
        Ban.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Ban();
        Ban.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.banned = _instance.banned || undefined;
        _instance.banner = _instance.banner || undefined;
        _instance.bannedFrom = _instance.bannedFrom || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.banned = new Uid();
                    _reader.readMessage(_instance.banned, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.banner = new Uid();
                    _reader.readMessage(_instance.banner, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.bannedFrom = new Uid();
                    _reader.readMessage(_instance.bannedFrom, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Ban.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.banned) {
            _writer.writeMessage(1, _instance.banned, Uid.serializeBinaryToWriter);
        }
        if (_instance.banner) {
            _writer.writeMessage(2, _instance.banner, Uid.serializeBinaryToWriter);
        }
        if (_instance.bannedFrom) {
            _writer.writeMessage(3, _instance.bannedFrom, Uid.serializeBinaryToWriter);
        }
    }
    get banned() {
        return this._banned;
    }
    set banned(value) {
        this._banned = value;
    }
    get banner() {
        return this._banner;
    }
    set banner(value) {
        this._banner = value;
    }
    get bannedFrom() {
        return this._bannedFrom;
    }
    set bannedFrom(value) {
        this._bannedFrom = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Ban.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            banned: this.banned ? this.banned.toObject() : undefined,
            banner: this.banner ? this.banner.toObject() : undefined,
            bannedFrom: this.bannedFrom ? this.bannedFrom.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            banned: this.banned ? this.banned.toProtobufJSON(options) : null,
            banner: this.banner ? this.banner.toProtobufJSON(options) : null,
            bannedFrom: this.bannedFrom
                ? this.bannedFrom.toProtobufJSON(options)
                : null
        };
    }
}
Ban.id = 'proto.pub.v1.models.Ban';

/**
 * Message implementation for proto.pub.v1.models.CallEvent
 */
class CallEvent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallEvent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.callId = _value.callId;
        this.callStatus = _value.callStatus;
        this.callType = _value.callType;
        this.callDuration = _value.callDuration;
        CallEvent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallEvent();
        CallEvent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.callId = _instance.callId || '';
        _instance.callStatus = _instance.callStatus || 0;
        _instance.callType = _instance.callType || 0;
        _instance.callDuration = _instance.callDuration || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.callId = _reader.readString();
                    break;
                case 2:
                    _instance.callStatus = _reader.readEnum();
                    break;
                case 5:
                    _instance.callType = _reader.readEnum();
                    break;
                case 4:
                    _instance.callDuration = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallEvent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.callId) {
            _writer.writeString(1, _instance.callId);
        }
        if (_instance.callStatus) {
            _writer.writeEnum(2, _instance.callStatus);
        }
        if (_instance.callType) {
            _writer.writeEnum(5, _instance.callType);
        }
        if (_instance.callDuration) {
            _writer.writeInt64String(4, _instance.callDuration);
        }
    }
    get callId() {
        return this._callId;
    }
    set callId(value) {
        this._callId = value;
    }
    get callStatus() {
        return this._callStatus;
    }
    set callStatus(value) {
        this._callStatus = value;
    }
    get callType() {
        return this._callType;
    }
    set callType(value) {
        this._callType = value;
    }
    get callDuration() {
        return this._callDuration;
    }
    set callDuration(value) {
        this._callDuration = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallEvent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            callId: this.callId,
            callStatus: this.callStatus,
            callType: this.callType,
            callDuration: this.callDuration
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            callId: this.callId,
            callStatus: CallEvent.CallStatus[this.callStatus === null || this.callStatus === undefined
                ? 0
                : this.callStatus],
            callType: CallEvent.CallType[this.callType === null || this.callType === undefined
                ? 0
                : this.callType],
            callDuration: this.callDuration
        };
    }
}
CallEvent.id = 'proto.pub.v1.models.CallEvent';
(function (CallEvent) {
    let CallStatus;
    (function (CallStatus) {
        CallStatus[CallStatus["CREATED"] = 0] = "CREATED";
        CallStatus[CallStatus["IS_RINGING"] = 1] = "IS_RINGING";
        CallStatus[CallStatus["DECLINED"] = 2] = "DECLINED";
        CallStatus[CallStatus["BUSY"] = 3] = "BUSY";
        CallStatus[CallStatus["ENDED"] = 4] = "ENDED";
    })(CallStatus = CallEvent.CallStatus || (CallEvent.CallStatus = {}));
    let CallType;
    (function (CallType) {
        CallType[CallType["VIDEO"] = 0] = "VIDEO";
        CallType[CallType["AUDIO"] = 1] = "AUDIO";
        CallType[CallType["GROUP_VIDEO"] = 2] = "GROUP_VIDEO";
        CallType[CallType["GROUP_AUDIO"] = 3] = "GROUP_AUDIO";
    })(CallType = CallEvent.CallType || (CallEvent.CallType = {}));
})(CallEvent || (CallEvent = {}));
/**
 * Message implementation for proto.pub.v1.models.CallOffer
 */
class CallOffer {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallOffer to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.id = _value.id;
        this.body = _value.body;
        this.candidates = _value.candidates;
        CallOffer.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallOffer();
        CallOffer.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.id = _instance.id || '';
        _instance.body = _instance.body || '';
        _instance.candidates = _instance.candidates || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.id = _reader.readString();
                    break;
                case 4:
                    _instance.body = _reader.readString();
                    break;
                case 5:
                    _instance.candidates = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallOffer.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.from) {
            _writer.writeMessage(1, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.id) {
            _writer.writeString(3, _instance.id);
        }
        if (_instance.body) {
            _writer.writeString(4, _instance.body);
        }
        if (_instance.candidates) {
            _writer.writeString(5, _instance.candidates);
        }
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    get candidates() {
        return this._candidates;
    }
    set candidates(value) {
        this._candidates = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallOffer.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
}
CallOffer.id = 'proto.pub.v1.models.CallOffer';
/**
 * Message implementation for proto.pub.v1.models.CallAnswer
 */
class CallAnswer {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallAnswer to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.id = _value.id;
        this.body = _value.body;
        this.candidates = _value.candidates;
        CallAnswer.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallAnswer();
        CallAnswer.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.id = _instance.id || '';
        _instance.body = _instance.body || '';
        _instance.candidates = _instance.candidates || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.id = _reader.readString();
                    break;
                case 4:
                    _instance.body = _reader.readString();
                    break;
                case 5:
                    _instance.candidates = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallAnswer.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.from) {
            _writer.writeMessage(1, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.id) {
            _writer.writeString(3, _instance.id);
        }
        if (_instance.body) {
            _writer.writeString(4, _instance.body);
        }
        if (_instance.candidates) {
            _writer.writeString(5, _instance.candidates);
        }
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    get candidates() {
        return this._candidates;
    }
    set candidates(value) {
        this._candidates = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallAnswer.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
}
CallAnswer.id = 'proto.pub.v1.models.CallAnswer';
/**
 * Message implementation for proto.pub.v1.models.CallOfferByClient
 */
class CallOfferByClient {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallOfferByClient to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.id = _value.id;
        this.body = _value.body;
        this.candidates = _value.candidates;
        CallOfferByClient.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallOfferByClient();
        CallOfferByClient.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.to = _instance.to || undefined;
        _instance.id = _instance.id || '';
        _instance.body = _instance.body || '';
        _instance.candidates = _instance.candidates || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.id = _reader.readString();
                    break;
                case 4:
                    _instance.body = _reader.readString();
                    break;
                case 5:
                    _instance.candidates = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallOfferByClient.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.id) {
            _writer.writeString(3, _instance.id);
        }
        if (_instance.body) {
            _writer.writeString(4, _instance.body);
        }
        if (_instance.candidates) {
            _writer.writeString(5, _instance.candidates);
        }
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    get candidates() {
        return this._candidates;
    }
    set candidates(value) {
        this._candidates = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallOfferByClient.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            to: this.to ? this.to.toObject() : undefined,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            to: this.to ? this.to.toProtobufJSON(options) : null,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
}
CallOfferByClient.id = 'proto.pub.v1.models.CallOfferByClient';
/**
 * Message implementation for proto.pub.v1.models.CallAnswerByClient
 */
class CallAnswerByClient {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallAnswerByClient to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.id = _value.id;
        this.body = _value.body;
        this.candidates = _value.candidates;
        CallAnswerByClient.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallAnswerByClient();
        CallAnswerByClient.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.to = _instance.to || undefined;
        _instance.id = _instance.id || '';
        _instance.body = _instance.body || '';
        _instance.candidates = _instance.candidates || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.id = _reader.readString();
                    break;
                case 4:
                    _instance.body = _reader.readString();
                    break;
                case 5:
                    _instance.candidates = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallAnswerByClient.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.id) {
            _writer.writeString(3, _instance.id);
        }
        if (_instance.body) {
            _writer.writeString(4, _instance.body);
        }
        if (_instance.candidates) {
            _writer.writeString(5, _instance.candidates);
        }
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    get candidates() {
        return this._candidates;
    }
    set candidates(value) {
        this._candidates = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallAnswerByClient.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            to: this.to ? this.to.toObject() : undefined,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            to: this.to ? this.to.toProtobufJSON(options) : null,
            id: this.id,
            body: this.body,
            candidates: this.candidates
        };
    }
}
CallAnswerByClient.id = 'proto.pub.v1.models.CallAnswerByClient';
/**
 * Message implementation for proto.pub.v1.models.CallInfo
 */
class CallInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.callEvent = _value.callEvent
            ? new CallEvent(_value.callEvent)
            : undefined;
        this.time = _value.time;
        CallInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallInfo();
        CallInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.callEvent = _instance.callEvent || undefined;
        _instance.time = _instance.time || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.callEvent = new CallEvent();
                    _reader.readMessage(_instance.callEvent, CallEvent.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.time = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.from) {
            _writer.writeMessage(1, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.callEvent) {
            _writer.writeMessage(3, _instance.callEvent, CallEvent.serializeBinaryToWriter);
        }
        if (_instance.time) {
            _writer.writeInt64String(4, _instance.time);
        }
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get callEvent() {
        return this._callEvent;
    }
    set callEvent(value) {
        this._callEvent = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            callEvent: this.callEvent ? this.callEvent.toObject() : undefined,
            time: this.time
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            callEvent: this.callEvent ? this.callEvent.toProtobufJSON(options) : null,
            time: this.time
        };
    }
}
CallInfo.id = 'proto.pub.v1.models.CallInfo';

/**
 * Message implementation for proto.pub.v1.models.MessageMarkup
 */
class MessageMarkup {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageMarkup to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.inlineKeyboardMarkup = _value.inlineKeyboardMarkup
            ? new InlineKeyboardMarkup(_value.inlineKeyboardMarkup)
            : undefined;
        this.replyKeyboardMarkup = _value.replyKeyboardMarkup
            ? new ReplyKeyboardMarkup(_value.replyKeyboardMarkup)
            : undefined;
        this.inputFieldPlaceholder = _value.inputFieldPlaceholder;
        this.inputSuggestions = (_value.inputSuggestions || []).slice();
        this.removeReplyKeyboardMarkup = _value.removeReplyKeyboardMarkup;
        MessageMarkup.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageMarkup();
        MessageMarkup.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.inlineKeyboardMarkup =
            _instance.inlineKeyboardMarkup || undefined;
        _instance.replyKeyboardMarkup = _instance.replyKeyboardMarkup || undefined;
        _instance.inputFieldPlaceholder = _instance.inputFieldPlaceholder || '';
        _instance.inputSuggestions = _instance.inputSuggestions || [];
        _instance.removeReplyKeyboardMarkup =
            _instance.removeReplyKeyboardMarkup || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.inlineKeyboardMarkup = new InlineKeyboardMarkup();
                    _reader.readMessage(_instance.inlineKeyboardMarkup, InlineKeyboardMarkup.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.replyKeyboardMarkup = new ReplyKeyboardMarkup();
                    _reader.readMessage(_instance.replyKeyboardMarkup, ReplyKeyboardMarkup.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.inputFieldPlaceholder = _reader.readString();
                    break;
                case 4:
                    (_instance.inputSuggestions = _instance.inputSuggestions || []).push(_reader.readString());
                    break;
                case 5:
                    _instance.removeReplyKeyboardMarkup = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageMarkup.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.inlineKeyboardMarkup) {
            _writer.writeMessage(1, _instance.inlineKeyboardMarkup, InlineKeyboardMarkup.serializeBinaryToWriter);
        }
        if (_instance.replyKeyboardMarkup) {
            _writer.writeMessage(2, _instance.replyKeyboardMarkup, ReplyKeyboardMarkup.serializeBinaryToWriter);
        }
        if (_instance.inputFieldPlaceholder) {
            _writer.writeString(3, _instance.inputFieldPlaceholder);
        }
        if (_instance.inputSuggestions && _instance.inputSuggestions.length) {
            _writer.writeRepeatedString(4, _instance.inputSuggestions);
        }
        if (_instance.removeReplyKeyboardMarkup) {
            _writer.writeBool(5, _instance.removeReplyKeyboardMarkup);
        }
    }
    get inlineKeyboardMarkup() {
        return this._inlineKeyboardMarkup;
    }
    set inlineKeyboardMarkup(value) {
        this._inlineKeyboardMarkup = value;
    }
    get replyKeyboardMarkup() {
        return this._replyKeyboardMarkup;
    }
    set replyKeyboardMarkup(value) {
        this._replyKeyboardMarkup = value;
    }
    get inputFieldPlaceholder() {
        return this._inputFieldPlaceholder;
    }
    set inputFieldPlaceholder(value) {
        this._inputFieldPlaceholder = value;
    }
    get inputSuggestions() {
        return this._inputSuggestions;
    }
    set inputSuggestions(value) {
        this._inputSuggestions = value;
    }
    get removeReplyKeyboardMarkup() {
        return this._removeReplyKeyboardMarkup;
    }
    set removeReplyKeyboardMarkup(value) {
        this._removeReplyKeyboardMarkup = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageMarkup.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            inlineKeyboardMarkup: this.inlineKeyboardMarkup
                ? this.inlineKeyboardMarkup.toObject()
                : undefined,
            replyKeyboardMarkup: this.replyKeyboardMarkup
                ? this.replyKeyboardMarkup.toObject()
                : undefined,
            inputFieldPlaceholder: this.inputFieldPlaceholder,
            inputSuggestions: (this.inputSuggestions || []).slice(),
            removeReplyKeyboardMarkup: this.removeReplyKeyboardMarkup
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            inlineKeyboardMarkup: this.inlineKeyboardMarkup
                ? this.inlineKeyboardMarkup.toProtobufJSON(options)
                : null,
            replyKeyboardMarkup: this.replyKeyboardMarkup
                ? this.replyKeyboardMarkup.toProtobufJSON(options)
                : null,
            inputFieldPlaceholder: this.inputFieldPlaceholder,
            inputSuggestions: (this.inputSuggestions || []).slice(),
            removeReplyKeyboardMarkup: this.removeReplyKeyboardMarkup
        };
    }
}
MessageMarkup.id = 'proto.pub.v1.models.MessageMarkup';
/**
 * Message implementation for proto.pub.v1.models.InlineKeyboardMarkup
 */
class InlineKeyboardMarkup {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineKeyboardMarkup to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.rows = (_value.rows || []).map(m => new InlineKeyboardRow(m));
        InlineKeyboardMarkup.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineKeyboardMarkup();
        InlineKeyboardMarkup.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.rows = _instance.rows || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new InlineKeyboardRow();
                    _reader.readMessage(messageInitializer1, InlineKeyboardRow.deserializeBinaryFromReader);
                    (_instance.rows = _instance.rows || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineKeyboardMarkup.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.rows && _instance.rows.length) {
            _writer.writeRepeatedMessage(1, _instance.rows, InlineKeyboardRow.serializeBinaryToWriter);
        }
    }
    get rows() {
        return this._rows;
    }
    set rows(value) {
        this._rows = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineKeyboardMarkup.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            rows: (this.rows || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            rows: (this.rows || []).map(m => m.toProtobufJSON(options))
        };
    }
}
InlineKeyboardMarkup.id = 'proto.pub.v1.models.InlineKeyboardMarkup';
/**
 * Message implementation for proto.pub.v1.models.InlineKeyboardRow
 */
class InlineKeyboardRow {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineKeyboardRow to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.buttons = (_value.buttons || []).map(m => new InlineKeyboardButton(m));
        InlineKeyboardRow.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineKeyboardRow();
        InlineKeyboardRow.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.buttons = _instance.buttons || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new InlineKeyboardButton();
                    _reader.readMessage(messageInitializer1, InlineKeyboardButton.deserializeBinaryFromReader);
                    (_instance.buttons = _instance.buttons || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineKeyboardRow.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.buttons && _instance.buttons.length) {
            _writer.writeRepeatedMessage(1, _instance.buttons, InlineKeyboardButton.serializeBinaryToWriter);
        }
    }
    get buttons() {
        return this._buttons;
    }
    set buttons(value) {
        this._buttons = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineKeyboardRow.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            buttons: (this.buttons || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            buttons: (this.buttons || []).map(m => m.toProtobufJSON(options))
        };
    }
}
InlineKeyboardRow.id = 'proto.pub.v1.models.InlineKeyboardRow';
/**
 * Message implementation for proto.pub.v1.models.InlineKeyboardButton
 */
class InlineKeyboardButton {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineKeyboardButton to deeply clone from
     */
    constructor(_value) {
        this._type = InlineKeyboardButton.TypeCase.none;
        _value = _value || {};
        this.text = _value.text;
        this.url = _value.url ? new InlineKeyboardButtonUrl(_value.url) : undefined;
        this.callback = _value.callback
            ? new InlineKeyboardButtonCallback(_value.callback)
            : undefined;
        InlineKeyboardButton.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineKeyboardButton();
        InlineKeyboardButton.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                case 2:
                    _instance.url = new InlineKeyboardButtonUrl();
                    _reader.readMessage(_instance.url, InlineKeyboardButtonUrl.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.callback = new InlineKeyboardButtonCallback();
                    _reader.readMessage(_instance.callback, InlineKeyboardButtonCallback.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineKeyboardButton.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(1, _instance.text);
        }
        if (_instance.url) {
            _writer.writeMessage(2, _instance.url, InlineKeyboardButtonUrl.serializeBinaryToWriter);
        }
        if (_instance.callback) {
            _writer.writeMessage(3, _instance.callback, InlineKeyboardButtonCallback.serializeBinaryToWriter);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        if (value !== undefined && value !== null) {
            this._callback = undefined;
            this._type = InlineKeyboardButton.TypeCase.url;
        }
        this._url = value;
    }
    get callback() {
        return this._callback;
    }
    set callback(value) {
        if (value !== undefined && value !== null) {
            this._url = undefined;
            this._type = InlineKeyboardButton.TypeCase.callback;
        }
        this._callback = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineKeyboardButton.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text,
            url: this.url ? this.url.toObject() : undefined,
            callback: this.callback ? this.callback.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text,
            url: this.url ? this.url.toProtobufJSON(options) : null,
            callback: this.callback ? this.callback.toProtobufJSON(options) : null
        };
    }
}
InlineKeyboardButton.id = 'proto.pub.v1.models.InlineKeyboardButton';
(function (InlineKeyboardButton) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["url"] = 1] = "url";
        TypeCase[TypeCase["callback"] = 2] = "callback";
    })(TypeCase = InlineKeyboardButton.TypeCase || (InlineKeyboardButton.TypeCase = {}));
})(InlineKeyboardButton || (InlineKeyboardButton = {}));
/**
 * Message implementation for proto.pub.v1.models.InlineKeyboardButtonUrl
 */
class InlineKeyboardButtonUrl {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineKeyboardButtonUrl to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.url = _value.url;
        InlineKeyboardButtonUrl.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineKeyboardButtonUrl();
        InlineKeyboardButtonUrl.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.url = _instance.url || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.url = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineKeyboardButtonUrl.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.url) {
            _writer.writeString(1, _instance.url);
        }
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineKeyboardButtonUrl.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            url: this.url
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            url: this.url
        };
    }
}
InlineKeyboardButtonUrl.id = 'proto.pub.v1.models.InlineKeyboardButtonUrl';
/**
 * Message implementation for proto.pub.v1.models.InlineKeyboardButtonCallback
 */
class InlineKeyboardButtonCallback {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineKeyboardButtonCallback to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.data = _value.data;
        InlineKeyboardButtonCallback.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineKeyboardButtonCallback();
        InlineKeyboardButtonCallback.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.data = _instance.data || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.data = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineKeyboardButtonCallback.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.data) {
            _writer.writeString(1, _instance.data);
        }
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineKeyboardButtonCallback.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            data: this.data
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            data: this.data
        };
    }
}
InlineKeyboardButtonCallback.id = 'proto.pub.v1.models.InlineKeyboardButtonCallback';
/**
 * Message implementation for proto.pub.v1.models.ReplyKeyboardMarkup
 */
class ReplyKeyboardMarkup {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReplyKeyboardMarkup to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.rows = (_value.rows || []).map(m => new ReplyKeyboardRow(m));
        this.oneTimeKeyboard = _value.oneTimeKeyboard;
        ReplyKeyboardMarkup.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReplyKeyboardMarkup();
        ReplyKeyboardMarkup.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.rows = _instance.rows || [];
        _instance.oneTimeKeyboard = _instance.oneTimeKeyboard || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new ReplyKeyboardRow();
                    _reader.readMessage(messageInitializer1, ReplyKeyboardRow.deserializeBinaryFromReader);
                    (_instance.rows = _instance.rows || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.oneTimeKeyboard = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReplyKeyboardMarkup.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.rows && _instance.rows.length) {
            _writer.writeRepeatedMessage(1, _instance.rows, ReplyKeyboardRow.serializeBinaryToWriter);
        }
        if (_instance.oneTimeKeyboard) {
            _writer.writeBool(2, _instance.oneTimeKeyboard);
        }
    }
    get rows() {
        return this._rows;
    }
    set rows(value) {
        this._rows = value;
    }
    get oneTimeKeyboard() {
        return this._oneTimeKeyboard;
    }
    set oneTimeKeyboard(value) {
        this._oneTimeKeyboard = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReplyKeyboardMarkup.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            rows: (this.rows || []).map(m => m.toObject()),
            oneTimeKeyboard: this.oneTimeKeyboard
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            rows: (this.rows || []).map(m => m.toProtobufJSON(options)),
            oneTimeKeyboard: this.oneTimeKeyboard
        };
    }
}
ReplyKeyboardMarkup.id = 'proto.pub.v1.models.ReplyKeyboardMarkup';
/**
 * Message implementation for proto.pub.v1.models.ReplyKeyboardRow
 */
class ReplyKeyboardRow {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReplyKeyboardRow to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.buttons = (_value.buttons || []).map(m => new ReplyKeyboardButton(m));
        ReplyKeyboardRow.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReplyKeyboardRow();
        ReplyKeyboardRow.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.buttons = _instance.buttons || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new ReplyKeyboardButton();
                    _reader.readMessage(messageInitializer1, ReplyKeyboardButton.deserializeBinaryFromReader);
                    (_instance.buttons = _instance.buttons || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReplyKeyboardRow.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.buttons && _instance.buttons.length) {
            _writer.writeRepeatedMessage(1, _instance.buttons, ReplyKeyboardButton.serializeBinaryToWriter);
        }
    }
    get buttons() {
        return this._buttons;
    }
    set buttons(value) {
        this._buttons = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReplyKeyboardRow.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            buttons: (this.buttons || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            buttons: (this.buttons || []).map(m => m.toProtobufJSON(options))
        };
    }
}
ReplyKeyboardRow.id = 'proto.pub.v1.models.ReplyKeyboardRow';
/**
 * Message implementation for proto.pub.v1.models.ReplyKeyboardButton
 */
class ReplyKeyboardButton {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReplyKeyboardButton to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.text = _value.text;
        this.sendOnClick = _value.sendOnClick;
        ReplyKeyboardButton.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReplyKeyboardButton();
        ReplyKeyboardButton.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
        _instance.sendOnClick = _instance.sendOnClick || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                case 2:
                    _instance.sendOnClick = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReplyKeyboardButton.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(1, _instance.text);
        }
        if (_instance.sendOnClick) {
            _writer.writeBool(2, _instance.sendOnClick);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get sendOnClick() {
        return this._sendOnClick;
    }
    set sendOnClick(value) {
        this._sendOnClick = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReplyKeyboardButton.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text,
            sendOnClick: this.sendOnClick
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text,
            sendOnClick: this.sendOnClick
        };
    }
}
ReplyKeyboardButton.id = 'proto.pub.v1.models.ReplyKeyboardButton';

/**
 * Message implementation for proto.pub.v1.models.Text
 */
class Text {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Text to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.text = _value.text;
        Text.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Text();
        Text.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Text.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(1, _instance.text);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Text.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text
        };
    }
}
Text.id = 'proto.pub.v1.models.Text';
/**
 * Message implementation for proto.pub.v1.models.ShareUid
 */
class ShareUid {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ShareUid to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.phoneNumber = _value.phoneNumber;
        this.name = _value.name;
        this.joinToken = _value.joinToken;
        ShareUid.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ShareUid();
        ShareUid.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.phoneNumber = _instance.phoneNumber || '';
        _instance.name = _instance.name || '';
        _instance.joinToken = _instance.joinToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.phoneNumber = _reader.readString();
                    break;
                case 3:
                    _instance.name = _reader.readString();
                    break;
                case 4:
                    _instance.joinToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ShareUid.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.phoneNumber) {
            _writer.writeString(2, _instance.phoneNumber);
        }
        if (_instance.name) {
            _writer.writeString(3, _instance.name);
        }
        if (_instance.joinToken) {
            _writer.writeString(4, _instance.joinToken);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get joinToken() {
        return this._joinToken;
    }
    set joinToken(value) {
        this._joinToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ShareUid.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            phoneNumber: this.phoneNumber,
            name: this.name,
            joinToken: this.joinToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            phoneNumber: this.phoneNumber,
            name: this.name,
            joinToken: this.joinToken
        };
    }
}
ShareUid.id = 'proto.pub.v1.models.ShareUid';
/**
 * Message implementation for proto.pub.v1.models.MessageDeliveryAck
 */
class MessageDeliveryAck {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageDeliveryAck to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.packetId = _value.packetId;
        this.id = _value.id;
        this.time = _value.time;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        MessageDeliveryAck.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageDeliveryAck();
        MessageDeliveryAck.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.id = _instance.id || '0';
        _instance.time = _instance.time || '0';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 2:
                    _instance.id = _reader.readInt64String();
                    break;
                case 3:
                    _instance.time = _reader.readInt64String();
                    break;
                case 4:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageDeliveryAck.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.id) {
            _writer.writeInt64String(2, _instance.id);
        }
        if (_instance.time) {
            _writer.writeInt64String(3, _instance.time);
        }
        if (_instance.from) {
            _writer.writeMessage(4, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(5, _instance.to, Uid.serializeBinaryToWriter);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageDeliveryAck.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null
        };
    }
}
MessageDeliveryAck.id = 'proto.pub.v1.models.MessageDeliveryAck';
/**
 * Message implementation for proto.pub.v1.models.MessageBrief
 */
class MessageBrief {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageBrief to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.packetId = _value.packetId;
        this.id = _value.id;
        this.time = _value.time;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.messageType = _value.messageType;
        this.text = _value.text;
        this.thumbnailReference = _value.thumbnailReference
            ? new File(_value.thumbnailReference)
            : undefined;
        MessageBrief.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageBrief();
        MessageBrief.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.id = _instance.id || '0';
        _instance.time = _instance.time || '0';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.messageType = _instance.messageType || 0;
        _instance.text = _instance.text || '';
        _instance.thumbnailReference = _instance.thumbnailReference || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 2:
                    _instance.id = _reader.readInt64String();
                    break;
                case 3:
                    _instance.time = _reader.readInt64String();
                    break;
                case 4:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.messageType = _reader.readEnum();
                    break;
                case 7:
                    _instance.text = _reader.readString();
                    break;
                case 8:
                    _instance.thumbnailReference = new File();
                    _reader.readMessage(_instance.thumbnailReference, File.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageBrief.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.id) {
            _writer.writeInt64String(2, _instance.id);
        }
        if (_instance.time) {
            _writer.writeInt64String(3, _instance.time);
        }
        if (_instance.from) {
            _writer.writeMessage(4, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(5, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageType) {
            _writer.writeEnum(6, _instance.messageType);
        }
        if (_instance.text) {
            _writer.writeString(7, _instance.text);
        }
        if (_instance.thumbnailReference) {
            _writer.writeMessage(8, _instance.thumbnailReference, File.serializeBinaryToWriter);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get messageType() {
        return this._messageType;
    }
    set messageType(value) {
        this._messageType = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get thumbnailReference() {
        return this._thumbnailReference;
    }
    set thumbnailReference(value) {
        this._thumbnailReference = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageBrief.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            messageType: this.messageType,
            text: this.text,
            thumbnailReference: this.thumbnailReference
                ? this.thumbnailReference.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            messageType: MessageBrief.MessageTypes[this.messageType === null || this.messageType === undefined
                ? 0
                : this.messageType],
            text: this.text,
            thumbnailReference: this.thumbnailReference
                ? this.thumbnailReference.toProtobufJSON(options)
                : null
        };
    }
}
MessageBrief.id = 'proto.pub.v1.models.MessageBrief';
(function (MessageBrief) {
    let MessageTypes;
    (function (MessageTypes) {
        MessageTypes[MessageTypes["NOT_SET"] = 0] = "NOT_SET";
        MessageTypes[MessageTypes["TEXT"] = 1] = "TEXT";
        MessageTypes[MessageTypes["FILE"] = 2] = "FILE";
        MessageTypes[MessageTypes["STICKER"] = 3] = "STICKER";
        MessageTypes[MessageTypes["LOCATION"] = 4] = "LOCATION";
        MessageTypes[MessageTypes["LIVE_LOCATION"] = 5] = "LIVE_LOCATION";
        MessageTypes[MessageTypes["POLL"] = 6] = "POLL";
        MessageTypes[MessageTypes["TRANSACTION"] = 7] = "TRANSACTION";
        MessageTypes[MessageTypes["FORM"] = 8] = "FORM";
        MessageTypes[MessageTypes["BUTTONS"] = 9] = "BUTTONS";
        MessageTypes[MessageTypes["SHARE_UID"] = 10] = "SHARE_UID";
        MessageTypes[MessageTypes["FORM_RESULT"] = 11] = "FORM_RESULT";
        MessageTypes[MessageTypes["CALL_END"] = 12] = "CALL_END";
        MessageTypes[MessageTypes["CALL_BUSY"] = 13] = "CALL_BUSY";
        MessageTypes[MessageTypes["CALL_DECLINED"] = 14] = "CALL_DECLINED";
        MessageTypes[MessageTypes["TABLE"] = 15] = "TABLE";
        MessageTypes[MessageTypes["PE_AS_NEW_CONTACT_ADDED"] = 16] = "PE_AS_NEW_CONTACT_ADDED";
        MessageTypes[MessageTypes["PE_BS_BOT_NOT_RESPONDING"] = 17] = "PE_BS_BOT_NOT_RESPONDING";
        MessageTypes[MessageTypes["PE_MS_KICK_USER"] = 18] = "PE_MS_KICK_USER";
        MessageTypes[MessageTypes["PE_MS_ADD_USER"] = 19] = "PE_MS_ADD_USER";
        MessageTypes[MessageTypes["PE_MS_PIN_MESSAGE"] = 20] = "PE_MS_PIN_MESSAGE";
        MessageTypes[MessageTypes["PE_MS_NAME_CHANGED"] = 21] = "PE_MS_NAME_CHANGED";
        MessageTypes[MessageTypes["PE_MS_AVATAR_CHANGED"] = 22] = "PE_MS_AVATAR_CHANGED";
        MessageTypes[MessageTypes["PE_MS_MUC_CREATED"] = 23] = "PE_MS_MUC_CREATED";
        MessageTypes[MessageTypes["PE_MS_LEAVE_USER"] = 24] = "PE_MS_LEAVE_USER";
        MessageTypes[MessageTypes["PE_MS_JOINED_USER"] = 25] = "PE_MS_JOINED_USER";
        MessageTypes[MessageTypes["PE_MS_DELETED"] = 26] = "PE_MS_DELETED";
        MessageTypes[MessageTypes["PDT_PHONE_NUMBER"] = 27] = "PDT_PHONE_NUMBER";
        MessageTypes[MessageTypes["PDT_USERNAME"] = 28] = "PDT_USERNAME";
        MessageTypes[MessageTypes["PDT_EMAIL"] = 29] = "PDT_EMAIL";
        MessageTypes[MessageTypes["PDT_NAME"] = 30] = "PDT_NAME";
        MessageTypes[MessageTypes["PAYMENT_INFORMATION"] = 31] = "PAYMENT_INFORMATION";
    })(MessageTypes = MessageBrief.MessageTypes || (MessageBrief.MessageTypes = {}));
})(MessageBrief || (MessageBrief = {}));
/**
 * Message implementation for proto.pub.v1.models.Message
 */
class Message {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Message to deeply clone from
     */
    constructor(_value) {
        this._type = Message.TypeCase.none;
        _value = _value || {};
        this.packetId = _value.packetId;
        this.id = _value.id;
        this.time = _value.time;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.replyToId = _value.replyToId;
        this.repliedMessageBrief = _value.repliedMessageBrief
            ? new MessageBrief(_value.repliedMessageBrief)
            : undefined;
        this.forwardFrom = _value.forwardFrom
            ? new Uid(_value.forwardFrom)
            : undefined;
        this.generatedBy = _value.generatedBy
            ? new Uid(_value.generatedBy)
            : undefined;
        this.edited = _value.edited;
        this.encrypted = _value.encrypted;
        this.ttl = _value.ttl;
        this.thread = _value.thread;
        this.shouldBeQuiet = _value.shouldBeQuiet;
        this.mucMinimumAccessLevel = _value.mucMinimumAccessLevel;
        this.specialTarget = _value.specialTarget
            ? new Uid(_value.specialTarget)
            : undefined;
        this.messageMarkup = _value.messageMarkup
            ? new MessageMarkup(_value.messageMarkup)
            : undefined;
        this.text = _value.text ? new Text(_value.text) : undefined;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.sticker = _value.sticker
            ? new Sticker(_value.sticker)
            : undefined;
        this.location = _value.location
            ? new Location(_value.location)
            : undefined;
        this.liveLocation = _value.liveLocation
            ? new LiveLocation(_value.liveLocation)
            : undefined;
        this.poll = _value.poll
            ? new Poll(_value.poll)
            : undefined;
        this.transaction = _value.transaction
            ? new Transaction(_value.transaction)
            : undefined;
        this.form = _value.form
            ? new Form(_value.form)
            : undefined;
        this.persistEvent = _value.persistEvent
            ? new PersistentEvent(_value.persistEvent)
            : undefined;
        this.buttons = _value.buttons
            ? new Buttons(_value.buttons)
            : undefined;
        this.shareUid = _value.shareUid ? new ShareUid(_value.shareUid) : undefined;
        this.formResult = _value.formResult
            ? new FormResult(_value.formResult)
            : undefined;
        this.sharePrivateDataRequest = _value.sharePrivateDataRequest
            ? new SharePrivateDataRequest(_value.sharePrivateDataRequest)
            : undefined;
        this.sharePrivateDataAcceptance = _value.sharePrivateDataAcceptance
            ? new SharePrivateDataAcceptance(_value.sharePrivateDataAcceptance)
            : undefined;
        this.callEvent = _value.callEvent
            ? new CallEvent(_value.callEvent)
            : undefined;
        this.table = _value.table
            ? new Table(_value.table)
            : undefined;
        this.paymentInformation = _value.paymentInformation
            ? new PaymentInformation(_value.paymentInformation)
            : undefined;
        Message.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Message();
        Message.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.id = _instance.id || '0';
        _instance.time = _instance.time || '0';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.replyToId = _instance.replyToId || '0';
        _instance.repliedMessageBrief = _instance.repliedMessageBrief || undefined;
        _instance.forwardFrom = _instance.forwardFrom || undefined;
        _instance.generatedBy = _instance.generatedBy || undefined;
        _instance.edited = _instance.edited || false;
        _instance.encrypted = _instance.encrypted || false;
        _instance.ttl = _instance.ttl || 0;
        _instance.thread = _instance.thread || '0';
        _instance.shouldBeQuiet = _instance.shouldBeQuiet || false;
        _instance.mucMinimumAccessLevel = _instance.mucMinimumAccessLevel || 0;
        _instance.specialTarget = _instance.specialTarget || undefined;
        _instance.messageMarkup = _instance.messageMarkup || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 2:
                    _instance.id = _reader.readInt64String();
                    break;
                case 4:
                    _instance.time = _reader.readInt64String();
                    break;
                case 5:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.replyToId = _reader.readInt64String();
                    break;
                case 30:
                    _instance.repliedMessageBrief = new MessageBrief();
                    _reader.readMessage(_instance.repliedMessageBrief, MessageBrief.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.forwardFrom = new Uid();
                    _reader.readMessage(_instance.forwardFrom, Uid.deserializeBinaryFromReader);
                    break;
                case 33:
                    _instance.generatedBy = new Uid();
                    _reader.readMessage(_instance.generatedBy, Uid.deserializeBinaryFromReader);
                    break;
                case 9:
                    _instance.edited = _reader.readBool();
                    break;
                case 10:
                    _instance.encrypted = _reader.readBool();
                    break;
                case 23:
                    _instance.ttl = _reader.readInt32();
                    break;
                case 28:
                    _instance.thread = _reader.readInt64String();
                    break;
                case 29:
                    _instance.shouldBeQuiet = _reader.readBool();
                    break;
                case 24:
                    _instance.mucMinimumAccessLevel = _reader.readEnum();
                    break;
                case 25:
                    _instance.specialTarget = new Uid();
                    _reader.readMessage(_instance.specialTarget, Uid.deserializeBinaryFromReader);
                    break;
                case 34:
                    _instance.messageMarkup = new MessageMarkup();
                    _reader.readMessage(_instance.messageMarkup, MessageMarkup.deserializeBinaryFromReader);
                    break;
                case 11:
                    _instance.text = new Text();
                    _reader.readMessage(_instance.text, Text.deserializeBinaryFromReader);
                    break;
                case 12:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 13:
                    _instance.sticker = new Sticker();
                    _reader.readMessage(_instance.sticker, Sticker.deserializeBinaryFromReader);
                    break;
                case 14:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                case 15:
                    _instance.liveLocation = new LiveLocation();
                    _reader.readMessage(_instance.liveLocation, LiveLocation.deserializeBinaryFromReader);
                    break;
                case 16:
                    _instance.poll = new Poll();
                    _reader.readMessage(_instance.poll, Poll.deserializeBinaryFromReader);
                    break;
                case 17:
                    _instance.transaction = new Transaction();
                    _reader.readMessage(_instance.transaction, Transaction.deserializeBinaryFromReader);
                    break;
                case 18:
                    _instance.form = new Form();
                    _reader.readMessage(_instance.form, Form.deserializeBinaryFromReader);
                    break;
                case 19:
                    _instance.persistEvent = new PersistentEvent();
                    _reader.readMessage(_instance.persistEvent, PersistentEvent.deserializeBinaryFromReader);
                    break;
                case 20:
                    _instance.buttons = new Buttons();
                    _reader.readMessage(_instance.buttons, Buttons.deserializeBinaryFromReader);
                    break;
                case 21:
                    _instance.shareUid = new ShareUid();
                    _reader.readMessage(_instance.shareUid, ShareUid.deserializeBinaryFromReader);
                    break;
                case 22:
                    _instance.formResult = new FormResult();
                    _reader.readMessage(_instance.formResult, FormResult.deserializeBinaryFromReader);
                    break;
                case 26:
                    _instance.sharePrivateDataRequest = new SharePrivateDataRequest();
                    _reader.readMessage(_instance.sharePrivateDataRequest, SharePrivateDataRequest
                        .deserializeBinaryFromReader);
                    break;
                case 27:
                    _instance.sharePrivateDataAcceptance = new SharePrivateDataAcceptance();
                    _reader.readMessage(_instance.sharePrivateDataAcceptance, SharePrivateDataAcceptance
                        .deserializeBinaryFromReader);
                    break;
                case 31:
                    _instance.callEvent = new CallEvent();
                    _reader.readMessage(_instance.callEvent, CallEvent.deserializeBinaryFromReader);
                    break;
                case 32:
                    _instance.table = new Table();
                    _reader.readMessage(_instance.table, Table.deserializeBinaryFromReader);
                    break;
                case 35:
                    _instance.paymentInformation = new PaymentInformation();
                    _reader.readMessage(_instance.paymentInformation, PaymentInformation.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Message.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.id) {
            _writer.writeInt64String(2, _instance.id);
        }
        if (_instance.time) {
            _writer.writeInt64String(4, _instance.time);
        }
        if (_instance.from) {
            _writer.writeMessage(5, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(6, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.replyToId) {
            _writer.writeInt64String(7, _instance.replyToId);
        }
        if (_instance.repliedMessageBrief) {
            _writer.writeMessage(30, _instance.repliedMessageBrief, MessageBrief.serializeBinaryToWriter);
        }
        if (_instance.forwardFrom) {
            _writer.writeMessage(8, _instance.forwardFrom, Uid.serializeBinaryToWriter);
        }
        if (_instance.generatedBy) {
            _writer.writeMessage(33, _instance.generatedBy, Uid.serializeBinaryToWriter);
        }
        if (_instance.edited) {
            _writer.writeBool(9, _instance.edited);
        }
        if (_instance.encrypted) {
            _writer.writeBool(10, _instance.encrypted);
        }
        if (_instance.ttl) {
            _writer.writeInt32(23, _instance.ttl);
        }
        if (_instance.thread) {
            _writer.writeInt64String(28, _instance.thread);
        }
        if (_instance.shouldBeQuiet) {
            _writer.writeBool(29, _instance.shouldBeQuiet);
        }
        if (_instance.mucMinimumAccessLevel) {
            _writer.writeEnum(24, _instance.mucMinimumAccessLevel);
        }
        if (_instance.specialTarget) {
            _writer.writeMessage(25, _instance.specialTarget, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageMarkup) {
            _writer.writeMessage(34, _instance.messageMarkup, MessageMarkup.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeMessage(11, _instance.text, Text.serializeBinaryToWriter);
        }
        if (_instance.file) {
            _writer.writeMessage(12, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.sticker) {
            _writer.writeMessage(13, _instance.sticker, Sticker.serializeBinaryToWriter);
        }
        if (_instance.location) {
            _writer.writeMessage(14, _instance.location, Location.serializeBinaryToWriter);
        }
        if (_instance.liveLocation) {
            _writer.writeMessage(15, _instance.liveLocation, LiveLocation.serializeBinaryToWriter);
        }
        if (_instance.poll) {
            _writer.writeMessage(16, _instance.poll, Poll.serializeBinaryToWriter);
        }
        if (_instance.transaction) {
            _writer.writeMessage(17, _instance.transaction, Transaction.serializeBinaryToWriter);
        }
        if (_instance.form) {
            _writer.writeMessage(18, _instance.form, Form.serializeBinaryToWriter);
        }
        if (_instance.persistEvent) {
            _writer.writeMessage(19, _instance.persistEvent, PersistentEvent.serializeBinaryToWriter);
        }
        if (_instance.buttons) {
            _writer.writeMessage(20, _instance.buttons, Buttons.serializeBinaryToWriter);
        }
        if (_instance.shareUid) {
            _writer.writeMessage(21, _instance.shareUid, ShareUid.serializeBinaryToWriter);
        }
        if (_instance.formResult) {
            _writer.writeMessage(22, _instance.formResult, FormResult.serializeBinaryToWriter);
        }
        if (_instance.sharePrivateDataRequest) {
            _writer.writeMessage(26, _instance.sharePrivateDataRequest, SharePrivateDataRequest.serializeBinaryToWriter);
        }
        if (_instance.sharePrivateDataAcceptance) {
            _writer.writeMessage(27, _instance.sharePrivateDataAcceptance, SharePrivateDataAcceptance.serializeBinaryToWriter);
        }
        if (_instance.callEvent) {
            _writer.writeMessage(31, _instance.callEvent, CallEvent.serializeBinaryToWriter);
        }
        if (_instance.table) {
            _writer.writeMessage(32, _instance.table, Table.serializeBinaryToWriter);
        }
        if (_instance.paymentInformation) {
            _writer.writeMessage(35, _instance.paymentInformation, PaymentInformation.serializeBinaryToWriter);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get replyToId() {
        return this._replyToId;
    }
    set replyToId(value) {
        this._replyToId = value;
    }
    get repliedMessageBrief() {
        return this._repliedMessageBrief;
    }
    set repliedMessageBrief(value) {
        this._repliedMessageBrief = value;
    }
    get forwardFrom() {
        return this._forwardFrom;
    }
    set forwardFrom(value) {
        this._forwardFrom = value;
    }
    get generatedBy() {
        return this._generatedBy;
    }
    set generatedBy(value) {
        this._generatedBy = value;
    }
    get edited() {
        return this._edited;
    }
    set edited(value) {
        this._edited = value;
    }
    get encrypted() {
        return this._encrypted;
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    get ttl() {
        return this._ttl;
    }
    set ttl(value) {
        this._ttl = value;
    }
    get thread() {
        return this._thread;
    }
    set thread(value) {
        this._thread = value;
    }
    get shouldBeQuiet() {
        return this._shouldBeQuiet;
    }
    set shouldBeQuiet(value) {
        this._shouldBeQuiet = value;
    }
    get mucMinimumAccessLevel() {
        return this._mucMinimumAccessLevel;
    }
    set mucMinimumAccessLevel(value) {
        this._mucMinimumAccessLevel = value;
    }
    get specialTarget() {
        return this._specialTarget;
    }
    set specialTarget(value) {
        this._specialTarget = value;
    }
    get messageMarkup() {
        return this._messageMarkup;
    }
    set messageMarkup(value) {
        this._messageMarkup = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value !== undefined && value !== null) {
            this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.text;
        }
        this._text = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        if (value !== undefined && value !== null) {
            this._text = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.file;
        }
        this._file = value;
    }
    get sticker() {
        return this._sticker;
    }
    set sticker(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.sticker;
        }
        this._sticker = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.location;
        }
        this._location = value;
    }
    get liveLocation() {
        return this._liveLocation;
    }
    set liveLocation(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.liveLocation;
        }
        this._liveLocation = value;
    }
    get poll() {
        return this._poll;
    }
    set poll(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.poll;
        }
        this._poll = value;
    }
    get transaction() {
        return this._transaction;
    }
    set transaction(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.transaction;
        }
        this._transaction = value;
    }
    get form() {
        return this._form;
    }
    set form(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.form;
        }
        this._form = value;
    }
    get persistEvent() {
        return this._persistEvent;
    }
    set persistEvent(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.persistEvent;
        }
        this._persistEvent = value;
    }
    get buttons() {
        return this._buttons;
    }
    set buttons(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.buttons;
        }
        this._buttons = value;
    }
    get shareUid() {
        return this._shareUid;
    }
    set shareUid(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.shareUid;
        }
        this._shareUid = value;
    }
    get formResult() {
        return this._formResult;
    }
    set formResult(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.formResult;
        }
        this._formResult = value;
    }
    get sharePrivateDataRequest() {
        return this._sharePrivateDataRequest;
    }
    set sharePrivateDataRequest(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataAcceptance = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.sharePrivateDataRequest;
        }
        this._sharePrivateDataRequest = value;
    }
    get sharePrivateDataAcceptance() {
        return this._sharePrivateDataAcceptance;
    }
    set sharePrivateDataAcceptance(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._callEvent = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.sharePrivateDataAcceptance;
        }
        this._sharePrivateDataAcceptance = value;
    }
    get callEvent() {
        return this._callEvent;
    }
    set callEvent(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._table = this._paymentInformation = undefined;
            this._type = Message.TypeCase.callEvent;
        }
        this._callEvent = value;
    }
    get table() {
        return this._table;
    }
    set table(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._paymentInformation = undefined;
            this._type = Message.TypeCase.table;
        }
        this._table = value;
    }
    get paymentInformation() {
        return this._paymentInformation;
    }
    set paymentInformation(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._transaction = this._form = this._persistEvent = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = Message.TypeCase.paymentInformation;
        }
        this._paymentInformation = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Message.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            replyToId: this.replyToId,
            repliedMessageBrief: this.repliedMessageBrief
                ? this.repliedMessageBrief.toObject()
                : undefined,
            forwardFrom: this.forwardFrom ? this.forwardFrom.toObject() : undefined,
            generatedBy: this.generatedBy ? this.generatedBy.toObject() : undefined,
            edited: this.edited,
            encrypted: this.encrypted,
            ttl: this.ttl,
            thread: this.thread,
            shouldBeQuiet: this.shouldBeQuiet,
            mucMinimumAccessLevel: this.mucMinimumAccessLevel,
            specialTarget: this.specialTarget
                ? this.specialTarget.toObject()
                : undefined,
            messageMarkup: this.messageMarkup
                ? this.messageMarkup.toObject()
                : undefined,
            text: this.text ? this.text.toObject() : undefined,
            file: this.file ? this.file.toObject() : undefined,
            sticker: this.sticker ? this.sticker.toObject() : undefined,
            location: this.location ? this.location.toObject() : undefined,
            liveLocation: this.liveLocation
                ? this.liveLocation.toObject()
                : undefined,
            poll: this.poll ? this.poll.toObject() : undefined,
            transaction: this.transaction ? this.transaction.toObject() : undefined,
            form: this.form ? this.form.toObject() : undefined,
            persistEvent: this.persistEvent
                ? this.persistEvent.toObject()
                : undefined,
            buttons: this.buttons ? this.buttons.toObject() : undefined,
            shareUid: this.shareUid ? this.shareUid.toObject() : undefined,
            formResult: this.formResult ? this.formResult.toObject() : undefined,
            sharePrivateDataRequest: this.sharePrivateDataRequest
                ? this.sharePrivateDataRequest.toObject()
                : undefined,
            sharePrivateDataAcceptance: this.sharePrivateDataAcceptance
                ? this.sharePrivateDataAcceptance.toObject()
                : undefined,
            callEvent: this.callEvent ? this.callEvent.toObject() : undefined,
            table: this.table ? this.table.toObject() : undefined,
            paymentInformation: this.paymentInformation
                ? this.paymentInformation.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            replyToId: this.replyToId,
            repliedMessageBrief: this.repliedMessageBrief
                ? this.repliedMessageBrief.toProtobufJSON(options)
                : null,
            forwardFrom: this.forwardFrom
                ? this.forwardFrom.toProtobufJSON(options)
                : null,
            generatedBy: this.generatedBy
                ? this.generatedBy.toProtobufJSON(options)
                : null,
            edited: this.edited,
            encrypted: this.encrypted,
            ttl: this.ttl,
            thread: this.thread,
            shouldBeQuiet: this.shouldBeQuiet,
            mucMinimumAccessLevel: Role[this.mucMinimumAccessLevel === null ||
                this.mucMinimumAccessLevel === undefined
                ? 0
                : this.mucMinimumAccessLevel],
            specialTarget: this.specialTarget
                ? this.specialTarget.toProtobufJSON(options)
                : null,
            messageMarkup: this.messageMarkup
                ? this.messageMarkup.toProtobufJSON(options)
                : null,
            text: this.text ? this.text.toProtobufJSON(options) : null,
            file: this.file ? this.file.toProtobufJSON(options) : null,
            sticker: this.sticker ? this.sticker.toProtobufJSON(options) : null,
            location: this.location ? this.location.toProtobufJSON(options) : null,
            liveLocation: this.liveLocation
                ? this.liveLocation.toProtobufJSON(options)
                : null,
            poll: this.poll ? this.poll.toProtobufJSON(options) : null,
            transaction: this.transaction
                ? this.transaction.toProtobufJSON(options)
                : null,
            form: this.form ? this.form.toProtobufJSON(options) : null,
            persistEvent: this.persistEvent
                ? this.persistEvent.toProtobufJSON(options)
                : null,
            buttons: this.buttons ? this.buttons.toProtobufJSON(options) : null,
            shareUid: this.shareUid ? this.shareUid.toProtobufJSON(options) : null,
            formResult: this.formResult
                ? this.formResult.toProtobufJSON(options)
                : null,
            sharePrivateDataRequest: this.sharePrivateDataRequest
                ? this.sharePrivateDataRequest.toProtobufJSON(options)
                : null,
            sharePrivateDataAcceptance: this.sharePrivateDataAcceptance
                ? this.sharePrivateDataAcceptance.toProtobufJSON(options)
                : null,
            callEvent: this.callEvent ? this.callEvent.toProtobufJSON(options) : null,
            table: this.table ? this.table.toProtobufJSON(options) : null,
            paymentInformation: this.paymentInformation
                ? this.paymentInformation.toProtobufJSON(options)
                : null
        };
    }
}
Message.id = 'proto.pub.v1.models.Message';
(function (Message) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["text"] = 1] = "text";
        TypeCase[TypeCase["file"] = 2] = "file";
        TypeCase[TypeCase["sticker"] = 3] = "sticker";
        TypeCase[TypeCase["location"] = 4] = "location";
        TypeCase[TypeCase["liveLocation"] = 5] = "liveLocation";
        TypeCase[TypeCase["poll"] = 6] = "poll";
        TypeCase[TypeCase["transaction"] = 7] = "transaction";
        TypeCase[TypeCase["form"] = 8] = "form";
        TypeCase[TypeCase["persistEvent"] = 9] = "persistEvent";
        TypeCase[TypeCase["buttons"] = 10] = "buttons";
        TypeCase[TypeCase["shareUid"] = 11] = "shareUid";
        TypeCase[TypeCase["formResult"] = 12] = "formResult";
        TypeCase[TypeCase["sharePrivateDataRequest"] = 13] = "sharePrivateDataRequest";
        TypeCase[TypeCase["sharePrivateDataAcceptance"] = 14] = "sharePrivateDataAcceptance";
        TypeCase[TypeCase["callEvent"] = 15] = "callEvent";
        TypeCase[TypeCase["table"] = 16] = "table";
        TypeCase[TypeCase["paymentInformation"] = 17] = "paymentInformation";
    })(TypeCase = Message.TypeCase || (Message.TypeCase = {}));
})(Message || (Message = {}));
/**
 * Message implementation for proto.pub.v1.models.MessageByClient
 */
class MessageByClient {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageByClient to deeply clone from
     */
    constructor(_value) {
        this._type = MessageByClient.TypeCase.none;
        _value = _value || {};
        this.packetId = _value.packetId;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.replyToId = _value.replyToId;
        this.forwardFrom = _value.forwardFrom
            ? new Uid(_value.forwardFrom)
            : undefined;
        this.encrypted = _value.encrypted;
        this.ttl = _value.ttl;
        this.thread = _value.thread;
        this.shouldBeQuiet = _value.shouldBeQuiet;
        this.generatedBy = _value.generatedBy
            ? new Uid(_value.generatedBy)
            : undefined;
        this.text = _value.text ? new Text(_value.text) : undefined;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.sticker = _value.sticker
            ? new Sticker(_value.sticker)
            : undefined;
        this.location = _value.location
            ? new Location(_value.location)
            : undefined;
        this.liveLocation = _value.liveLocation
            ? new LiveLocation(_value.liveLocation)
            : undefined;
        this.poll = _value.poll
            ? new Poll(_value.poll)
            : undefined;
        this.form = _value.form
            ? new Form(_value.form)
            : undefined;
        this.buttons = _value.buttons
            ? new Buttons(_value.buttons)
            : undefined;
        this.shareUid = _value.shareUid ? new ShareUid(_value.shareUid) : undefined;
        this.formResult = _value.formResult
            ? new FormResult(_value.formResult)
            : undefined;
        this.sharePrivateDataRequest = _value.sharePrivateDataRequest
            ? new SharePrivateDataRequest(_value.sharePrivateDataRequest)
            : undefined;
        this.sharePrivateDataAcceptance = _value.sharePrivateDataAcceptance
            ? new SharePrivateDataAcceptance(_value.sharePrivateDataAcceptance)
            : undefined;
        this.callEvent = _value.callEvent
            ? new CallEvent(_value.callEvent)
            : undefined;
        this.table = _value.table
            ? new Table(_value.table)
            : undefined;
        MessageByClient.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageByClient();
        MessageByClient.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.to = _instance.to || undefined;
        _instance.replyToId = _instance.replyToId || '0';
        _instance.forwardFrom = _instance.forwardFrom || undefined;
        _instance.encrypted = _instance.encrypted || false;
        _instance.ttl = _instance.ttl || 0;
        _instance.thread = _instance.thread || '0';
        _instance.shouldBeQuiet = _instance.shouldBeQuiet || false;
        _instance.generatedBy = _instance.generatedBy || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 6:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.replyToId = _reader.readInt64String();
                    break;
                case 8:
                    _instance.forwardFrom = new Uid();
                    _reader.readMessage(_instance.forwardFrom, Uid.deserializeBinaryFromReader);
                    break;
                case 10:
                    _instance.encrypted = _reader.readBool();
                    break;
                case 23:
                    _instance.ttl = _reader.readInt32();
                    break;
                case 28:
                    _instance.thread = _reader.readInt64String();
                    break;
                case 29:
                    _instance.shouldBeQuiet = _reader.readBool();
                    break;
                case 33:
                    _instance.generatedBy = new Uid();
                    _reader.readMessage(_instance.generatedBy, Uid.deserializeBinaryFromReader);
                    break;
                case 11:
                    _instance.text = new Text();
                    _reader.readMessage(_instance.text, Text.deserializeBinaryFromReader);
                    break;
                case 12:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 13:
                    _instance.sticker = new Sticker();
                    _reader.readMessage(_instance.sticker, Sticker.deserializeBinaryFromReader);
                    break;
                case 14:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                case 15:
                    _instance.liveLocation = new LiveLocation();
                    _reader.readMessage(_instance.liveLocation, LiveLocation.deserializeBinaryFromReader);
                    break;
                case 16:
                    _instance.poll = new Poll();
                    _reader.readMessage(_instance.poll, Poll.deserializeBinaryFromReader);
                    break;
                case 18:
                    _instance.form = new Form();
                    _reader.readMessage(_instance.form, Form.deserializeBinaryFromReader);
                    break;
                case 20:
                    _instance.buttons = new Buttons();
                    _reader.readMessage(_instance.buttons, Buttons.deserializeBinaryFromReader);
                    break;
                case 21:
                    _instance.shareUid = new ShareUid();
                    _reader.readMessage(_instance.shareUid, ShareUid.deserializeBinaryFromReader);
                    break;
                case 22:
                    _instance.formResult = new FormResult();
                    _reader.readMessage(_instance.formResult, FormResult.deserializeBinaryFromReader);
                    break;
                case 26:
                    _instance.sharePrivateDataRequest = new SharePrivateDataRequest();
                    _reader.readMessage(_instance.sharePrivateDataRequest, SharePrivateDataRequest
                        .deserializeBinaryFromReader);
                    break;
                case 27:
                    _instance.sharePrivateDataAcceptance = new SharePrivateDataAcceptance();
                    _reader.readMessage(_instance.sharePrivateDataAcceptance, SharePrivateDataAcceptance
                        .deserializeBinaryFromReader);
                    break;
                case 31:
                    _instance.callEvent = new CallEvent();
                    _reader.readMessage(_instance.callEvent, CallEvent.deserializeBinaryFromReader);
                    break;
                case 32:
                    _instance.table = new Table();
                    _reader.readMessage(_instance.table, Table.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageByClient.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.to) {
            _writer.writeMessage(6, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.replyToId) {
            _writer.writeInt64String(7, _instance.replyToId);
        }
        if (_instance.forwardFrom) {
            _writer.writeMessage(8, _instance.forwardFrom, Uid.serializeBinaryToWriter);
        }
        if (_instance.encrypted) {
            _writer.writeBool(10, _instance.encrypted);
        }
        if (_instance.ttl) {
            _writer.writeInt32(23, _instance.ttl);
        }
        if (_instance.thread) {
            _writer.writeInt64String(28, _instance.thread);
        }
        if (_instance.shouldBeQuiet) {
            _writer.writeBool(29, _instance.shouldBeQuiet);
        }
        if (_instance.generatedBy) {
            _writer.writeMessage(33, _instance.generatedBy, Uid.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeMessage(11, _instance.text, Text.serializeBinaryToWriter);
        }
        if (_instance.file) {
            _writer.writeMessage(12, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.sticker) {
            _writer.writeMessage(13, _instance.sticker, Sticker.serializeBinaryToWriter);
        }
        if (_instance.location) {
            _writer.writeMessage(14, _instance.location, Location.serializeBinaryToWriter);
        }
        if (_instance.liveLocation) {
            _writer.writeMessage(15, _instance.liveLocation, LiveLocation.serializeBinaryToWriter);
        }
        if (_instance.poll) {
            _writer.writeMessage(16, _instance.poll, Poll.serializeBinaryToWriter);
        }
        if (_instance.form) {
            _writer.writeMessage(18, _instance.form, Form.serializeBinaryToWriter);
        }
        if (_instance.buttons) {
            _writer.writeMessage(20, _instance.buttons, Buttons.serializeBinaryToWriter);
        }
        if (_instance.shareUid) {
            _writer.writeMessage(21, _instance.shareUid, ShareUid.serializeBinaryToWriter);
        }
        if (_instance.formResult) {
            _writer.writeMessage(22, _instance.formResult, FormResult.serializeBinaryToWriter);
        }
        if (_instance.sharePrivateDataRequest) {
            _writer.writeMessage(26, _instance.sharePrivateDataRequest, SharePrivateDataRequest.serializeBinaryToWriter);
        }
        if (_instance.sharePrivateDataAcceptance) {
            _writer.writeMessage(27, _instance.sharePrivateDataAcceptance, SharePrivateDataAcceptance.serializeBinaryToWriter);
        }
        if (_instance.callEvent) {
            _writer.writeMessage(31, _instance.callEvent, CallEvent.serializeBinaryToWriter);
        }
        if (_instance.table) {
            _writer.writeMessage(32, _instance.table, Table.serializeBinaryToWriter);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get replyToId() {
        return this._replyToId;
    }
    set replyToId(value) {
        this._replyToId = value;
    }
    get forwardFrom() {
        return this._forwardFrom;
    }
    set forwardFrom(value) {
        this._forwardFrom = value;
    }
    get encrypted() {
        return this._encrypted;
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    get ttl() {
        return this._ttl;
    }
    set ttl(value) {
        this._ttl = value;
    }
    get thread() {
        return this._thread;
    }
    set thread(value) {
        this._thread = value;
    }
    get shouldBeQuiet() {
        return this._shouldBeQuiet;
    }
    set shouldBeQuiet(value) {
        this._shouldBeQuiet = value;
    }
    get generatedBy() {
        return this._generatedBy;
    }
    set generatedBy(value) {
        this._generatedBy = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value !== undefined && value !== null) {
            this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.text;
        }
        this._text = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        if (value !== undefined && value !== null) {
            this._text = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.file;
        }
        this._file = value;
    }
    get sticker() {
        return this._sticker;
    }
    set sticker(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.sticker;
        }
        this._sticker = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.location;
        }
        this._location = value;
    }
    get liveLocation() {
        return this._liveLocation;
    }
    set liveLocation(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.liveLocation;
        }
        this._liveLocation = value;
    }
    get poll() {
        return this._poll;
    }
    set poll(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.poll;
        }
        this._poll = value;
    }
    get form() {
        return this._form;
    }
    set form(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.form;
        }
        this._form = value;
    }
    get buttons() {
        return this._buttons;
    }
    set buttons(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.buttons;
        }
        this._buttons = value;
    }
    get shareUid() {
        return this._shareUid;
    }
    set shareUid(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.shareUid;
        }
        this._shareUid = value;
    }
    get formResult() {
        return this._formResult;
    }
    set formResult(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.formResult;
        }
        this._formResult = value;
    }
    get sharePrivateDataRequest() {
        return this._sharePrivateDataRequest;
    }
    set sharePrivateDataRequest(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataAcceptance = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.sharePrivateDataRequest;
        }
        this._sharePrivateDataRequest = value;
    }
    get sharePrivateDataAcceptance() {
        return this._sharePrivateDataAcceptance;
    }
    set sharePrivateDataAcceptance(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._callEvent = this._table = undefined;
            this._type = MessageByClient.TypeCase.sharePrivateDataAcceptance;
        }
        this._sharePrivateDataAcceptance = value;
    }
    get callEvent() {
        return this._callEvent;
    }
    set callEvent(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._table = undefined;
            this._type = MessageByClient.TypeCase.callEvent;
        }
        this._callEvent = value;
    }
    get table() {
        return this._table;
    }
    set table(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._liveLocation = this._poll = this._form = this._buttons = this._shareUid = this._formResult = this._sharePrivateDataRequest = this._sharePrivateDataAcceptance = this._callEvent = undefined;
            this._type = MessageByClient.TypeCase.table;
        }
        this._table = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageByClient.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            to: this.to ? this.to.toObject() : undefined,
            replyToId: this.replyToId,
            forwardFrom: this.forwardFrom ? this.forwardFrom.toObject() : undefined,
            encrypted: this.encrypted,
            ttl: this.ttl,
            thread: this.thread,
            shouldBeQuiet: this.shouldBeQuiet,
            generatedBy: this.generatedBy ? this.generatedBy.toObject() : undefined,
            text: this.text ? this.text.toObject() : undefined,
            file: this.file ? this.file.toObject() : undefined,
            sticker: this.sticker ? this.sticker.toObject() : undefined,
            location: this.location ? this.location.toObject() : undefined,
            liveLocation: this.liveLocation
                ? this.liveLocation.toObject()
                : undefined,
            poll: this.poll ? this.poll.toObject() : undefined,
            form: this.form ? this.form.toObject() : undefined,
            buttons: this.buttons ? this.buttons.toObject() : undefined,
            shareUid: this.shareUid ? this.shareUid.toObject() : undefined,
            formResult: this.formResult ? this.formResult.toObject() : undefined,
            sharePrivateDataRequest: this.sharePrivateDataRequest
                ? this.sharePrivateDataRequest.toObject()
                : undefined,
            sharePrivateDataAcceptance: this.sharePrivateDataAcceptance
                ? this.sharePrivateDataAcceptance.toObject()
                : undefined,
            callEvent: this.callEvent ? this.callEvent.toObject() : undefined,
            table: this.table ? this.table.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            replyToId: this.replyToId,
            forwardFrom: this.forwardFrom
                ? this.forwardFrom.toProtobufJSON(options)
                : null,
            encrypted: this.encrypted,
            ttl: this.ttl,
            thread: this.thread,
            shouldBeQuiet: this.shouldBeQuiet,
            generatedBy: this.generatedBy
                ? this.generatedBy.toProtobufJSON(options)
                : null,
            text: this.text ? this.text.toProtobufJSON(options) : null,
            file: this.file ? this.file.toProtobufJSON(options) : null,
            sticker: this.sticker ? this.sticker.toProtobufJSON(options) : null,
            location: this.location ? this.location.toProtobufJSON(options) : null,
            liveLocation: this.liveLocation
                ? this.liveLocation.toProtobufJSON(options)
                : null,
            poll: this.poll ? this.poll.toProtobufJSON(options) : null,
            form: this.form ? this.form.toProtobufJSON(options) : null,
            buttons: this.buttons ? this.buttons.toProtobufJSON(options) : null,
            shareUid: this.shareUid ? this.shareUid.toProtobufJSON(options) : null,
            formResult: this.formResult
                ? this.formResult.toProtobufJSON(options)
                : null,
            sharePrivateDataRequest: this.sharePrivateDataRequest
                ? this.sharePrivateDataRequest.toProtobufJSON(options)
                : null,
            sharePrivateDataAcceptance: this.sharePrivateDataAcceptance
                ? this.sharePrivateDataAcceptance.toProtobufJSON(options)
                : null,
            callEvent: this.callEvent ? this.callEvent.toProtobufJSON(options) : null,
            table: this.table ? this.table.toProtobufJSON(options) : null
        };
    }
}
MessageByClient.id = 'proto.pub.v1.models.MessageByClient';
(function (MessageByClient) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["text"] = 1] = "text";
        TypeCase[TypeCase["file"] = 2] = "file";
        TypeCase[TypeCase["sticker"] = 3] = "sticker";
        TypeCase[TypeCase["location"] = 4] = "location";
        TypeCase[TypeCase["liveLocation"] = 5] = "liveLocation";
        TypeCase[TypeCase["poll"] = 6] = "poll";
        TypeCase[TypeCase["form"] = 7] = "form";
        TypeCase[TypeCase["buttons"] = 8] = "buttons";
        TypeCase[TypeCase["shareUid"] = 9] = "shareUid";
        TypeCase[TypeCase["formResult"] = 10] = "formResult";
        TypeCase[TypeCase["sharePrivateDataRequest"] = 11] = "sharePrivateDataRequest";
        TypeCase[TypeCase["sharePrivateDataAcceptance"] = 12] = "sharePrivateDataAcceptance";
        TypeCase[TypeCase["callEvent"] = 13] = "callEvent";
        TypeCase[TypeCase["table"] = 14] = "table";
    })(TypeCase = MessageByClient.TypeCase || (MessageByClient.TypeCase = {}));
})(MessageByClient || (MessageByClient = {}));
/**
 * Message implementation for proto.pub.v1.models.MessageByBot
 */
class MessageByBot {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageByBot to deeply clone from
     */
    constructor(_value) {
        this._type = MessageByBot.TypeCase.none;
        _value = _value || {};
        this.packetId = _value.packetId;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.replyToId = _value.replyToId;
        this.forwardFrom = _value.forwardFrom
            ? new Uid(_value.forwardFrom)
            : undefined;
        this.encrypted = _value.encrypted;
        this.ttl = _value.ttl;
        this.thread = _value.thread;
        this.shouldBeQuiet = _value.shouldBeQuiet;
        this.messageMarkup = _value.messageMarkup
            ? new MessageMarkup(_value.messageMarkup)
            : undefined;
        this.text = _value.text ? new Text(_value.text) : undefined;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.sticker = _value.sticker
            ? new Sticker(_value.sticker)
            : undefined;
        this.location = _value.location
            ? new Location(_value.location)
            : undefined;
        this.form = _value.form
            ? new Form(_value.form)
            : undefined;
        this.buttons = _value.buttons
            ? new Buttons(_value.buttons)
            : undefined;
        this.shareUid = _value.shareUid ? new ShareUid(_value.shareUid) : undefined;
        this.sharePrivateDataRequest = _value.sharePrivateDataRequest
            ? new SharePrivateDataRequest(_value.sharePrivateDataRequest)
            : undefined;
        this.botSpecificPersistentEvent = _value.botSpecificPersistentEvent
            ? new BotSpecificPersistentEvent(_value.botSpecificPersistentEvent)
            : undefined;
        this.table = _value.table
            ? new Table(_value.table)
            : undefined;
        MessageByBot.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageByBot();
        MessageByBot.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.replyToId = _instance.replyToId || '0';
        _instance.forwardFrom = _instance.forwardFrom || undefined;
        _instance.encrypted = _instance.encrypted || false;
        _instance.ttl = _instance.ttl || 0;
        _instance.thread = _instance.thread || '0';
        _instance.shouldBeQuiet = _instance.shouldBeQuiet || false;
        _instance.messageMarkup = _instance.messageMarkup || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 5:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.replyToId = _reader.readInt64String();
                    break;
                case 8:
                    _instance.forwardFrom = new Uid();
                    _reader.readMessage(_instance.forwardFrom, Uid.deserializeBinaryFromReader);
                    break;
                case 10:
                    _instance.encrypted = _reader.readBool();
                    break;
                case 23:
                    _instance.ttl = _reader.readInt32();
                    break;
                case 28:
                    _instance.thread = _reader.readInt64String();
                    break;
                case 29:
                    _instance.shouldBeQuiet = _reader.readBool();
                    break;
                case 34:
                    _instance.messageMarkup = new MessageMarkup();
                    _reader.readMessage(_instance.messageMarkup, MessageMarkup.deserializeBinaryFromReader);
                    break;
                case 11:
                    _instance.text = new Text();
                    _reader.readMessage(_instance.text, Text.deserializeBinaryFromReader);
                    break;
                case 12:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 13:
                    _instance.sticker = new Sticker();
                    _reader.readMessage(_instance.sticker, Sticker.deserializeBinaryFromReader);
                    break;
                case 14:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                case 18:
                    _instance.form = new Form();
                    _reader.readMessage(_instance.form, Form.deserializeBinaryFromReader);
                    break;
                case 20:
                    _instance.buttons = new Buttons();
                    _reader.readMessage(_instance.buttons, Buttons.deserializeBinaryFromReader);
                    break;
                case 21:
                    _instance.shareUid = new ShareUid();
                    _reader.readMessage(_instance.shareUid, ShareUid.deserializeBinaryFromReader);
                    break;
                case 26:
                    _instance.sharePrivateDataRequest = new SharePrivateDataRequest();
                    _reader.readMessage(_instance.sharePrivateDataRequest, SharePrivateDataRequest
                        .deserializeBinaryFromReader);
                    break;
                case 19:
                    _instance.botSpecificPersistentEvent = new BotSpecificPersistentEvent();
                    _reader.readMessage(_instance.botSpecificPersistentEvent, BotSpecificPersistentEvent
                        .deserializeBinaryFromReader);
                    break;
                case 32:
                    _instance.table = new Table();
                    _reader.readMessage(_instance.table, Table.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageByBot.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.from) {
            _writer.writeMessage(5, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(6, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.replyToId) {
            _writer.writeInt64String(7, _instance.replyToId);
        }
        if (_instance.forwardFrom) {
            _writer.writeMessage(8, _instance.forwardFrom, Uid.serializeBinaryToWriter);
        }
        if (_instance.encrypted) {
            _writer.writeBool(10, _instance.encrypted);
        }
        if (_instance.ttl) {
            _writer.writeInt32(23, _instance.ttl);
        }
        if (_instance.thread) {
            _writer.writeInt64String(28, _instance.thread);
        }
        if (_instance.shouldBeQuiet) {
            _writer.writeBool(29, _instance.shouldBeQuiet);
        }
        if (_instance.messageMarkup) {
            _writer.writeMessage(34, _instance.messageMarkup, MessageMarkup.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeMessage(11, _instance.text, Text.serializeBinaryToWriter);
        }
        if (_instance.file) {
            _writer.writeMessage(12, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.sticker) {
            _writer.writeMessage(13, _instance.sticker, Sticker.serializeBinaryToWriter);
        }
        if (_instance.location) {
            _writer.writeMessage(14, _instance.location, Location.serializeBinaryToWriter);
        }
        if (_instance.form) {
            _writer.writeMessage(18, _instance.form, Form.serializeBinaryToWriter);
        }
        if (_instance.buttons) {
            _writer.writeMessage(20, _instance.buttons, Buttons.serializeBinaryToWriter);
        }
        if (_instance.shareUid) {
            _writer.writeMessage(21, _instance.shareUid, ShareUid.serializeBinaryToWriter);
        }
        if (_instance.sharePrivateDataRequest) {
            _writer.writeMessage(26, _instance.sharePrivateDataRequest, SharePrivateDataRequest.serializeBinaryToWriter);
        }
        if (_instance.botSpecificPersistentEvent) {
            _writer.writeMessage(19, _instance.botSpecificPersistentEvent, BotSpecificPersistentEvent.serializeBinaryToWriter);
        }
        if (_instance.table) {
            _writer.writeMessage(32, _instance.table, Table.serializeBinaryToWriter);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get replyToId() {
        return this._replyToId;
    }
    set replyToId(value) {
        this._replyToId = value;
    }
    get forwardFrom() {
        return this._forwardFrom;
    }
    set forwardFrom(value) {
        this._forwardFrom = value;
    }
    get encrypted() {
        return this._encrypted;
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    get ttl() {
        return this._ttl;
    }
    set ttl(value) {
        this._ttl = value;
    }
    get thread() {
        return this._thread;
    }
    set thread(value) {
        this._thread = value;
    }
    get shouldBeQuiet() {
        return this._shouldBeQuiet;
    }
    set shouldBeQuiet(value) {
        this._shouldBeQuiet = value;
    }
    get messageMarkup() {
        return this._messageMarkup;
    }
    set messageMarkup(value) {
        this._messageMarkup = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value !== undefined && value !== null) {
            this._file = this._sticker = this._location = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.text;
        }
        this._text = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        if (value !== undefined && value !== null) {
            this._text = this._sticker = this._location = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.file;
        }
        this._file = value;
    }
    get sticker() {
        return this._sticker;
    }
    set sticker(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._location = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.sticker;
        }
        this._sticker = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.location;
        }
        this._location = value;
    }
    get form() {
        return this._form;
    }
    set form(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.form;
        }
        this._form = value;
    }
    get buttons() {
        return this._buttons;
    }
    set buttons(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._form = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.buttons;
        }
        this._buttons = value;
    }
    get shareUid() {
        return this._shareUid;
    }
    set shareUid(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._form = this._buttons = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.shareUid;
        }
        this._shareUid = value;
    }
    get sharePrivateDataRequest() {
        return this._sharePrivateDataRequest;
    }
    set sharePrivateDataRequest(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._form = this._buttons = this._shareUid = this._botSpecificPersistentEvent = this._table = undefined;
            this._type = MessageByBot.TypeCase.sharePrivateDataRequest;
        }
        this._sharePrivateDataRequest = value;
    }
    get botSpecificPersistentEvent() {
        return this._botSpecificPersistentEvent;
    }
    set botSpecificPersistentEvent(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._table = undefined;
            this._type = MessageByBot.TypeCase.botSpecificPersistentEvent;
        }
        this._botSpecificPersistentEvent = value;
    }
    get table() {
        return this._table;
    }
    set table(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._form = this._buttons = this._shareUid = this._sharePrivateDataRequest = this._botSpecificPersistentEvent = undefined;
            this._type = MessageByBot.TypeCase.table;
        }
        this._table = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageByBot.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            replyToId: this.replyToId,
            forwardFrom: this.forwardFrom ? this.forwardFrom.toObject() : undefined,
            encrypted: this.encrypted,
            ttl: this.ttl,
            thread: this.thread,
            shouldBeQuiet: this.shouldBeQuiet,
            messageMarkup: this.messageMarkup
                ? this.messageMarkup.toObject()
                : undefined,
            text: this.text ? this.text.toObject() : undefined,
            file: this.file ? this.file.toObject() : undefined,
            sticker: this.sticker ? this.sticker.toObject() : undefined,
            location: this.location ? this.location.toObject() : undefined,
            form: this.form ? this.form.toObject() : undefined,
            buttons: this.buttons ? this.buttons.toObject() : undefined,
            shareUid: this.shareUid ? this.shareUid.toObject() : undefined,
            sharePrivateDataRequest: this.sharePrivateDataRequest
                ? this.sharePrivateDataRequest.toObject()
                : undefined,
            botSpecificPersistentEvent: this.botSpecificPersistentEvent
                ? this.botSpecificPersistentEvent.toObject()
                : undefined,
            table: this.table ? this.table.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            replyToId: this.replyToId,
            forwardFrom: this.forwardFrom
                ? this.forwardFrom.toProtobufJSON(options)
                : null,
            encrypted: this.encrypted,
            ttl: this.ttl,
            thread: this.thread,
            shouldBeQuiet: this.shouldBeQuiet,
            messageMarkup: this.messageMarkup
                ? this.messageMarkup.toProtobufJSON(options)
                : null,
            text: this.text ? this.text.toProtobufJSON(options) : null,
            file: this.file ? this.file.toProtobufJSON(options) : null,
            sticker: this.sticker ? this.sticker.toProtobufJSON(options) : null,
            location: this.location ? this.location.toProtobufJSON(options) : null,
            form: this.form ? this.form.toProtobufJSON(options) : null,
            buttons: this.buttons ? this.buttons.toProtobufJSON(options) : null,
            shareUid: this.shareUid ? this.shareUid.toProtobufJSON(options) : null,
            sharePrivateDataRequest: this.sharePrivateDataRequest
                ? this.sharePrivateDataRequest.toProtobufJSON(options)
                : null,
            botSpecificPersistentEvent: this.botSpecificPersistentEvent
                ? this.botSpecificPersistentEvent.toProtobufJSON(options)
                : null,
            table: this.table ? this.table.toProtobufJSON(options) : null
        };
    }
}
MessageByBot.id = 'proto.pub.v1.models.MessageByBot';
(function (MessageByBot) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["text"] = 1] = "text";
        TypeCase[TypeCase["file"] = 2] = "file";
        TypeCase[TypeCase["sticker"] = 3] = "sticker";
        TypeCase[TypeCase["location"] = 4] = "location";
        TypeCase[TypeCase["form"] = 5] = "form";
        TypeCase[TypeCase["buttons"] = 6] = "buttons";
        TypeCase[TypeCase["shareUid"] = 7] = "shareUid";
        TypeCase[TypeCase["sharePrivateDataRequest"] = 8] = "sharePrivateDataRequest";
        TypeCase[TypeCase["botSpecificPersistentEvent"] = 9] = "botSpecificPersistentEvent";
        TypeCase[TypeCase["table"] = 10] = "table";
    })(TypeCase = MessageByBot.TypeCase || (MessageByBot.TypeCase = {}));
})(MessageByBot || (MessageByBot = {}));

/**
 * Message implementation for proto.pub.v1.bot.GetInfoReq
 */
class GetInfoReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetInfoReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.bot = _value.bot ? new Uid(_value.bot) : undefined;
        GetInfoReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetInfoReq();
        GetInfoReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.bot = _instance.bot || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.bot = new Uid();
                    _reader.readMessage(_instance.bot, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetInfoReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.bot) {
            _writer.writeMessage(1, _instance.bot, Uid.serializeBinaryToWriter);
        }
    }
    get bot() {
        return this._bot;
    }
    set bot(value) {
        this._bot = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetInfoReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            bot: this.bot ? this.bot.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            bot: this.bot ? this.bot.toProtobufJSON(options) : null
        };
    }
}
GetInfoReq.id = 'proto.pub.v1.bot.GetInfoReq';
/**
 * Message implementation for proto.pub.v1.bot.GetInfoRes
 */
class GetInfoRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetInfoRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.description = _value.description;
        (this.commands = _value.commands
            ? Object.keys(_value.commands).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.commands[k] })), {})
            : {}),
            (this.isOwner = _value.isOwner);
        this.isSupportingInlineQueries = _value.isSupportingInlineQueries;
        this.canBeAddInGroupsAndChannels = _value.canBeAddInGroupsAndChannels;
        GetInfoRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetInfoRes();
        GetInfoRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.description = _instance.description || '';
        _instance.commands = _instance.commands || {};
        _instance.isOwner = _instance.isOwner || false;
        _instance.isSupportingInlineQueries =
            _instance.isSupportingInlineQueries || false;
        _instance.canBeAddInGroupsAndChannels =
            _instance.canBeAddInGroupsAndChannels || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.description = _reader.readString();
                    break;
                case 3:
                    const msg_3 = {};
                    _reader.readMessage(msg_3, GetInfoRes.CommandsEntry.deserializeBinaryFromReader);
                    _instance.commands = _instance.commands || {};
                    _instance.commands[msg_3.key] = msg_3.value;
                    break;
                case 4:
                    _instance.isOwner = _reader.readBool();
                    break;
                case 5:
                    _instance.isSupportingInlineQueries = _reader.readBool();
                    break;
                case 6:
                    _instance.canBeAddInGroupsAndChannels = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetInfoRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.description) {
            _writer.writeString(2, _instance.description);
        }
        if (!!_instance.commands) {
            const keys_3 = Object.keys(_instance.commands);
            if (keys_3.length) {
                const repeated_3 = keys_3
                    .map(key => ({ key: key, value: _instance.commands[key] }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(3, repeated_3, GetInfoRes.CommandsEntry.serializeBinaryToWriter);
            }
        }
        if (_instance.isOwner) {
            _writer.writeBool(4, _instance.isOwner);
        }
        if (_instance.isSupportingInlineQueries) {
            _writer.writeBool(5, _instance.isSupportingInlineQueries);
        }
        if (_instance.canBeAddInGroupsAndChannels) {
            _writer.writeBool(6, _instance.canBeAddInGroupsAndChannels);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get commands() {
        return this._commands;
    }
    set commands(value) {
        this._commands = value;
    }
    get isOwner() {
        return this._isOwner;
    }
    set isOwner(value) {
        this._isOwner = value;
    }
    get isSupportingInlineQueries() {
        return this._isSupportingInlineQueries;
    }
    set isSupportingInlineQueries(value) {
        this._isSupportingInlineQueries = value;
    }
    get canBeAddInGroupsAndChannels() {
        return this._canBeAddInGroupsAndChannels;
    }
    set canBeAddInGroupsAndChannels(value) {
        this._canBeAddInGroupsAndChannels = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetInfoRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            description: this.description,
            commands: this.commands
                ? Object.keys(this.commands).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.commands[k] })), {})
                : {},
            isOwner: this.isOwner,
            isSupportingInlineQueries: this.isSupportingInlineQueries,
            canBeAddInGroupsAndChannels: this.canBeAddInGroupsAndChannels
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            description: this.description,
            commands: this.commands
                ? Object.keys(this.commands).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.commands[k] })), {})
                : {},
            isOwner: this.isOwner,
            isSupportingInlineQueries: this.isSupportingInlineQueries,
            canBeAddInGroupsAndChannels: this.canBeAddInGroupsAndChannels
        };
    }
}
GetInfoRes.id = 'proto.pub.v1.bot.GetInfoRes';
(function (GetInfoRes) {
    /**
     * Message implementation for proto.pub.v1.bot.CommandsEntry
     */
    class CommandsEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of CommandsEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value;
            CommandsEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new CommandsEntry();
            CommandsEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            CommandsEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeString(2, _instance.value);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            CommandsEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value
            };
        }
    }
    CommandsEntry.id = 'proto.pub.v1.bot.CommandsEntry';
    GetInfoRes.CommandsEntry = CommandsEntry;
})(GetInfoRes || (GetInfoRes = {}));
/**
 * Message implementation for proto.pub.v1.bot.AddAvatarReq
 */
class AddAvatarReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = _value.avatar
            ? new Avatar(_value.avatar)
            : undefined;
        AddAvatarReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddAvatarReq$1();
        AddAvatarReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.avatar = new Avatar();
                    _reader.readMessage(_instance.avatar, Avatar.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddAvatarReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar) {
            _writer.writeMessage(1, _instance.avatar, Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddAvatarReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: this.avatar ? this.avatar.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null
        };
    }
}
AddAvatarReq$1.id = 'proto.pub.v1.bot.AddAvatarReq';
/**
 * Message implementation for proto.pub.v1.bot.AddAvatarRes
 */
class AddAvatarRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        AddAvatarRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddAvatarRes$1();
        AddAvatarRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        AddAvatarRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddAvatarRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
AddAvatarRes$1.id = 'proto.pub.v1.bot.AddAvatarRes';
/**
 * Message implementation for proto.pub.v1.bot.RemoveAvatarReq
 */
class RemoveAvatarReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = _value.avatar
            ? new Avatar(_value.avatar)
            : undefined;
        RemoveAvatarReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveAvatarReq$1();
        RemoveAvatarReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.avatar = new Avatar();
                    _reader.readMessage(_instance.avatar, Avatar.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveAvatarReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar) {
            _writer.writeMessage(1, _instance.avatar, Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveAvatarReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: this.avatar ? this.avatar.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null
        };
    }
}
RemoveAvatarReq$1.id = 'proto.pub.v1.bot.RemoveAvatarReq';
/**
 * Message implementation for proto.pub.v1.bot.RemoveAvatarRes
 */
class RemoveAvatarRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemoveAvatarRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveAvatarRes$1();
        RemoveAvatarRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemoveAvatarRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveAvatarRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemoveAvatarRes$1.id = 'proto.pub.v1.bot.RemoveAvatarRes';
/**
 * Message implementation for proto.pub.v1.bot.InlineQueryReq
 */
class InlineQueryReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineQueryReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.bot = _value.bot ? new Uid(_value.bot) : undefined;
        this.query = _value.query;
        this.offset = _value.offset;
        this.chat = _value.chat
            ? new Uid(_value.chat)
            : undefined;
        this.location = _value.location
            ? new Location(_value.location)
            : undefined;
        InlineQueryReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineQueryReq();
        InlineQueryReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.bot = _instance.bot || undefined;
        _instance.query = _instance.query || '';
        _instance.offset = _instance.offset || '0';
        _instance.chat = _instance.chat || undefined;
        _instance.location = _instance.location || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.bot = new Uid();
                    _reader.readMessage(_instance.bot, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.query = _reader.readString();
                    break;
                case 5:
                    _instance.offset = _reader.readInt64String();
                    break;
                case 6:
                    _instance.chat = new Uid();
                    _reader.readMessage(_instance.chat, Uid.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineQueryReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.bot) {
            _writer.writeMessage(2, _instance.bot, Uid.serializeBinaryToWriter);
        }
        if (_instance.query) {
            _writer.writeString(3, _instance.query);
        }
        if (_instance.offset) {
            _writer.writeInt64String(5, _instance.offset);
        }
        if (_instance.chat) {
            _writer.writeMessage(6, _instance.chat, Uid.serializeBinaryToWriter);
        }
        if (_instance.location) {
            _writer.writeMessage(7, _instance.location, Location.serializeBinaryToWriter);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get bot() {
        return this._bot;
    }
    set bot(value) {
        this._bot = value;
    }
    get query() {
        return this._query;
    }
    set query(value) {
        this._query = value;
    }
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
    }
    get chat() {
        return this._chat;
    }
    set chat(value) {
        this._chat = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineQueryReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            bot: this.bot ? this.bot.toObject() : undefined,
            query: this.query,
            offset: this.offset,
            chat: this.chat ? this.chat.toObject() : undefined,
            location: this.location ? this.location.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            bot: this.bot ? this.bot.toProtobufJSON(options) : null,
            query: this.query,
            offset: this.offset,
            chat: this.chat ? this.chat.toProtobufJSON(options) : null,
            location: this.location ? this.location.toProtobufJSON(options) : null
        };
    }
}
InlineQueryReq.id = 'proto.pub.v1.bot.InlineQueryReq';
/**
 * Message implementation for proto.pub.v1.bot.InlineQueryRes
 */
class InlineQueryRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineQueryRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.inlineQueryId = _value.inlineQueryId;
        this.results = (_value.results || []).map(m => new InlineQueryResult(m));
        this.cacheTime = _value.cacheTime;
        this.nextOffset = _value.nextOffset;
        InlineQueryRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineQueryRes();
        InlineQueryRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.inlineQueryId = _instance.inlineQueryId || '';
        _instance.results = _instance.results || [];
        _instance.cacheTime = _instance.cacheTime || '0';
        _instance.nextOffset = _instance.nextOffset || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.inlineQueryId = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new InlineQueryResult();
                    _reader.readMessage(messageInitializer2, InlineQueryResult.deserializeBinaryFromReader);
                    (_instance.results = _instance.results || []).push(messageInitializer2);
                    break;
                case 3:
                    _instance.cacheTime = _reader.readInt64String();
                    break;
                case 4:
                    _instance.nextOffset = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineQueryRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.inlineQueryId) {
            _writer.writeString(1, _instance.inlineQueryId);
        }
        if (_instance.results && _instance.results.length) {
            _writer.writeRepeatedMessage(2, _instance.results, InlineQueryResult.serializeBinaryToWriter);
        }
        if (_instance.cacheTime) {
            _writer.writeInt64String(3, _instance.cacheTime);
        }
        if (_instance.nextOffset) {
            _writer.writeInt64String(4, _instance.nextOffset);
        }
    }
    get inlineQueryId() {
        return this._inlineQueryId;
    }
    set inlineQueryId(value) {
        this._inlineQueryId = value;
    }
    get results() {
        return this._results;
    }
    set results(value) {
        this._results = value;
    }
    get cacheTime() {
        return this._cacheTime;
    }
    set cacheTime(value) {
        this._cacheTime = value;
    }
    get nextOffset() {
        return this._nextOffset;
    }
    set nextOffset(value) {
        this._nextOffset = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineQueryRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            inlineQueryId: this.inlineQueryId,
            results: (this.results || []).map(m => m.toObject()),
            cacheTime: this.cacheTime,
            nextOffset: this.nextOffset
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            inlineQueryId: this.inlineQueryId,
            results: (this.results || []).map(m => m.toProtobufJSON(options)),
            cacheTime: this.cacheTime,
            nextOffset: this.nextOffset
        };
    }
}
InlineQueryRes.id = 'proto.pub.v1.bot.InlineQueryRes';
/**
 * Message implementation for proto.pub.v1.bot.InlineQueryResult
 */
class InlineQueryResult {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of InlineQueryResult to deeply clone from
     */
    constructor(_value) {
        this._type = InlineQueryResult.TypeCase.none;
        _value = _value || {};
        this.text = _value.text
            ? new Text(_value.text)
            : undefined;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.sticker = _value.sticker
            ? new File(_value.sticker)
            : undefined;
        this.location = _value.location
            ? new Location(_value.location)
            : undefined;
        this.shareUid = _value.shareUid
            ? new ShareUid(_value.shareUid)
            : undefined;
        this.table = _value.table
            ? new Table(_value.table)
            : undefined;
        InlineQueryResult.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new InlineQueryResult();
        InlineQueryResult.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = new Text();
                    _reader.readMessage(_instance.text, Text.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.sticker = new File();
                    _reader.readMessage(_instance.sticker, File.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.shareUid = new ShareUid();
                    _reader.readMessage(_instance.shareUid, ShareUid.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.table = new Table();
                    _reader.readMessage(_instance.table, Table.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        InlineQueryResult.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeMessage(1, _instance.text, Text.serializeBinaryToWriter);
        }
        if (_instance.file) {
            _writer.writeMessage(2, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.sticker) {
            _writer.writeMessage(3, _instance.sticker, File.serializeBinaryToWriter);
        }
        if (_instance.location) {
            _writer.writeMessage(4, _instance.location, Location.serializeBinaryToWriter);
        }
        if (_instance.shareUid) {
            _writer.writeMessage(5, _instance.shareUid, ShareUid.serializeBinaryToWriter);
        }
        if (_instance.table) {
            _writer.writeMessage(6, _instance.table, Table.serializeBinaryToWriter);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value !== undefined && value !== null) {
            this._file = this._sticker = this._location = this._shareUid = this._table = undefined;
            this._type = InlineQueryResult.TypeCase.text;
        }
        this._text = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        if (value !== undefined && value !== null) {
            this._text = this._sticker = this._location = this._shareUid = this._table = undefined;
            this._type = InlineQueryResult.TypeCase.file;
        }
        this._file = value;
    }
    get sticker() {
        return this._sticker;
    }
    set sticker(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._location = this._shareUid = this._table = undefined;
            this._type = InlineQueryResult.TypeCase.sticker;
        }
        this._sticker = value;
    }
    get location() {
        return this._location;
    }
    set location(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._shareUid = this._table = undefined;
            this._type = InlineQueryResult.TypeCase.location;
        }
        this._location = value;
    }
    get shareUid() {
        return this._shareUid;
    }
    set shareUid(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._table = undefined;
            this._type = InlineQueryResult.TypeCase.shareUid;
        }
        this._shareUid = value;
    }
    get table() {
        return this._table;
    }
    set table(value) {
        if (value !== undefined && value !== null) {
            this._text = this._file = this._sticker = this._location = this._shareUid = undefined;
            this._type = InlineQueryResult.TypeCase.table;
        }
        this._table = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        InlineQueryResult.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text ? this.text.toObject() : undefined,
            file: this.file ? this.file.toObject() : undefined,
            sticker: this.sticker ? this.sticker.toObject() : undefined,
            location: this.location ? this.location.toObject() : undefined,
            shareUid: this.shareUid ? this.shareUid.toObject() : undefined,
            table: this.table ? this.table.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text ? this.text.toProtobufJSON(options) : null,
            file: this.file ? this.file.toProtobufJSON(options) : null,
            sticker: this.sticker ? this.sticker.toProtobufJSON(options) : null,
            location: this.location ? this.location.toProtobufJSON(options) : null,
            shareUid: this.shareUid ? this.shareUid.toProtobufJSON(options) : null,
            table: this.table ? this.table.toProtobufJSON(options) : null
        };
    }
}
InlineQueryResult.id = 'proto.pub.v1.bot.InlineQueryResult';
(function (InlineQueryResult) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["text"] = 1] = "text";
        TypeCase[TypeCase["file"] = 2] = "file";
        TypeCase[TypeCase["sticker"] = 3] = "sticker";
        TypeCase[TypeCase["location"] = 4] = "location";
        TypeCase[TypeCase["shareUid"] = 5] = "shareUid";
        TypeCase[TypeCase["table"] = 6] = "table";
    })(TypeCase = InlineQueryResult.TypeCase || (InlineQueryResult.TypeCase = {}));
})(InlineQueryResult || (InlineQueryResult = {}));
/**
 * Message implementation for proto.pub.v1.bot.FormQueryReq
 */
class FormQueryReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FormQueryReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.bot = _value.bot ? new Uid(_value.bot) : undefined;
        this.messagePacketId = _value.messagePacketId;
        this.messageId = _value.messageId;
        this.formId = _value.formId;
        this.fieldId = _value.fieldId;
        this.query = _value.query;
        this.offset = _value.offset;
        FormQueryReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FormQueryReq();
        FormQueryReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.bot = _instance.bot || undefined;
        _instance.messagePacketId = _instance.messagePacketId || '';
        _instance.messageId = _instance.messageId || '0';
        _instance.formId = _instance.formId || '';
        _instance.fieldId = _instance.fieldId || '';
        _instance.query = _instance.query || '';
        _instance.offset = _instance.offset || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.bot = new Uid();
                    _reader.readMessage(_instance.bot, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.messagePacketId = _reader.readString();
                    break;
                case 4:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 5:
                    _instance.formId = _reader.readString();
                    break;
                case 6:
                    _instance.fieldId = _reader.readString();
                    break;
                case 7:
                    _instance.query = _reader.readString();
                    break;
                case 8:
                    _instance.offset = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FormQueryReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.bot) {
            _writer.writeMessage(2, _instance.bot, Uid.serializeBinaryToWriter);
        }
        if (_instance.messagePacketId) {
            _writer.writeString(3, _instance.messagePacketId);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(4, _instance.messageId);
        }
        if (_instance.formId) {
            _writer.writeString(5, _instance.formId);
        }
        if (_instance.fieldId) {
            _writer.writeString(6, _instance.fieldId);
        }
        if (_instance.query) {
            _writer.writeString(7, _instance.query);
        }
        if (_instance.offset) {
            _writer.writeInt64String(8, _instance.offset);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get bot() {
        return this._bot;
    }
    set bot(value) {
        this._bot = value;
    }
    get messagePacketId() {
        return this._messagePacketId;
    }
    set messagePacketId(value) {
        this._messagePacketId = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get formId() {
        return this._formId;
    }
    set formId(value) {
        this._formId = value;
    }
    get fieldId() {
        return this._fieldId;
    }
    set fieldId(value) {
        this._fieldId = value;
    }
    get query() {
        return this._query;
    }
    set query(value) {
        this._query = value;
    }
    get offset() {
        return this._offset;
    }
    set offset(value) {
        this._offset = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FormQueryReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            bot: this.bot ? this.bot.toObject() : undefined,
            messagePacketId: this.messagePacketId,
            messageId: this.messageId,
            formId: this.formId,
            fieldId: this.fieldId,
            query: this.query,
            offset: this.offset
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            bot: this.bot ? this.bot.toProtobufJSON(options) : null,
            messagePacketId: this.messagePacketId,
            messageId: this.messageId,
            formId: this.formId,
            fieldId: this.fieldId,
            query: this.query,
            offset: this.offset
        };
    }
}
FormQueryReq.id = 'proto.pub.v1.bot.FormQueryReq';
/**
 * Message implementation for proto.pub.v1.bot.FormQueryRes
 */
class FormQueryRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FormQueryRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.formQueryId = _value.formQueryId;
        this.results = (_value.results || []).map(m => new FormQueryResult(m));
        this.cacheTime = _value.cacheTime;
        this.isPersonal = _value.isPersonal;
        this.nextOffset = _value.nextOffset;
        FormQueryRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FormQueryRes();
        FormQueryRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.formQueryId = _instance.formQueryId || '';
        _instance.results = _instance.results || [];
        _instance.cacheTime = _instance.cacheTime || '0';
        _instance.isPersonal = _instance.isPersonal || false;
        _instance.nextOffset = _instance.nextOffset || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.formQueryId = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new FormQueryResult();
                    _reader.readMessage(messageInitializer2, FormQueryResult.deserializeBinaryFromReader);
                    (_instance.results = _instance.results || []).push(messageInitializer2);
                    break;
                case 3:
                    _instance.cacheTime = _reader.readInt64String();
                    break;
                case 4:
                    _instance.isPersonal = _reader.readBool();
                    break;
                case 5:
                    _instance.nextOffset = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FormQueryRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.formQueryId) {
            _writer.writeString(1, _instance.formQueryId);
        }
        if (_instance.results && _instance.results.length) {
            _writer.writeRepeatedMessage(2, _instance.results, FormQueryResult.serializeBinaryToWriter);
        }
        if (_instance.cacheTime) {
            _writer.writeInt64String(3, _instance.cacheTime);
        }
        if (_instance.isPersonal) {
            _writer.writeBool(4, _instance.isPersonal);
        }
        if (_instance.nextOffset) {
            _writer.writeInt64String(5, _instance.nextOffset);
        }
    }
    get formQueryId() {
        return this._formQueryId;
    }
    set formQueryId(value) {
        this._formQueryId = value;
    }
    get results() {
        return this._results;
    }
    set results(value) {
        this._results = value;
    }
    get cacheTime() {
        return this._cacheTime;
    }
    set cacheTime(value) {
        this._cacheTime = value;
    }
    get isPersonal() {
        return this._isPersonal;
    }
    set isPersonal(value) {
        this._isPersonal = value;
    }
    get nextOffset() {
        return this._nextOffset;
    }
    set nextOffset(value) {
        this._nextOffset = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FormQueryRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            formQueryId: this.formQueryId,
            results: (this.results || []).map(m => m.toObject()),
            cacheTime: this.cacheTime,
            isPersonal: this.isPersonal,
            nextOffset: this.nextOffset
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            formQueryId: this.formQueryId,
            results: (this.results || []).map(m => m.toProtobufJSON(options)),
            cacheTime: this.cacheTime,
            isPersonal: this.isPersonal,
            nextOffset: this.nextOffset
        };
    }
}
FormQueryRes.id = 'proto.pub.v1.bot.FormQueryRes';
/**
 * Message implementation for proto.pub.v1.bot.FormQueryResult
 */
class FormQueryResult {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FormQueryResult to deeply clone from
     */
    constructor(_value) {
        this._type = FormQueryResult.TypeCase.none;
        _value = _value || {};
        this.text = _value.text;
        FormQueryResult.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FormQueryResult();
        FormQueryResult.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FormQueryResult.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text || _instance.text === '') {
            _writer.writeString(1, _instance.text);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        if (value !== undefined && value !== null) {
            this._type = FormQueryResult.TypeCase.text;
        }
        this._text = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FormQueryResult.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text === null || this.text === undefined ? null : this.text
        };
    }
}
FormQueryResult.id = 'proto.pub.v1.bot.FormQueryResult';
(function (FormQueryResult) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["text"] = 1] = "text";
    })(TypeCase = FormQueryResult.TypeCase || (FormQueryResult.TypeCase = {}));
})(FormQueryResult || (FormQueryResult = {}));
/**
 * Message implementation for proto.pub.v1.bot.CallbackQueryReq
 */
class CallbackQueryReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallbackQueryReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.bot = _value.bot ? new Uid(_value.bot) : undefined;
        this.messagePacketId = _value.messagePacketId;
        this.messageId = _value.messageId;
        this.data = _value.data;
        CallbackQueryReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallbackQueryReq();
        CallbackQueryReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.bot = _instance.bot || undefined;
        _instance.messagePacketId = _instance.messagePacketId || '';
        _instance.messageId = _instance.messageId || '0';
        _instance.data = _instance.data || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.bot = new Uid();
                    _reader.readMessage(_instance.bot, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.messagePacketId = _reader.readString();
                    break;
                case 4:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 5:
                    _instance.data = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallbackQueryReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.bot) {
            _writer.writeMessage(2, _instance.bot, Uid.serializeBinaryToWriter);
        }
        if (_instance.messagePacketId) {
            _writer.writeString(3, _instance.messagePacketId);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(4, _instance.messageId);
        }
        if (_instance.data) {
            _writer.writeString(5, _instance.data);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get bot() {
        return this._bot;
    }
    set bot(value) {
        this._bot = value;
    }
    get messagePacketId() {
        return this._messagePacketId;
    }
    set messagePacketId(value) {
        this._messagePacketId = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get data() {
        return this._data;
    }
    set data(value) {
        this._data = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallbackQueryReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            bot: this.bot ? this.bot.toObject() : undefined,
            messagePacketId: this.messagePacketId,
            messageId: this.messageId,
            data: this.data
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            bot: this.bot ? this.bot.toProtobufJSON(options) : null,
            messagePacketId: this.messagePacketId,
            messageId: this.messageId,
            data: this.data
        };
    }
}
CallbackQueryReq.id = 'proto.pub.v1.bot.CallbackQueryReq';
/**
 * Message implementation for proto.pub.v1.bot.CallbackQueryRes
 */
class CallbackQueryRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CallbackQueryRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.callbackQueryId = _value.callbackQueryId;
        this.text = _value.text;
        this.showAlert = _value.showAlert;
        CallbackQueryRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CallbackQueryRes();
        CallbackQueryRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.callbackQueryId = _instance.callbackQueryId || '';
        _instance.text = _instance.text || '';
        _instance.showAlert = _instance.showAlert || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.callbackQueryId = _reader.readString();
                    break;
                case 2:
                    _instance.text = _reader.readString();
                    break;
                case 3:
                    _instance.showAlert = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CallbackQueryRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.callbackQueryId) {
            _writer.writeString(1, _instance.callbackQueryId);
        }
        if (_instance.text) {
            _writer.writeString(2, _instance.text);
        }
        if (_instance.showAlert) {
            _writer.writeBool(3, _instance.showAlert);
        }
    }
    get callbackQueryId() {
        return this._callbackQueryId;
    }
    set callbackQueryId(value) {
        this._callbackQueryId = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get showAlert() {
        return this._showAlert;
    }
    set showAlert(value) {
        this._showAlert = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CallbackQueryRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            callbackQueryId: this.callbackQueryId,
            text: this.text,
            showAlert: this.showAlert
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            callbackQueryId: this.callbackQueryId,
            text: this.text,
            showAlert: this.showAlert
        };
    }
}
CallbackQueryRes.id = 'proto.pub.v1.bot.CallbackQueryRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for BotService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_BOT_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_BOT_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.bot.BotService
 */
class BotServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.bot.BotService/GetInfo
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetInfoRes>>
             */
            getInfo: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.bot.BotService/GetInfo',
                    requestData,
                    requestMetadata,
                    requestClass: GetInfoReq,
                    responseClass: GetInfoRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.bot.BotService/AddAvatar
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AddAvatarRes>>
             */
            addAvatar: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.bot.BotService/AddAvatar',
                    requestData,
                    requestMetadata,
                    requestClass: AddAvatarReq$1,
                    responseClass: AddAvatarRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.bot.BotService/RemoveAvatar
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RemoveAvatarRes>>
             */
            removeAvatar: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.bot.BotService/RemoveAvatar',
                    requestData,
                    requestMetadata,
                    requestClass: RemoveAvatarReq$1,
                    responseClass: RemoveAvatarRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.bot.BotService/InlineQuery
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.InlineQueryRes>>
             */
            inlineQuery: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.bot.BotService/InlineQuery',
                    requestData,
                    requestMetadata,
                    requestClass: InlineQueryReq,
                    responseClass: InlineQueryRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.bot.BotService/FormQuery
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FormQueryRes>>
             */
            formQuery: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.bot.BotService/FormQuery',
                    requestData,
                    requestMetadata,
                    requestClass: FormQueryReq,
                    responseClass: FormQueryRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.bot.BotService/CallbackQuery
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CallbackQueryRes>>
             */
            callbackQuery: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.bot.BotService/CallbackQuery',
                    requestData,
                    requestMetadata,
                    requestClass: CallbackQueryReq,
                    responseClass: CallbackQueryRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.bot.BotService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.bot.BotService/GetInfo
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetInfoRes>
     */
    getInfo(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getInfo(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.bot.BotService/AddAvatar
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AddAvatarRes>
     */
    addAvatar(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addAvatar(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.bot.BotService/RemoveAvatar
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RemoveAvatarRes>
     */
    removeAvatar(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removeAvatar(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.bot.BotService/InlineQuery
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.InlineQueryRes>
     */
    inlineQuery(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .inlineQuery(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.bot.BotService/FormQuery
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FormQueryRes>
     */
    formQuery(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .formQuery(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.bot.BotService/CallbackQuery
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CallbackQueryRes>
     */
    callbackQuery(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .callbackQuery(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
BotServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: BotServiceClient, deps: [{ token: GRPC_BOT_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
BotServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: BotServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: BotServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_BOT_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

var ChannelType;
(function (ChannelType) {
    ChannelType[ChannelType["PRIVATE"] = 0] = "PRIVATE";
    ChannelType[ChannelType["PUBLIC"] = 1] = "PUBLIC";
})(ChannelType || (ChannelType = {}));
/**
 * Message implementation for proto.pub.v1.channel.ChannelInfo
 */
class ChannelInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ChannelInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.info = _value.info;
        this.type = _value.type;
        this.id = _value.id;
        ChannelInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ChannelInfo();
        ChannelInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.info = _instance.info || '';
        _instance.type = _instance.type || 0;
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.info = _reader.readString();
                    break;
                case 3:
                    _instance.type = _reader.readEnum();
                    break;
                case 4:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ChannelInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.info) {
            _writer.writeString(2, _instance.info);
        }
        if (_instance.type) {
            _writer.writeEnum(3, _instance.type);
        }
        if (_instance.id) {
            _writer.writeString(4, _instance.id);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ChannelInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            info: this.info,
            type: this.type,
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            info: this.info,
            type: ChannelType[this.type === null || this.type === undefined ? 0 : this.type],
            id: this.id
        };
    }
}
ChannelInfo.id = 'proto.pub.v1.channel.ChannelInfo';
/**
 * Message implementation for proto.pub.v1.channel.ChannelAdmin
 */
class ChannelAdmin {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ChannelAdmin to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.admin = _value.admin
            ? new Uid(_value.admin)
            : undefined;
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        ChannelAdmin.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ChannelAdmin();
        ChannelAdmin.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.admin = _instance.admin || undefined;
        _instance.channel = _instance.channel || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.admin = new Uid();
                    _reader.readMessage(_instance.admin, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ChannelAdmin.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.admin) {
            _writer.writeMessage(1, _instance.admin, Uid.serializeBinaryToWriter);
        }
        if (_instance.channel) {
            _writer.writeMessage(2, _instance.channel, Uid.serializeBinaryToWriter);
        }
    }
    get admin() {
        return this._admin;
    }
    set admin(value) {
        this._admin = value;
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ChannelAdmin.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            admin: this.admin ? this.admin.toObject() : undefined,
            channel: this.channel ? this.channel.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            admin: this.admin ? this.admin.toProtobufJSON(options) : null,
            channel: this.channel ? this.channel.toProtobufJSON(options) : null
        };
    }
}
ChannelAdmin.id = 'proto.pub.v1.channel.ChannelAdmin';
/**
 * Message implementation for proto.pub.v1.channel.CreateChannelReq
 */
class CreateChannelReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateChannelReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.name = _value.name;
        this.info = _value.info;
        this.type = _value.type;
        CreateChannelReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateChannelReq();
        CreateChannelReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.name = _instance.name || '';
        _instance.info = _instance.info || '';
        _instance.type = _instance.type || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.name = _reader.readString();
                    break;
                case 3:
                    _instance.info = _reader.readString();
                    break;
                case 4:
                    _instance.type = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateChannelReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.name) {
            _writer.writeString(2, _instance.name);
        }
        if (_instance.info) {
            _writer.writeString(3, _instance.info);
        }
        if (_instance.type) {
            _writer.writeEnum(4, _instance.type);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateChannelReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            name: this.name,
            info: this.info,
            type: this.type
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            name: this.name,
            info: this.info,
            type: ChannelType[this.type === null || this.type === undefined ? 0 : this.type]
        };
    }
}
CreateChannelReq.id = 'proto.pub.v1.channel.CreateChannelReq';
/**
 * Message implementation for proto.pub.v1.channel.CreateChannelRes
 */
class CreateChannelRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateChannelRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        CreateChannelRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateChannelRes();
        CreateChannelRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateChannelRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateChannelRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
CreateChannelRes.id = 'proto.pub.v1.channel.CreateChannelRes';
/**
 * Message implementation for proto.pub.v1.channel.ModifyChannelReq
 */
class ModifyChannelReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ModifyChannelReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.info = _value.info ? new ChannelInfo(_value.info) : undefined;
        ModifyChannelReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ModifyChannelReq();
        ModifyChannelReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.info = _instance.info || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.info = new ChannelInfo();
                    _reader.readMessage(_instance.info, ChannelInfo.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ModifyChannelReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.info) {
            _writer.writeMessage(2, _instance.info, ChannelInfo.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ModifyChannelReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            info: this.info ? this.info.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            info: this.info ? this.info.toProtobufJSON(options) : null
        };
    }
}
ModifyChannelReq.id = 'proto.pub.v1.channel.ModifyChannelReq';
/**
 * Message implementation for proto.pub.v1.channel.ModifyChannelRes
 */
class ModifyChannelRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ModifyChannelRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ModifyChannelRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ModifyChannelRes();
        ModifyChannelRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ModifyChannelRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ModifyChannelRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ModifyChannelRes.id = 'proto.pub.v1.channel.ModifyChannelRes';
/**
 * Message implementation for proto.pub.v1.channel.ChangeRoleReq
 */
class ChangeRoleReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ChangeRoleReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        this.member = _value.member
            ? new Member(_value.member)
            : undefined;
        ChangeRoleReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ChangeRoleReq$1();
        ChangeRoleReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
        _instance.member = _instance.member || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.member = new Member();
                    _reader.readMessage(_instance.member, Member.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ChangeRoleReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
        if (_instance.member) {
            _writer.writeMessage(2, _instance.member, Member.serializeBinaryToWriter);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    get member() {
        return this._member;
    }
    set member(value) {
        this._member = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ChangeRoleReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined,
            member: this.member ? this.member.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null,
            member: this.member ? this.member.toProtobufJSON(options) : null
        };
    }
}
ChangeRoleReq$1.id = 'proto.pub.v1.channel.ChangeRoleReq';
/**
 * Message implementation for proto.pub.v1.channel.ChangeRoleRes
 */
class ChangeRoleRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ChangeRoleRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ChangeRoleRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ChangeRoleRes$1();
        ChangeRoleRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ChangeRoleRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ChangeRoleRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ChangeRoleRes$1.id = 'proto.pub.v1.channel.ChangeRoleRes';
/**
 * Message implementation for proto.pub.v1.channel.RemoveChannelReq
 */
class RemoveChannelReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveChannelReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        RemoveChannelReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveChannelReq();
        RemoveChannelReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveChannelReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveChannelReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
RemoveChannelReq.id = 'proto.pub.v1.channel.RemoveChannelReq';
/**
 * Message implementation for proto.pub.v1.channel.RemoveChannelRes
 */
class RemoveChannelRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveChannelRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemoveChannelRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveChannelRes();
        RemoveChannelRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemoveChannelRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveChannelRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemoveChannelRes.id = 'proto.pub.v1.channel.RemoveChannelRes';
/**
 * Message implementation for proto.pub.v1.channel.AddMembersReq
 */
class AddMembersReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddMembersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        this.members = (_value.members || []).map(m => new Member(m));
        AddMembersReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddMembersReq$1();
        AddMembersReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
        _instance.members = _instance.members || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    const messageInitializer2 = new Member();
                    _reader.readMessage(messageInitializer2, Member.deserializeBinaryFromReader);
                    (_instance.members = _instance.members || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddMembersReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
        if (_instance.members && _instance.members.length) {
            _writer.writeRepeatedMessage(2, _instance.members, Member.serializeBinaryToWriter);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    get members() {
        return this._members;
    }
    set members(value) {
        this._members = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddMembersReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined,
            members: (this.members || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null,
            members: (this.members || []).map(m => m.toProtobufJSON(options))
        };
    }
}
AddMembersReq$1.id = 'proto.pub.v1.channel.AddMembersReq';
/**
 * Message implementation for proto.pub.v1.channel.AddMembersRes
 */
class AddMembersRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddMembersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        AddMembersRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddMembersRes$1();
        AddMembersRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        AddMembersRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddMembersRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
AddMembersRes$1.id = 'proto.pub.v1.channel.AddMembersRes';
/**
 * Message implementation for proto.pub.v1.channel.KickMembersReq
 */
class KickMembersReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of KickMembersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        this.members = (_value.members || []).map(m => new Uid(m));
        KickMembersReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new KickMembersReq$1();
        KickMembersReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
        _instance.members = _instance.members || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    const messageInitializer2 = new Uid();
                    _reader.readMessage(messageInitializer2, Uid.deserializeBinaryFromReader);
                    (_instance.members = _instance.members || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        KickMembersReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
        if (_instance.members && _instance.members.length) {
            _writer.writeRepeatedMessage(2, _instance.members, Uid.serializeBinaryToWriter);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    get members() {
        return this._members;
    }
    set members(value) {
        this._members = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        KickMembersReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined,
            members: (this.members || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null,
            members: (this.members || []).map(m => m.toProtobufJSON(options))
        };
    }
}
KickMembersReq$1.id = 'proto.pub.v1.channel.KickMembersReq';
/**
 * Message implementation for proto.pub.v1.channel.KickMembersRes
 */
class KickMembersRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of KickMembersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        KickMembersRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new KickMembersRes$1();
        KickMembersRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        KickMembersRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        KickMembersRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
KickMembersRes$1.id = 'proto.pub.v1.channel.KickMembersRes';
/**
 * Message implementation for proto.pub.v1.channel.BanMemberReq
 */
class BanMemberReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BanMemberReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        this.member = _value.member
            ? new Uid(_value.member)
            : undefined;
        BanMemberReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BanMemberReq$1();
        BanMemberReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
        _instance.member = _instance.member || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.member = new Uid();
                    _reader.readMessage(_instance.member, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BanMemberReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
        if (_instance.member) {
            _writer.writeMessage(2, _instance.member, Uid.serializeBinaryToWriter);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    get member() {
        return this._member;
    }
    set member(value) {
        this._member = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BanMemberReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined,
            member: this.member ? this.member.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null,
            member: this.member ? this.member.toProtobufJSON(options) : null
        };
    }
}
BanMemberReq$1.id = 'proto.pub.v1.channel.BanMemberReq';
/**
 * Message implementation for proto.pub.v1.channel.BanMemberRes
 */
class BanMemberRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BanMemberRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        BanMemberRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BanMemberRes$1();
        BanMemberRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        BanMemberRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BanMemberRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
BanMemberRes$1.id = 'proto.pub.v1.channel.BanMemberRes';
/**
 * Message implementation for proto.pub.v1.channel.UnbanMemberReq
 */
class UnbanMemberReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnbanMemberReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        this.member = _value.member
            ? new Uid(_value.member)
            : undefined;
        UnbanMemberReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnbanMemberReq$1();
        UnbanMemberReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
        _instance.member = _instance.member || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.member = new Uid();
                    _reader.readMessage(_instance.member, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UnbanMemberReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
        if (_instance.member) {
            _writer.writeMessage(2, _instance.member, Uid.serializeBinaryToWriter);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    get member() {
        return this._member;
    }
    set member(value) {
        this._member = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnbanMemberReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined,
            member: this.member ? this.member.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null,
            member: this.member ? this.member.toProtobufJSON(options) : null
        };
    }
}
UnbanMemberReq$1.id = 'proto.pub.v1.channel.UnbanMemberReq';
/**
 * Message implementation for proto.pub.v1.channel.UnbanMemberRes
 */
class UnbanMemberRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnbanMemberRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UnbanMemberRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnbanMemberRes$1();
        UnbanMemberRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UnbanMemberRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnbanMemberRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UnbanMemberRes$1.id = 'proto.pub.v1.channel.UnbanMemberRes';
/**
 * Message implementation for proto.pub.v1.channel.GetChannelReq
 */
class GetChannelReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetChannelReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.token = _value.token;
        GetChannelReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetChannelReq();
        GetChannelReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetChannelReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetChannelReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            token: this.token
        };
    }
}
GetChannelReq.id = 'proto.pub.v1.channel.GetChannelReq';
/**
 * Message implementation for proto.pub.v1.channel.GetChannelRes
 */
class GetChannelRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetChannelRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.info = _value.info ? new ChannelInfo(_value.info) : undefined;
        this.population = _value.population;
        this.token = _value.token;
        this.pinMessages = (_value.pinMessages || []).slice();
        this.lastMessageId = _value.lastMessageId;
        this.requesterRole = _value.requesterRole;
        this.roleToken = _value.roleToken;
        GetChannelRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetChannelRes();
        GetChannelRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.info = _instance.info || undefined;
        _instance.population = _instance.population || '0';
        _instance.token = _instance.token || '';
        _instance.pinMessages = _instance.pinMessages || [];
        _instance.lastMessageId = _instance.lastMessageId || '0';
        _instance.requesterRole = _instance.requesterRole || 0;
        _instance.roleToken = _instance.roleToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.info = new ChannelInfo();
                    _reader.readMessage(_instance.info, ChannelInfo.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.population = _reader.readInt64String();
                    break;
                case 4:
                    _instance.token = _reader.readString();
                    break;
                case 5:
                    (_instance.pinMessages = _instance.pinMessages || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                case 6:
                    _instance.lastMessageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.requesterRole = _reader.readEnum();
                    break;
                case 7:
                    _instance.roleToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetChannelRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.info) {
            _writer.writeMessage(1, _instance.info, ChannelInfo.serializeBinaryToWriter);
        }
        if (_instance.population) {
            _writer.writeInt64String(2, _instance.population);
        }
        if (_instance.token) {
            _writer.writeString(4, _instance.token);
        }
        if (_instance.pinMessages && _instance.pinMessages.length) {
            _writer.writePackedInt64String(5, _instance.pinMessages);
        }
        if (_instance.lastMessageId) {
            _writer.writeInt64String(6, _instance.lastMessageId);
        }
        if (_instance.requesterRole) {
            _writer.writeEnum(3, _instance.requesterRole);
        }
        if (_instance.roleToken) {
            _writer.writeString(7, _instance.roleToken);
        }
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    get population() {
        return this._population;
    }
    set population(value) {
        this._population = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    get pinMessages() {
        return this._pinMessages;
    }
    set pinMessages(value) {
        this._pinMessages = value;
    }
    get lastMessageId() {
        return this._lastMessageId;
    }
    set lastMessageId(value) {
        this._lastMessageId = value;
    }
    get requesterRole() {
        return this._requesterRole;
    }
    set requesterRole(value) {
        this._requesterRole = value;
    }
    get roleToken() {
        return this._roleToken;
    }
    set roleToken(value) {
        this._roleToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetChannelRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            info: this.info ? this.info.toObject() : undefined,
            population: this.population,
            token: this.token,
            pinMessages: (this.pinMessages || []).slice(),
            lastMessageId: this.lastMessageId,
            requesterRole: this.requesterRole,
            roleToken: this.roleToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            info: this.info ? this.info.toProtobufJSON(options) : null,
            population: this.population,
            token: this.token,
            pinMessages: (this.pinMessages || []).slice(),
            lastMessageId: this.lastMessageId,
            requesterRole: Role[this.requesterRole === null || this.requesterRole === undefined
                ? 0
                : this.requesterRole],
            roleToken: this.roleToken
        };
    }
}
GetChannelRes.id = 'proto.pub.v1.channel.GetChannelRes';
/**
 * Message implementation for proto.pub.v1.channel.GetMembersReq
 */
class GetMembersReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMembersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        GetMembersReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMembersReq$1();
        GetMembersReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.pointer = _instance.pointer || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.pointer = _reader.readInt32();
                    break;
                case 4:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMembersReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt32(3, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(4, _instance.limit);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMembersReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            pointer: this.pointer,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            limit: this.limit
        };
    }
}
GetMembersReq$1.id = 'proto.pub.v1.channel.GetMembersReq';
/**
 * Message implementation for proto.pub.v1.channel.GetMembersRes
 */
class GetMembersRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMembersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.members = (_value.members || []).map(m => new Member(m));
        this.finished = _value.finished;
        GetMembersRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMembersRes$1();
        GetMembersRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.members = _instance.members || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Member();
                    _reader.readMessage(messageInitializer1, Member.deserializeBinaryFromReader);
                    (_instance.members = _instance.members || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMembersRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.members && _instance.members.length) {
            _writer.writeRepeatedMessage(1, _instance.members, Member.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get members() {
        return this._members;
    }
    set members(value) {
        this._members = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMembersRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            members: (this.members || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            members: (this.members || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
GetMembersRes$1.id = 'proto.pub.v1.channel.GetMembersRes';
/**
 * Message implementation for proto.pub.v1.channel.JoinChannelReq
 */
class JoinChannelReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of JoinChannelReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        this.token = _value.token;
        JoinChannelReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new JoinChannelReq();
        JoinChannelReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        JoinChannelReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        JoinChannelReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined,
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null,
            token: this.token
        };
    }
}
JoinChannelReq.id = 'proto.pub.v1.channel.JoinChannelReq';
/**
 * Message implementation for proto.pub.v1.channel.JoinChannelRes
 */
class JoinChannelRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of JoinChannelRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        JoinChannelRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new JoinChannelRes();
        JoinChannelRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        JoinChannelRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        JoinChannelRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
JoinChannelRes.id = 'proto.pub.v1.channel.JoinChannelRes';
/**
 * Message implementation for proto.pub.v1.channel.LeaveChannelReq
 */
class LeaveChannelReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LeaveChannelReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.channel = _value.channel
            ? new Uid(_value.channel)
            : undefined;
        LeaveChannelReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LeaveChannelReq();
        LeaveChannelReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.channel = _instance.channel || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.channel = new Uid();
                    _reader.readMessage(_instance.channel, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        LeaveChannelReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.channel) {
            _writer.writeMessage(1, _instance.channel, Uid.serializeBinaryToWriter);
        }
    }
    get channel() {
        return this._channel;
    }
    set channel(value) {
        this._channel = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LeaveChannelReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            channel: this.channel ? this.channel.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            channel: this.channel ? this.channel.toProtobufJSON(options) : null
        };
    }
}
LeaveChannelReq.id = 'proto.pub.v1.channel.LeaveChannelReq';
/**
 * Message implementation for proto.pub.v1.channel.LeaveChannelRes
 */
class LeaveChannelRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LeaveChannelRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        LeaveChannelRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LeaveChannelRes();
        LeaveChannelRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        LeaveChannelRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LeaveChannelRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
LeaveChannelRes.id = 'proto.pub.v1.channel.LeaveChannelRes';
/**
 * Message implementation for proto.pub.v1.channel.CreateTokenReq
 */
class CreateTokenReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateTokenReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.validUntil = _value.validUntil;
        this.numberOfAvailableJoins = _value.numberOfAvailableJoins;
        CreateTokenReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateTokenReq$1();
        CreateTokenReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.validUntil = _instance.validUntil || '0';
        _instance.numberOfAvailableJoins = _instance.numberOfAvailableJoins || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.validUntil = _reader.readInt64String();
                    break;
                case 3:
                    _instance.numberOfAvailableJoins = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateTokenReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.validUntil) {
            _writer.writeInt64String(2, _instance.validUntil);
        }
        if (_instance.numberOfAvailableJoins) {
            _writer.writeInt64String(3, _instance.numberOfAvailableJoins);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get validUntil() {
        return this._validUntil;
    }
    set validUntil(value) {
        this._validUntil = value;
    }
    get numberOfAvailableJoins() {
        return this._numberOfAvailableJoins;
    }
    set numberOfAvailableJoins(value) {
        this._numberOfAvailableJoins = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateTokenReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            validUntil: this.validUntil,
            numberOfAvailableJoins: this.numberOfAvailableJoins
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            validUntil: this.validUntil,
            numberOfAvailableJoins: this.numberOfAvailableJoins
        };
    }
}
CreateTokenReq$1.id = 'proto.pub.v1.channel.CreateTokenReq';
/**
 * Message implementation for proto.pub.v1.channel.CreateTokenRes
 */
class CreateTokenRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.joinToken = _value.joinToken;
        CreateTokenRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateTokenRes$1();
        CreateTokenRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.joinToken = _instance.joinToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.joinToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateTokenRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.joinToken) {
            _writer.writeString(1, _instance.joinToken);
        }
    }
    get joinToken() {
        return this._joinToken;
    }
    set joinToken(value) {
        this._joinToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateTokenRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            joinToken: this.joinToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            joinToken: this.joinToken
        };
    }
}
CreateTokenRes$1.id = 'proto.pub.v1.channel.CreateTokenRes';
/**
 * Message implementation for proto.pub.v1.channel.DeleteTokenReq
 */
class DeleteTokenReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteTokenReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        DeleteTokenReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteTokenReq$1();
        DeleteTokenReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteTokenReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteTokenReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
DeleteTokenReq$1.id = 'proto.pub.v1.channel.DeleteTokenReq';
/**
 * Message implementation for proto.pub.v1.channel.DeleteTokenRes
 */
class DeleteTokenRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        DeleteTokenRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteTokenRes$1();
        DeleteTokenRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        DeleteTokenRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteTokenRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
DeleteTokenRes$1.id = 'proto.pub.v1.channel.DeleteTokenRes';
/**
 * Message implementation for proto.pub.v1.channel.PinMessageReq
 */
class PinMessageReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PinMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.messageId = _value.messageId;
        PinMessageReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PinMessageReq$1();
        PinMessageReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PinMessageReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PinMessageReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
PinMessageReq$1.id = 'proto.pub.v1.channel.PinMessageReq';
/**
 * Message implementation for proto.pub.v1.channel.PinMessageRes
 */
class PinMessageRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PinMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        PinMessageRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PinMessageRes$1();
        PinMessageRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        PinMessageRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PinMessageRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
PinMessageRes$1.id = 'proto.pub.v1.channel.PinMessageRes';
/**
 * Message implementation for proto.pub.v1.channel.UnpinMessageReq
 */
class UnpinMessageReq$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnpinMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.messageId = _value.messageId;
        UnpinMessageReq$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnpinMessageReq$1();
        UnpinMessageReq$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UnpinMessageReq$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnpinMessageReq$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
UnpinMessageReq$1.id = 'proto.pub.v1.channel.UnpinMessageReq';
/**
 * Message implementation for proto.pub.v1.channel.UnpinMessageRes
 */
class UnpinMessageRes$1 {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnpinMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UnpinMessageRes$1.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnpinMessageRes$1();
        UnpinMessageRes$1.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UnpinMessageRes$1.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnpinMessageRes$1.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UnpinMessageRes$1.id = 'proto.pub.v1.channel.UnpinMessageRes';

var channel_pb$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get ChannelType () { return ChannelType; },
    ChannelInfo: ChannelInfo,
    ChannelAdmin: ChannelAdmin,
    CreateChannelReq: CreateChannelReq,
    CreateChannelRes: CreateChannelRes,
    ModifyChannelReq: ModifyChannelReq,
    ModifyChannelRes: ModifyChannelRes,
    ChangeRoleReq: ChangeRoleReq$1,
    ChangeRoleRes: ChangeRoleRes$1,
    RemoveChannelReq: RemoveChannelReq,
    RemoveChannelRes: RemoveChannelRes,
    AddMembersReq: AddMembersReq$1,
    AddMembersRes: AddMembersRes$1,
    KickMembersReq: KickMembersReq$1,
    KickMembersRes: KickMembersRes$1,
    BanMemberReq: BanMemberReq$1,
    BanMemberRes: BanMemberRes$1,
    UnbanMemberReq: UnbanMemberReq$1,
    UnbanMemberRes: UnbanMemberRes$1,
    GetChannelReq: GetChannelReq,
    GetChannelRes: GetChannelRes,
    GetMembersReq: GetMembersReq$1,
    GetMembersRes: GetMembersRes$1,
    JoinChannelReq: JoinChannelReq,
    JoinChannelRes: JoinChannelRes,
    LeaveChannelReq: LeaveChannelReq,
    LeaveChannelRes: LeaveChannelRes,
    CreateTokenReq: CreateTokenReq$1,
    CreateTokenRes: CreateTokenRes$1,
    DeleteTokenReq: DeleteTokenReq$1,
    DeleteTokenRes: DeleteTokenRes$1,
    PinMessageReq: PinMessageReq$1,
    PinMessageRes: PinMessageRes$1,
    UnpinMessageReq: UnpinMessageReq$1,
    UnpinMessageRes: UnpinMessageRes$1
});

/* tslint:disable */
/**
 * Specific GrpcClientSettings for ChannelService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_CHANNEL_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_CHANNEL_SERVICE_CLIENT_SETTINGS');

var channel_pbconf$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GRPC_CHANNEL_SERVICE_CLIENT_SETTINGS: GRPC_CHANNEL_SERVICE_CLIENT_SETTINGS
});

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.channel.ChannelService
 */
class ChannelServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/CreateChannel
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreateChannelRes>>
             */
            createChannel: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/CreateChannel',
                    requestData,
                    requestMetadata,
                    requestClass: CreateChannelReq,
                    responseClass: CreateChannelRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/GetChannel
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetChannelRes>>
             */
            getChannel: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/GetChannel',
                    requestData,
                    requestMetadata,
                    requestClass: GetChannelReq,
                    responseClass: GetChannelRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/ModifyChannel
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ModifyChannelRes>>
             */
            modifyChannel: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/ModifyChannel',
                    requestData,
                    requestMetadata,
                    requestClass: ModifyChannelReq,
                    responseClass: ModifyChannelRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/ChangeRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ChangeRoleRes>>
             */
            changeRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/ChangeRole',
                    requestData,
                    requestMetadata,
                    requestClass: ChangeRoleReq$1,
                    responseClass: ChangeRoleRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/RemoveChannel
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RemoveChannelRes>>
             */
            removeChannel: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/RemoveChannel',
                    requestData,
                    requestMetadata,
                    requestClass: RemoveChannelReq,
                    responseClass: RemoveChannelRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/AddMembers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AddMembersRes>>
             */
            addMembers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/AddMembers',
                    requestData,
                    requestMetadata,
                    requestClass: AddMembersReq$1,
                    responseClass: AddMembersRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/KickMembers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.KickMembersRes>>
             */
            kickMembers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/KickMembers',
                    requestData,
                    requestMetadata,
                    requestClass: KickMembersReq$1,
                    responseClass: KickMembersRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/BanMember
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BanMemberRes>>
             */
            banMember: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/BanMember',
                    requestData,
                    requestMetadata,
                    requestClass: BanMemberReq$1,
                    responseClass: BanMemberRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/UnbanMember
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UnbanMemberRes>>
             */
            unbanMember: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/UnbanMember',
                    requestData,
                    requestMetadata,
                    requestClass: UnbanMemberReq$1,
                    responseClass: UnbanMemberRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/GetMembers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetMembersRes>>
             */
            getMembers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/GetMembers',
                    requestData,
                    requestMetadata,
                    requestClass: GetMembersReq$1,
                    responseClass: GetMembersRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/JoinChannel
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.JoinChannelRes>>
             */
            joinChannel: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/JoinChannel',
                    requestData,
                    requestMetadata,
                    requestClass: JoinChannelReq,
                    responseClass: JoinChannelRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/LeaveChannel
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.LeaveChannelRes>>
             */
            leaveChannel: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/LeaveChannel',
                    requestData,
                    requestMetadata,
                    requestClass: LeaveChannelReq,
                    responseClass: LeaveChannelRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/CreateToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreateTokenRes>>
             */
            createToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/CreateToken',
                    requestData,
                    requestMetadata,
                    requestClass: CreateTokenReq$1,
                    responseClass: CreateTokenRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/DeleteToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.DeleteTokenRes>>
             */
            deleteToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/DeleteToken',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteTokenReq$1,
                    responseClass: DeleteTokenRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/PinMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PinMessageRes>>
             */
            pinMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/PinMessage',
                    requestData,
                    requestMetadata,
                    requestClass: PinMessageReq$1,
                    responseClass: PinMessageRes$1
                });
            },
            /**
             * Unary call: /proto.pub.v1.channel.ChannelService/UnpinMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UnpinMessageRes>>
             */
            unpinMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.channel.ChannelService/UnpinMessage',
                    requestData,
                    requestMetadata,
                    requestClass: UnpinMessageReq$1,
                    responseClass: UnpinMessageRes$1
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.channel.ChannelService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/CreateChannel
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreateChannelRes>
     */
    createChannel(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createChannel(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/GetChannel
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetChannelRes>
     */
    getChannel(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getChannel(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/ModifyChannel
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ModifyChannelRes>
     */
    modifyChannel(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .modifyChannel(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/ChangeRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ChangeRoleRes>
     */
    changeRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .changeRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/RemoveChannel
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RemoveChannelRes>
     */
    removeChannel(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removeChannel(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/AddMembers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AddMembersRes>
     */
    addMembers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addMembers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/KickMembers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.KickMembersRes>
     */
    kickMembers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .kickMembers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/BanMember
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BanMemberRes>
     */
    banMember(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .banMember(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/UnbanMember
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UnbanMemberRes>
     */
    unbanMember(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .unbanMember(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/GetMembers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetMembersRes>
     */
    getMembers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getMembers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/JoinChannel
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.JoinChannelRes>
     */
    joinChannel(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .joinChannel(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/LeaveChannel
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.LeaveChannelRes>
     */
    leaveChannel(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .leaveChannel(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/CreateToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreateTokenRes>
     */
    createToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/DeleteToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.DeleteTokenRes>
     */
    deleteToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/PinMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PinMessageRes>
     */
    pinMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .pinMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.channel.ChannelService/UnpinMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UnpinMessageRes>
     */
    unpinMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .unpinMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ChannelServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ChannelServiceClient, deps: [{ token: GRPC_CHANNEL_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ChannelServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ChannelServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ChannelServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_CHANNEL_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

var channel_pbsc$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ChannelServiceClient: ChannelServiceClient
});

/**
 * Message implementation for proto.pub.v1.models.Seen
 */
class Seen {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Seen to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.id = _value.id;
        Seen.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Seen();
        Seen.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.id = _instance.id || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.id = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Seen.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.from) {
            _writer.writeMessage(1, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.id) {
            _writer.writeInt64String(3, _instance.id);
        }
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Seen.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            id: this.id
        };
    }
}
Seen.id = 'proto.pub.v1.models.Seen';
/**
 * Message implementation for proto.pub.v1.models.SeenByClient
 */
class SeenByClient {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SeenByClient to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.id = _value.id;
        SeenByClient.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SeenByClient();
        SeenByClient.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.to = _instance.to || undefined;
        _instance.id = _instance.id || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.id = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SeenByClient.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.id) {
            _writer.writeInt64String(3, _instance.id);
        }
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SeenByClient.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            to: this.to ? this.to.toObject() : undefined,
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            to: this.to ? this.to.toProtobufJSON(options) : null,
            id: this.id
        };
    }
}
SeenByClient.id = 'proto.pub.v1.models.SeenByClient';

var ActivityType;
(function (ActivityType) {
    ActivityType[ActivityType["NO_ACTIVITY"] = 0] = "NO_ACTIVITY";
    ActivityType[ActivityType["TYPING"] = 1] = "TYPING";
    ActivityType[ActivityType["SENDING_FILE"] = 2] = "SENDING_FILE";
    ActivityType[ActivityType["RECORDING_VOICE"] = 3] = "RECORDING_VOICE";
    ActivityType[ActivityType["RECORDING_VIDEO"] = 4] = "RECORDING_VIDEO";
    ActivityType[ActivityType["CHOOSING_STICKER"] = 5] = "CHOOSING_STICKER";
})(ActivityType || (ActivityType = {}));
/**
 * Message implementation for proto.pub.v1.models.Activity
 */
class Activity {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Activity to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.typeOfActivity = _value.typeOfActivity;
        Activity.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Activity();
        Activity.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.typeOfActivity = _instance.typeOfActivity || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.typeOfActivity = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Activity.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.from) {
            _writer.writeMessage(1, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.typeOfActivity) {
            _writer.writeEnum(3, _instance.typeOfActivity);
        }
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get typeOfActivity() {
        return this._typeOfActivity;
    }
    set typeOfActivity(value) {
        this._typeOfActivity = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Activity.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            typeOfActivity: this.typeOfActivity
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            typeOfActivity: ActivityType[this.typeOfActivity === null || this.typeOfActivity === undefined
                ? 0
                : this.typeOfActivity]
        };
    }
}
Activity.id = 'proto.pub.v1.models.Activity';
/**
 * Message implementation for proto.pub.v1.models.ActivityByClient
 */
class ActivityByClient {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ActivityByClient to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.typeOfActivity = _value.typeOfActivity;
        ActivityByClient.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ActivityByClient();
        ActivityByClient.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.to = _instance.to || undefined;
        _instance.typeOfActivity = _instance.typeOfActivity || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.typeOfActivity = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ActivityByClient.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.to) {
            _writer.writeMessage(2, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.typeOfActivity) {
            _writer.writeEnum(3, _instance.typeOfActivity);
        }
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get typeOfActivity() {
        return this._typeOfActivity;
    }
    set typeOfActivity(value) {
        this._typeOfActivity = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ActivityByClient.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            to: this.to ? this.to.toObject() : undefined,
            typeOfActivity: this.typeOfActivity
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            to: this.to ? this.to.toProtobufJSON(options) : null,
            typeOfActivity: ActivityType[this.typeOfActivity === null || this.typeOfActivity === undefined
                ? 0
                : this.typeOfActivity]
        };
    }
}
ActivityByClient.id = 'proto.pub.v1.models.ActivityByClient';

var PresenceType;
(function (PresenceType) {
    PresenceType[PresenceType["ACTIVE"] = 0] = "ACTIVE";
    PresenceType[PresenceType["DELETED"] = 1] = "DELETED";
    PresenceType[PresenceType["KICKED"] = 2] = "KICKED";
    PresenceType[PresenceType["LEFT"] = 3] = "LEFT";
    PresenceType[PresenceType["BANNED"] = 4] = "BANNED";
})(PresenceType || (PresenceType = {}));
/**
 * Message implementation for proto.pub.v1.models.RoomMetadata
 */
class RoomMetadata {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RoomMetadata to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.lastMessageId = _value.lastMessageId;
        this.lastUpdate = _value.lastUpdate;
        this.lastCurrentUserSentMessageId = _value.lastCurrentUserSentMessageId;
        this.lastSeenId = _value.lastSeenId;
        this.firstMessageId = _value.firstMessageId;
        this.presenceType = _value.presenceType;
        RoomMetadata.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RoomMetadata();
        RoomMetadata.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.lastMessageId = _instance.lastMessageId || '0';
        _instance.lastUpdate = _instance.lastUpdate || '0';
        _instance.lastCurrentUserSentMessageId =
            _instance.lastCurrentUserSentMessageId || '0';
        _instance.lastSeenId = _instance.lastSeenId || '0';
        _instance.firstMessageId = _instance.firstMessageId || '0';
        _instance.presenceType = _instance.presenceType || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.lastMessageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.lastUpdate = _reader.readInt64String();
                    break;
                case 4:
                    _instance.lastCurrentUserSentMessageId = _reader.readInt64String();
                    break;
                case 7:
                    _instance.lastSeenId = _reader.readInt64String();
                    break;
                case 5:
                    _instance.firstMessageId = _reader.readInt64String();
                    break;
                case 6:
                    _instance.presenceType = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RoomMetadata.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.lastMessageId) {
            _writer.writeInt64String(2, _instance.lastMessageId);
        }
        if (_instance.lastUpdate) {
            _writer.writeInt64String(3, _instance.lastUpdate);
        }
        if (_instance.lastCurrentUserSentMessageId) {
            _writer.writeInt64String(4, _instance.lastCurrentUserSentMessageId);
        }
        if (_instance.lastSeenId) {
            _writer.writeInt64String(7, _instance.lastSeenId);
        }
        if (_instance.firstMessageId) {
            _writer.writeInt64String(5, _instance.firstMessageId);
        }
        if (_instance.presenceType) {
            _writer.writeEnum(6, _instance.presenceType);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get lastMessageId() {
        return this._lastMessageId;
    }
    set lastMessageId(value) {
        this._lastMessageId = value;
    }
    get lastUpdate() {
        return this._lastUpdate;
    }
    set lastUpdate(value) {
        this._lastUpdate = value;
    }
    get lastCurrentUserSentMessageId() {
        return this._lastCurrentUserSentMessageId;
    }
    set lastCurrentUserSentMessageId(value) {
        this._lastCurrentUserSentMessageId = value;
    }
    get lastSeenId() {
        return this._lastSeenId;
    }
    set lastSeenId(value) {
        this._lastSeenId = value;
    }
    get firstMessageId() {
        return this._firstMessageId;
    }
    set firstMessageId(value) {
        this._firstMessageId = value;
    }
    get presenceType() {
        return this._presenceType;
    }
    set presenceType(value) {
        this._presenceType = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RoomMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            lastMessageId: this.lastMessageId,
            lastUpdate: this.lastUpdate,
            lastCurrentUserSentMessageId: this.lastCurrentUserSentMessageId,
            lastSeenId: this.lastSeenId,
            firstMessageId: this.firstMessageId,
            presenceType: this.presenceType
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            lastMessageId: this.lastMessageId,
            lastUpdate: this.lastUpdate,
            lastCurrentUserSentMessageId: this.lastCurrentUserSentMessageId,
            lastSeenId: this.lastSeenId,
            firstMessageId: this.firstMessageId,
            presenceType: PresenceType[this.presenceType === null || this.presenceType === undefined
                ? 0
                : this.presenceType]
        };
    }
}
RoomMetadata.id = 'proto.pub.v1.models.RoomMetadata';

/**
 * Message implementation for proto.pub.v1.core.EstablishServerSideStreamReq
 */
class EstablishServerSideStreamReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EstablishServerSideStreamReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        EstablishServerSideStreamReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EstablishServerSideStreamReq();
        EstablishServerSideStreamReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        EstablishServerSideStreamReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EstablishServerSideStreamReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
EstablishServerSideStreamReq.id = 'proto.pub.v1.core.EstablishServerSideStreamReq';
/**
 * Message implementation for proto.pub.v1.core.SendClientPacketRes
 */
class SendClientPacketRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendClientPacketRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SendClientPacketRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendClientPacketRes();
        SendClientPacketRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SendClientPacketRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendClientPacketRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SendClientPacketRes.id = 'proto.pub.v1.core.SendClientPacketRes';
/**
 * Message implementation for proto.pub.v1.core.Ping
 */
class Ping {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Ping to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.lastPongTime = _value.lastPongTime;
        this.clientIsActive = _value.clientIsActive;
        Ping.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Ping();
        Ping.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.lastPongTime = _instance.lastPongTime || '0';
        _instance.clientIsActive = _instance.clientIsActive || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.lastPongTime = _reader.readInt64String();
                    break;
                case 2:
                    _instance.clientIsActive = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Ping.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.lastPongTime) {
            _writer.writeInt64String(1, _instance.lastPongTime);
        }
        if (_instance.clientIsActive) {
            _writer.writeBool(2, _instance.clientIsActive);
        }
    }
    get lastPongTime() {
        return this._lastPongTime;
    }
    set lastPongTime(value) {
        this._lastPongTime = value;
    }
    get clientIsActive() {
        return this._clientIsActive;
    }
    set clientIsActive(value) {
        this._clientIsActive = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Ping.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            lastPongTime: this.lastPongTime,
            clientIsActive: this.clientIsActive
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            lastPongTime: this.lastPongTime,
            clientIsActive: this.clientIsActive
        };
    }
}
Ping.id = 'proto.pub.v1.core.Ping';
/**
 * Message implementation for proto.pub.v1.core.Pong
 */
class Pong {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Pong to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.packetId = _value.packetId;
        this.serverTime = _value.serverTime;
        this.streamInputCapabilityStatus = _value.streamInputCapabilityStatus;
        Pong.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Pong();
        Pong.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.serverTime = _instance.serverTime || '0';
        _instance.streamInputCapabilityStatus =
            _instance.streamInputCapabilityStatus || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 2:
                    _instance.serverTime = _reader.readInt64String();
                    break;
                case 3:
                    _instance.streamInputCapabilityStatus = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Pong.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.serverTime) {
            _writer.writeInt64String(2, _instance.serverTime);
        }
        if (_instance.streamInputCapabilityStatus) {
            _writer.writeEnum(3, _instance.streamInputCapabilityStatus);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get serverTime() {
        return this._serverTime;
    }
    set serverTime(value) {
        this._serverTime = value;
    }
    get streamInputCapabilityStatus() {
        return this._streamInputCapabilityStatus;
    }
    set streamInputCapabilityStatus(value) {
        this._streamInputCapabilityStatus = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Pong.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            serverTime: this.serverTime,
            streamInputCapabilityStatus: this.streamInputCapabilityStatus
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            serverTime: this.serverTime,
            streamInputCapabilityStatus: Pong.StreamInputCapabilityStatus[this.streamInputCapabilityStatus === null ||
                this.streamInputCapabilityStatus === undefined
                ? 0
                : this.streamInputCapabilityStatus]
        };
    }
}
Pong.id = 'proto.pub.v1.core.Pong';
(function (Pong) {
    let StreamInputCapabilityStatus;
    (function (StreamInputCapabilityStatus) {
        StreamInputCapabilityStatus[StreamInputCapabilityStatus["HIGH_AVAILABILITY"] = 0] = "HIGH_AVAILABILITY";
        StreamInputCapabilityStatus[StreamInputCapabilityStatus["NOT_AVAILABLE"] = 1] = "NOT_AVAILABLE";
        StreamInputCapabilityStatus[StreamInputCapabilityStatus["LOW_AVAILABILITY"] = 2] = "LOW_AVAILABILITY";
    })(StreamInputCapabilityStatus = Pong.StreamInputCapabilityStatus || (Pong.StreamInputCapabilityStatus = {}));
})(Pong || (Pong = {}));
/**
 * Message implementation for proto.pub.v1.core.ExpletivePacket
 */
class ExpletivePacket {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ExpletivePacket to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.body = _value.body;
        ExpletivePacket.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ExpletivePacket();
        ExpletivePacket.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.body = _instance.body || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.body = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ExpletivePacket.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.body) {
            _writer.writeString(1, _instance.body);
        }
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ExpletivePacket.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            body: this.body
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            body: this.body
        };
    }
}
ExpletivePacket.id = 'proto.pub.v1.core.ExpletivePacket';
/**
 * Message implementation for proto.pub.v1.core.RoomPresenceTypeChanged
 */
class RoomPresenceTypeChanged {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RoomPresenceTypeChanged to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.presenceType = _value.presenceType;
        RoomPresenceTypeChanged.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RoomPresenceTypeChanged();
        RoomPresenceTypeChanged.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.presenceType = _instance.presenceType || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.presenceType = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RoomPresenceTypeChanged.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.presenceType) {
            _writer.writeEnum(2, _instance.presenceType);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get presenceType() {
        return this._presenceType;
    }
    set presenceType(value) {
        this._presenceType = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RoomPresenceTypeChanged.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            presenceType: this.presenceType
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            presenceType: PresenceType[this.presenceType === null || this.presenceType === undefined
                ? 0
                : this.presenceType]
        };
    }
}
RoomPresenceTypeChanged.id = 'proto.pub.v1.core.RoomPresenceTypeChanged';
/**
 * Message implementation for proto.pub.v1.core.ErrorOnPacket
 */
class ErrorOnPacket {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ErrorOnPacket to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.packetId = _value.packetId;
        this.error = _value.error;
        ErrorOnPacket.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ErrorOnPacket();
        ErrorOnPacket.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetId = _instance.packetId || '';
        _instance.error = _instance.error || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.packetId = _reader.readString();
                    break;
                case 2:
                    _instance.error = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ErrorOnPacket.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.packetId) {
            _writer.writeString(1, _instance.packetId);
        }
        if (_instance.error) {
            _writer.writeEnum(2, _instance.error);
        }
    }
    get packetId() {
        return this._packetId;
    }
    set packetId(value) {
        this._packetId = value;
    }
    get error() {
        return this._error;
    }
    set error(value) {
        this._error = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ErrorOnPacket.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            packetId: this.packetId,
            error: this.error
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            packetId: this.packetId,
            error: ErrorOnPacket.Error[this.error === null || this.error === undefined ? 0 : this.error]
        };
    }
}
ErrorOnPacket.id = 'proto.pub.v1.core.ErrorOnPacket';
(function (ErrorOnPacket) {
    let Error;
    (function (Error) {
        Error[Error["UNKNOWN"] = 0] = "UNKNOWN";
        Error[Error["BAD_REQUEST"] = 1] = "BAD_REQUEST";
        Error[Error["UNAUTHENTICATED"] = 2] = "UNAUTHENTICATED";
        Error[Error["PERMISSION_DENIED"] = 3] = "PERMISSION_DENIED";
        Error[Error["NOT_FOUND"] = 4] = "NOT_FOUND";
        Error[Error["CONFLICT"] = 5] = "CONFLICT";
        Error[Error["RESOURCE_EXHAUSTED"] = 6] = "RESOURCE_EXHAUSTED";
        Error[Error["INTERNAL"] = 7] = "INTERNAL";
        Error[Error["UNIMPLEMENTED"] = 8] = "UNIMPLEMENTED";
        Error[Error["UNAVAILABLE"] = 9] = "UNAVAILABLE";
        Error[Error["DEADLINE_EXCEEDED"] = 10] = "DEADLINE_EXCEEDED";
    })(Error = ErrorOnPacket.Error || (ErrorOnPacket.Error = {}));
})(ErrorOnPacket || (ErrorOnPacket = {}));
/**
 * Message implementation for proto.pub.v1.core.ServerPacket
 */
class ServerPacket {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ServerPacket to deeply clone from
     */
    constructor(_value) {
        this._type = ServerPacket.TypeCase.none;
        _value = _value || {};
        this.error = _value.error ? new ErrorOnPacket(_value.error) : undefined;
        this.message = _value.message
            ? new Message(_value.message)
            : undefined;
        this.seen = _value.seen
            ? new Seen(_value.seen)
            : undefined;
        this.activity = _value.activity
            ? new Activity(_value.activity)
            : undefined;
        this.roomPresenceTypeChanged = _value.roomPresenceTypeChanged
            ? new RoomPresenceTypeChanged(_value.roomPresenceTypeChanged)
            : undefined;
        this.liveLocationStatusChanged = _value.liveLocationStatusChanged
            ? new LiveLocation(_value.liveLocationStatusChanged)
            : undefined;
        this.pong = _value.pong ? new Pong(_value.pong) : undefined;
        this.messageDeliveryAck = _value.messageDeliveryAck
            ? new MessageDeliveryAck(_value.messageDeliveryAck)
            : undefined;
        this.callOffer = _value.callOffer
            ? new CallOffer(_value.callOffer)
            : undefined;
        this.callAnswer = _value.callAnswer
            ? new CallAnswer(_value.callAnswer)
            : undefined;
        this.expletivePacket = _value.expletivePacket
            ? new ExpletivePacket(_value.expletivePacket)
            : undefined;
        this.packetPadding = _value.packetPadding;
        ServerPacket.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ServerPacket();
        ServerPacket.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.packetPadding = _instance.packetPadding || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.error = new ErrorOnPacket();
                    _reader.readMessage(_instance.error, ErrorOnPacket.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.message = new Message();
                    _reader.readMessage(_instance.message, Message.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.seen = new Seen();
                    _reader.readMessage(_instance.seen, Seen.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.activity = new Activity();
                    _reader.readMessage(_instance.activity, Activity.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.roomPresenceTypeChanged = new RoomPresenceTypeChanged();
                    _reader.readMessage(_instance.roomPresenceTypeChanged, RoomPresenceTypeChanged.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.liveLocationStatusChanged = new LiveLocation();
                    _reader.readMessage(_instance.liveLocationStatusChanged, LiveLocation.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.pong = new Pong();
                    _reader.readMessage(_instance.pong, Pong.deserializeBinaryFromReader);
                    break;
                case 9:
                    _instance.messageDeliveryAck = new MessageDeliveryAck();
                    _reader.readMessage(_instance.messageDeliveryAck, MessageDeliveryAck.deserializeBinaryFromReader);
                    break;
                case 10:
                    _instance.callOffer = new CallOffer();
                    _reader.readMessage(_instance.callOffer, CallOffer.deserializeBinaryFromReader);
                    break;
                case 11:
                    _instance.callAnswer = new CallAnswer();
                    _reader.readMessage(_instance.callAnswer, CallAnswer.deserializeBinaryFromReader);
                    break;
                case 12:
                    _instance.expletivePacket = new ExpletivePacket();
                    _reader.readMessage(_instance.expletivePacket, ExpletivePacket.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.packetPadding = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ServerPacket.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.error) {
            _writer.writeMessage(1, _instance.error, ErrorOnPacket.serializeBinaryToWriter);
        }
        if (_instance.message) {
            _writer.writeMessage(2, _instance.message, Message.serializeBinaryToWriter);
        }
        if (_instance.seen) {
            _writer.writeMessage(3, _instance.seen, Seen.serializeBinaryToWriter);
        }
        if (_instance.activity) {
            _writer.writeMessage(4, _instance.activity, Activity.serializeBinaryToWriter);
        }
        if (_instance.roomPresenceTypeChanged) {
            _writer.writeMessage(5, _instance.roomPresenceTypeChanged, RoomPresenceTypeChanged.serializeBinaryToWriter);
        }
        if (_instance.liveLocationStatusChanged) {
            _writer.writeMessage(7, _instance.liveLocationStatusChanged, LiveLocation.serializeBinaryToWriter);
        }
        if (_instance.pong) {
            _writer.writeMessage(8, _instance.pong, Pong.serializeBinaryToWriter);
        }
        if (_instance.messageDeliveryAck) {
            _writer.writeMessage(9, _instance.messageDeliveryAck, MessageDeliveryAck.serializeBinaryToWriter);
        }
        if (_instance.callOffer) {
            _writer.writeMessage(10, _instance.callOffer, CallOffer.serializeBinaryToWriter);
        }
        if (_instance.callAnswer) {
            _writer.writeMessage(11, _instance.callAnswer, CallAnswer.serializeBinaryToWriter);
        }
        if (_instance.expletivePacket) {
            _writer.writeMessage(12, _instance.expletivePacket, ExpletivePacket.serializeBinaryToWriter);
        }
        if (_instance.packetPadding) {
            _writer.writeString(6, _instance.packetPadding);
        }
    }
    get error() {
        return this._error;
    }
    set error(value) {
        if (value !== undefined && value !== null) {
            this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.error;
        }
        this._error = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        if (value !== undefined && value !== null) {
            this._error = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.message;
        }
        this._message = value;
    }
    get seen() {
        return this._seen;
    }
    set seen(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.seen;
        }
        this._seen = value;
    }
    get activity() {
        return this._activity;
    }
    set activity(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.activity;
        }
        this._activity = value;
    }
    get roomPresenceTypeChanged() {
        return this._roomPresenceTypeChanged;
    }
    set roomPresenceTypeChanged(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.roomPresenceTypeChanged;
        }
        this._roomPresenceTypeChanged = value;
    }
    get liveLocationStatusChanged() {
        return this._liveLocationStatusChanged;
    }
    set liveLocationStatusChanged(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.liveLocationStatusChanged;
        }
        this._liveLocationStatusChanged = value;
    }
    get pong() {
        return this._pong;
    }
    set pong(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._messageDeliveryAck = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.pong;
        }
        this._pong = value;
    }
    get messageDeliveryAck() {
        return this._messageDeliveryAck;
    }
    set messageDeliveryAck(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._callOffer = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.messageDeliveryAck;
        }
        this._messageDeliveryAck = value;
    }
    get callOffer() {
        return this._callOffer;
    }
    set callOffer(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callAnswer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.callOffer;
        }
        this._callOffer = value;
    }
    get callAnswer() {
        return this._callAnswer;
    }
    set callAnswer(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._expletivePacket = undefined;
            this._type = ServerPacket.TypeCase.callAnswer;
        }
        this._callAnswer = value;
    }
    get expletivePacket() {
        return this._expletivePacket;
    }
    set expletivePacket(value) {
        if (value !== undefined && value !== null) {
            this._error = this._message = this._seen = this._activity = this._roomPresenceTypeChanged = this._liveLocationStatusChanged = this._pong = this._messageDeliveryAck = this._callOffer = this._callAnswer = undefined;
            this._type = ServerPacket.TypeCase.expletivePacket;
        }
        this._expletivePacket = value;
    }
    get packetPadding() {
        return this._packetPadding;
    }
    set packetPadding(value) {
        this._packetPadding = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ServerPacket.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            error: this.error ? this.error.toObject() : undefined,
            message: this.message ? this.message.toObject() : undefined,
            seen: this.seen ? this.seen.toObject() : undefined,
            activity: this.activity ? this.activity.toObject() : undefined,
            roomPresenceTypeChanged: this.roomPresenceTypeChanged
                ? this.roomPresenceTypeChanged.toObject()
                : undefined,
            liveLocationStatusChanged: this.liveLocationStatusChanged
                ? this.liveLocationStatusChanged.toObject()
                : undefined,
            pong: this.pong ? this.pong.toObject() : undefined,
            messageDeliveryAck: this.messageDeliveryAck
                ? this.messageDeliveryAck.toObject()
                : undefined,
            callOffer: this.callOffer ? this.callOffer.toObject() : undefined,
            callAnswer: this.callAnswer ? this.callAnswer.toObject() : undefined,
            expletivePacket: this.expletivePacket
                ? this.expletivePacket.toObject()
                : undefined,
            packetPadding: this.packetPadding
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            error: this.error ? this.error.toProtobufJSON(options) : null,
            message: this.message ? this.message.toProtobufJSON(options) : null,
            seen: this.seen ? this.seen.toProtobufJSON(options) : null,
            activity: this.activity ? this.activity.toProtobufJSON(options) : null,
            roomPresenceTypeChanged: this.roomPresenceTypeChanged
                ? this.roomPresenceTypeChanged.toProtobufJSON(options)
                : null,
            liveLocationStatusChanged: this.liveLocationStatusChanged
                ? this.liveLocationStatusChanged.toProtobufJSON(options)
                : null,
            pong: this.pong ? this.pong.toProtobufJSON(options) : null,
            messageDeliveryAck: this.messageDeliveryAck
                ? this.messageDeliveryAck.toProtobufJSON(options)
                : null,
            callOffer: this.callOffer ? this.callOffer.toProtobufJSON(options) : null,
            callAnswer: this.callAnswer
                ? this.callAnswer.toProtobufJSON(options)
                : null,
            expletivePacket: this.expletivePacket
                ? this.expletivePacket.toProtobufJSON(options)
                : null,
            packetPadding: this.packetPadding
        };
    }
}
ServerPacket.id = 'proto.pub.v1.core.ServerPacket';
(function (ServerPacket) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["error"] = 1] = "error";
        TypeCase[TypeCase["message"] = 2] = "message";
        TypeCase[TypeCase["seen"] = 3] = "seen";
        TypeCase[TypeCase["activity"] = 4] = "activity";
        TypeCase[TypeCase["roomPresenceTypeChanged"] = 5] = "roomPresenceTypeChanged";
        TypeCase[TypeCase["liveLocationStatusChanged"] = 6] = "liveLocationStatusChanged";
        TypeCase[TypeCase["pong"] = 7] = "pong";
        TypeCase[TypeCase["messageDeliveryAck"] = 8] = "messageDeliveryAck";
        TypeCase[TypeCase["callOffer"] = 9] = "callOffer";
        TypeCase[TypeCase["callAnswer"] = 10] = "callAnswer";
        TypeCase[TypeCase["expletivePacket"] = 11] = "expletivePacket";
    })(TypeCase = ServerPacket.TypeCase || (ServerPacket.TypeCase = {}));
})(ServerPacket || (ServerPacket = {}));
/**
 * Message implementation for proto.pub.v1.core.ClientPacket
 */
class ClientPacket {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ClientPacket to deeply clone from
     */
    constructor(_value) {
        this._type = ClientPacket.TypeCase.none;
        _value = _value || {};
        this.id = _value.id;
        this.message = _value.message
            ? new MessageByClient(_value.message)
            : undefined;
        this.seen = _value.seen
            ? new SeenByClient(_value.seen)
            : undefined;
        this.activity = _value.activity
            ? new ActivityByClient(_value.activity)
            : undefined;
        this.ping = _value.ping ? new Ping(_value.ping) : undefined;
        this.callOffer = _value.callOffer
            ? new CallOfferByClient(_value.callOffer)
            : undefined;
        this.callAnswer = _value.callAnswer
            ? new CallAnswerByClient(_value.callAnswer)
            : undefined;
        ClientPacket.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ClientPacket();
        ClientPacket.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.message = new MessageByClient();
                    _reader.readMessage(_instance.message, MessageByClient.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.seen = new SeenByClient();
                    _reader.readMessage(_instance.seen, SeenByClient.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.activity = new ActivityByClient();
                    _reader.readMessage(_instance.activity, ActivityByClient.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.ping = new Ping();
                    _reader.readMessage(_instance.ping, Ping.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.callOffer = new CallOfferByClient();
                    _reader.readMessage(_instance.callOffer, CallOfferByClient.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.callAnswer = new CallAnswerByClient();
                    _reader.readMessage(_instance.callAnswer, CallAnswerByClient.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ClientPacket.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.message) {
            _writer.writeMessage(2, _instance.message, MessageByClient.serializeBinaryToWriter);
        }
        if (_instance.seen) {
            _writer.writeMessage(3, _instance.seen, SeenByClient.serializeBinaryToWriter);
        }
        if (_instance.activity) {
            _writer.writeMessage(4, _instance.activity, ActivityByClient.serializeBinaryToWriter);
        }
        if (_instance.ping) {
            _writer.writeMessage(5, _instance.ping, Ping.serializeBinaryToWriter);
        }
        if (_instance.callOffer) {
            _writer.writeMessage(6, _instance.callOffer, CallOfferByClient.serializeBinaryToWriter);
        }
        if (_instance.callAnswer) {
            _writer.writeMessage(7, _instance.callAnswer, CallAnswerByClient.serializeBinaryToWriter);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        if (value !== undefined && value !== null) {
            this._seen = this._activity = this._ping = this._callOffer = this._callAnswer = undefined;
            this._type = ClientPacket.TypeCase.message;
        }
        this._message = value;
    }
    get seen() {
        return this._seen;
    }
    set seen(value) {
        if (value !== undefined && value !== null) {
            this._message = this._activity = this._ping = this._callOffer = this._callAnswer = undefined;
            this._type = ClientPacket.TypeCase.seen;
        }
        this._seen = value;
    }
    get activity() {
        return this._activity;
    }
    set activity(value) {
        if (value !== undefined && value !== null) {
            this._message = this._seen = this._ping = this._callOffer = this._callAnswer = undefined;
            this._type = ClientPacket.TypeCase.activity;
        }
        this._activity = value;
    }
    get ping() {
        return this._ping;
    }
    set ping(value) {
        if (value !== undefined && value !== null) {
            this._message = this._seen = this._activity = this._callOffer = this._callAnswer = undefined;
            this._type = ClientPacket.TypeCase.ping;
        }
        this._ping = value;
    }
    get callOffer() {
        return this._callOffer;
    }
    set callOffer(value) {
        if (value !== undefined && value !== null) {
            this._message = this._seen = this._activity = this._ping = this._callAnswer = undefined;
            this._type = ClientPacket.TypeCase.callOffer;
        }
        this._callOffer = value;
    }
    get callAnswer() {
        return this._callAnswer;
    }
    set callAnswer(value) {
        if (value !== undefined && value !== null) {
            this._message = this._seen = this._activity = this._ping = this._callOffer = undefined;
            this._type = ClientPacket.TypeCase.callAnswer;
        }
        this._callAnswer = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ClientPacket.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            message: this.message ? this.message.toObject() : undefined,
            seen: this.seen ? this.seen.toObject() : undefined,
            activity: this.activity ? this.activity.toObject() : undefined,
            ping: this.ping ? this.ping.toObject() : undefined,
            callOffer: this.callOffer ? this.callOffer.toObject() : undefined,
            callAnswer: this.callAnswer ? this.callAnswer.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            message: this.message ? this.message.toProtobufJSON(options) : null,
            seen: this.seen ? this.seen.toProtobufJSON(options) : null,
            activity: this.activity ? this.activity.toProtobufJSON(options) : null,
            ping: this.ping ? this.ping.toProtobufJSON(options) : null,
            callOffer: this.callOffer ? this.callOffer.toProtobufJSON(options) : null,
            callAnswer: this.callAnswer
                ? this.callAnswer.toProtobufJSON(options)
                : null
        };
    }
}
ClientPacket.id = 'proto.pub.v1.core.ClientPacket';
(function (ClientPacket) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["message"] = 1] = "message";
        TypeCase[TypeCase["seen"] = 2] = "seen";
        TypeCase[TypeCase["activity"] = 3] = "activity";
        TypeCase[TypeCase["ping"] = 4] = "ping";
        TypeCase[TypeCase["callOffer"] = 5] = "callOffer";
        TypeCase[TypeCase["callAnswer"] = 6] = "callAnswer";
    })(TypeCase = ClientPacket.TypeCase || (ClientPacket.TypeCase = {}));
})(ClientPacket || (ClientPacket = {}));

/* tslint:disable */
/**
 * Specific GrpcClientSettings for CoreService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_CORE_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_CORE_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.core.CoreService
 */
class CoreServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Bidirectional streaming: /proto.pub.v1.core.CoreService/EstablishStream
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ServerPacket>>
             */
            establishStream: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.bidiStream,
                    client: this.client,
                    path: '/proto.pub.v1.core.CoreService/EstablishStream',
                    requestData,
                    requestMetadata,
                    requestClass: ClientPacket,
                    responseClass: ServerPacket
                });
            },
            /**
             * Server streaming: /proto.pub.v1.core.CoreService/EstablishServerSideStream
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ServerPacket>>
             */
            establishServerSideStream: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.serverStream,
                    client: this.client,
                    path: '/proto.pub.v1.core.CoreService/EstablishServerSideStream',
                    requestData,
                    requestMetadata,
                    requestClass: EstablishServerSideStreamReq,
                    responseClass: ServerPacket
                });
            },
            /**
             * Unary call: /proto.pub.v1.core.CoreService/SendClientPacket
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SendClientPacketRes>>
             */
            sendClientPacket: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.core.CoreService/SendClientPacket',
                    requestData,
                    requestMetadata,
                    requestClass: ClientPacket,
                    responseClass: SendClientPacketRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.core.CoreService', settings);
    }
    /**
     * Bidirectional streaming @/proto.pub.v1.core.CoreService/EstablishStream
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ServerPacket>
     */
    establishStream(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .establishStream(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Server streaming @/proto.pub.v1.core.CoreService/EstablishServerSideStream
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ServerPacket>
     */
    establishServerSideStream(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .establishServerSideStream(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.core.CoreService/SendClientPacket
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SendClientPacketRes>
     */
    sendClientPacket(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .sendClientPacket(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
CoreServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: CoreServiceClient, deps: [{ token: GRPC_CORE_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
CoreServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: CoreServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: CoreServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_CORE_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.firebase.RegistrationReq
 */
class RegistrationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RegistrationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.tokenId = _value.tokenId;
        RegistrationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RegistrationReq();
        RegistrationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.tokenId = _instance.tokenId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.tokenId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        RegistrationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.tokenId) {
            _writer.writeString(1, _instance.tokenId);
        }
    }
    get tokenId() {
        return this._tokenId;
    }
    set tokenId(value) {
        this._tokenId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RegistrationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            tokenId: this.tokenId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            tokenId: this.tokenId
        };
    }
}
RegistrationReq.id = 'proto.pub.v1.firebase.RegistrationReq';
/**
 * Message implementation for proto.pub.v1.firebase.RegistrationRes
 */
class RegistrationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RegistrationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RegistrationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RegistrationRes();
        RegistrationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RegistrationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RegistrationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RegistrationRes.id = 'proto.pub.v1.firebase.RegistrationRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for FirebaseService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_FIREBASE_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_FIREBASE_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.firebase.FirebaseService
 */
class FirebaseServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.firebase.FirebaseService/Registration
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RegistrationRes>>
             */
            registration: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.firebase.FirebaseService/Registration',
                    requestData,
                    requestMetadata,
                    requestClass: RegistrationReq,
                    responseClass: RegistrationRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.firebase.FirebaseService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.firebase.FirebaseService/Registration
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RegistrationRes>
     */
    registration(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .registration(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
FirebaseServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: FirebaseServiceClient, deps: [{ token: GRPC_FIREBASE_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
FirebaseServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: FirebaseServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: FirebaseServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_FIREBASE_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.group.GroupInfo
 */
class GroupInfo {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GroupInfo to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.info = _value.info;
        this.messagingTimeInterval = _value.messagingTimeInterval;
        this.isSendingMessageDisabled = _value.isSendingMessageDisabled;
        GroupInfo.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GroupInfo();
        GroupInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.info = _instance.info || '';
        _instance.messagingTimeInterval = _instance.messagingTimeInterval || '0';
        _instance.isSendingMessageDisabled =
            _instance.isSendingMessageDisabled || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.info = _reader.readString();
                    break;
                case 3:
                    _instance.messagingTimeInterval = _reader.readInt64String();
                    break;
                case 4:
                    _instance.isSendingMessageDisabled = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GroupInfo.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.info) {
            _writer.writeString(2, _instance.info);
        }
        if (_instance.messagingTimeInterval) {
            _writer.writeInt64String(3, _instance.messagingTimeInterval);
        }
        if (_instance.isSendingMessageDisabled) {
            _writer.writeBool(4, _instance.isSendingMessageDisabled);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    get messagingTimeInterval() {
        return this._messagingTimeInterval;
    }
    set messagingTimeInterval(value) {
        this._messagingTimeInterval = value;
    }
    get isSendingMessageDisabled() {
        return this._isSendingMessageDisabled;
    }
    set isSendingMessageDisabled(value) {
        this._isSendingMessageDisabled = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GroupInfo.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            info: this.info,
            messagingTimeInterval: this.messagingTimeInterval,
            isSendingMessageDisabled: this.isSendingMessageDisabled
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            info: this.info,
            messagingTimeInterval: this.messagingTimeInterval,
            isSendingMessageDisabled: this.isSendingMessageDisabled
        };
    }
}
GroupInfo.id = 'proto.pub.v1.group.GroupInfo';
/**
 * Message implementation for proto.pub.v1.group.GroupAdmin
 */
class GroupAdmin {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GroupAdmin to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.admin = _value.admin
            ? new Uid(_value.admin)
            : undefined;
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        GroupAdmin.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GroupAdmin();
        GroupAdmin.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.admin = _instance.admin || undefined;
        _instance.group = _instance.group || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.admin = new Uid();
                    _reader.readMessage(_instance.admin, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GroupAdmin.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.admin) {
            _writer.writeMessage(1, _instance.admin, Uid.serializeBinaryToWriter);
        }
        if (_instance.group) {
            _writer.writeMessage(2, _instance.group, Uid.serializeBinaryToWriter);
        }
    }
    get admin() {
        return this._admin;
    }
    set admin(value) {
        this._admin = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GroupAdmin.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            admin: this.admin ? this.admin.toObject() : undefined,
            group: this.group ? this.group.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            admin: this.admin ? this.admin.toProtobufJSON(options) : null,
            group: this.group ? this.group.toProtobufJSON(options) : null
        };
    }
}
GroupAdmin.id = 'proto.pub.v1.group.GroupAdmin';
/**
 * Message implementation for proto.pub.v1.group.CreateGroupReq
 */
class CreateGroupReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateGroupReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.info = _value.info;
        CreateGroupReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateGroupReq();
        CreateGroupReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.info = _instance.info || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.info = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateGroupReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.info) {
            _writer.writeString(2, _instance.info);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateGroupReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            info: this.info
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            info: this.info
        };
    }
}
CreateGroupReq.id = 'proto.pub.v1.group.CreateGroupReq';
/**
 * Message implementation for proto.pub.v1.group.CreateGroupRes
 */
class CreateGroupRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateGroupRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        CreateGroupRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateGroupRes();
        CreateGroupRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateGroupRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateGroupRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
CreateGroupRes.id = 'proto.pub.v1.group.CreateGroupRes';
/**
 * Message implementation for proto.pub.v1.group.ModifyGroupReq
 */
class ModifyGroupReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ModifyGroupReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.info = _value.info ? new GroupInfo(_value.info) : undefined;
        ModifyGroupReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ModifyGroupReq();
        ModifyGroupReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.info = _instance.info || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.info = new GroupInfo();
                    _reader.readMessage(_instance.info, GroupInfo.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ModifyGroupReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.info) {
            _writer.writeMessage(2, _instance.info, GroupInfo.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ModifyGroupReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            info: this.info ? this.info.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            info: this.info ? this.info.toProtobufJSON(options) : null
        };
    }
}
ModifyGroupReq.id = 'proto.pub.v1.group.ModifyGroupReq';
/**
 * Message implementation for proto.pub.v1.group.ModifyGroupRes
 */
class ModifyGroupRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ModifyGroupRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ModifyGroupRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ModifyGroupRes();
        ModifyGroupRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ModifyGroupRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ModifyGroupRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ModifyGroupRes.id = 'proto.pub.v1.group.ModifyGroupRes';
/**
 * Message implementation for proto.pub.v1.group.ChangeRoleReq
 */
class ChangeRoleReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ChangeRoleReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.member = _value.member
            ? new Member(_value.member)
            : undefined;
        ChangeRoleReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ChangeRoleReq();
        ChangeRoleReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.member = _instance.member || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.member = new Member();
                    _reader.readMessage(_instance.member, Member.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ChangeRoleReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.member) {
            _writer.writeMessage(2, _instance.member, Member.serializeBinaryToWriter);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get member() {
        return this._member;
    }
    set member(value) {
        this._member = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ChangeRoleReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            member: this.member ? this.member.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            member: this.member ? this.member.toProtobufJSON(options) : null
        };
    }
}
ChangeRoleReq.id = 'proto.pub.v1.group.ChangeRoleReq';
/**
 * Message implementation for proto.pub.v1.group.ChangeRoleRes
 */
class ChangeRoleRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ChangeRoleRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ChangeRoleRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ChangeRoleRes();
        ChangeRoleRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ChangeRoleRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ChangeRoleRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ChangeRoleRes.id = 'proto.pub.v1.group.ChangeRoleRes';
/**
 * Message implementation for proto.pub.v1.group.RemoveGroupReq
 */
class RemoveGroupReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveGroupReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        RemoveGroupReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveGroupReq();
        RemoveGroupReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveGroupReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveGroupReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
RemoveGroupReq.id = 'proto.pub.v1.group.RemoveGroupReq';
/**
 * Message implementation for proto.pub.v1.group.RemoveGroupRes
 */
class RemoveGroupRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveGroupRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemoveGroupRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveGroupRes();
        RemoveGroupRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemoveGroupRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveGroupRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemoveGroupRes.id = 'proto.pub.v1.group.RemoveGroupRes';
/**
 * Message implementation for proto.pub.v1.group.AddMembersReq
 */
class AddMembersReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddMembersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.members = (_value.members || []).map(m => new Member(m));
        AddMembersReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddMembersReq();
        AddMembersReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.members = _instance.members || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    const messageInitializer2 = new Member();
                    _reader.readMessage(messageInitializer2, Member.deserializeBinaryFromReader);
                    (_instance.members = _instance.members || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddMembersReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.members && _instance.members.length) {
            _writer.writeRepeatedMessage(2, _instance.members, Member.serializeBinaryToWriter);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get members() {
        return this._members;
    }
    set members(value) {
        this._members = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddMembersReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            members: (this.members || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            members: (this.members || []).map(m => m.toProtobufJSON(options))
        };
    }
}
AddMembersReq.id = 'proto.pub.v1.group.AddMembersReq';
/**
 * Message implementation for proto.pub.v1.group.AddMembersRes
 */
class AddMembersRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddMembersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        AddMembersRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddMembersRes();
        AddMembersRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        AddMembersRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddMembersRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
AddMembersRes.id = 'proto.pub.v1.group.AddMembersRes';
/**
 * Message implementation for proto.pub.v1.group.KickMembersReq
 */
class KickMembersReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of KickMembersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.members = (_value.members || []).map(m => new Uid(m));
        KickMembersReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new KickMembersReq();
        KickMembersReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.members = _instance.members || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    const messageInitializer2 = new Uid();
                    _reader.readMessage(messageInitializer2, Uid.deserializeBinaryFromReader);
                    (_instance.members = _instance.members || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        KickMembersReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.members && _instance.members.length) {
            _writer.writeRepeatedMessage(2, _instance.members, Uid.serializeBinaryToWriter);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get members() {
        return this._members;
    }
    set members(value) {
        this._members = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        KickMembersReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            members: (this.members || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            members: (this.members || []).map(m => m.toProtobufJSON(options))
        };
    }
}
KickMembersReq.id = 'proto.pub.v1.group.KickMembersReq';
/**
 * Message implementation for proto.pub.v1.group.KickMembersRes
 */
class KickMembersRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of KickMembersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        KickMembersRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new KickMembersRes();
        KickMembersRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        KickMembersRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        KickMembersRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
KickMembersRes.id = 'proto.pub.v1.group.KickMembersRes';
/**
 * Message implementation for proto.pub.v1.group.BanMemberReq
 */
class BanMemberReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BanMemberReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.member = _value.member
            ? new Uid(_value.member)
            : undefined;
        BanMemberReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BanMemberReq();
        BanMemberReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.member = _instance.member || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.member = new Uid();
                    _reader.readMessage(_instance.member, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BanMemberReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.member) {
            _writer.writeMessage(2, _instance.member, Uid.serializeBinaryToWriter);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get member() {
        return this._member;
    }
    set member(value) {
        this._member = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BanMemberReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            member: this.member ? this.member.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            member: this.member ? this.member.toProtobufJSON(options) : null
        };
    }
}
BanMemberReq.id = 'proto.pub.v1.group.BanMemberReq';
/**
 * Message implementation for proto.pub.v1.group.BanMemberRes
 */
class BanMemberRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BanMemberRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        BanMemberRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BanMemberRes();
        BanMemberRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        BanMemberRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BanMemberRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
BanMemberRes.id = 'proto.pub.v1.group.BanMemberRes';
/**
 * Message implementation for proto.pub.v1.group.UnbanMemberReq
 */
class UnbanMemberReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnbanMemberReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.member = _value.member
            ? new Uid(_value.member)
            : undefined;
        UnbanMemberReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnbanMemberReq();
        UnbanMemberReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.member = _instance.member || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.member = new Uid();
                    _reader.readMessage(_instance.member, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UnbanMemberReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.member) {
            _writer.writeMessage(2, _instance.member, Uid.serializeBinaryToWriter);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get member() {
        return this._member;
    }
    set member(value) {
        this._member = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnbanMemberReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            member: this.member ? this.member.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            member: this.member ? this.member.toProtobufJSON(options) : null
        };
    }
}
UnbanMemberReq.id = 'proto.pub.v1.group.UnbanMemberReq';
/**
 * Message implementation for proto.pub.v1.group.UnbanMemberRes
 */
class UnbanMemberRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnbanMemberRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UnbanMemberRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnbanMemberRes();
        UnbanMemberRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UnbanMemberRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnbanMemberRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UnbanMemberRes.id = 'proto.pub.v1.group.UnbanMemberRes';
/**
 * Message implementation for proto.pub.v1.group.GetGroupReq
 */
class GetGroupReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetGroupReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.token = _value.token;
        GetGroupReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetGroupReq();
        GetGroupReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetGroupReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetGroupReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            token: this.token
        };
    }
}
GetGroupReq.id = 'proto.pub.v1.group.GetGroupReq';
/**
 * Message implementation for proto.pub.v1.group.GetGroupRes
 */
class GetGroupRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetGroupRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.info = _value.info ? new GroupInfo(_value.info) : undefined;
        this.population = _value.population;
        this.token = _value.token;
        this.pinMessages = (_value.pinMessages || []).slice();
        this.lastMessageId = _value.lastMessageId;
        this.requesterRole = _value.requesterRole;
        this.rollToken = _value.rollToken;
        GetGroupRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetGroupRes();
        GetGroupRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.info = _instance.info || undefined;
        _instance.population = _instance.population || '0';
        _instance.token = _instance.token || '';
        _instance.pinMessages = _instance.pinMessages || [];
        _instance.lastMessageId = _instance.lastMessageId || '0';
        _instance.requesterRole = _instance.requesterRole || 0;
        _instance.rollToken = _instance.rollToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.info = new GroupInfo();
                    _reader.readMessage(_instance.info, GroupInfo.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.population = _reader.readInt64String();
                    break;
                case 4:
                    _instance.token = _reader.readString();
                    break;
                case 5:
                    (_instance.pinMessages = _instance.pinMessages || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                case 6:
                    _instance.lastMessageId = _reader.readInt64String();
                    break;
                case 3:
                    _instance.requesterRole = _reader.readEnum();
                    break;
                case 7:
                    _instance.rollToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetGroupRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.info) {
            _writer.writeMessage(1, _instance.info, GroupInfo.serializeBinaryToWriter);
        }
        if (_instance.population) {
            _writer.writeInt64String(2, _instance.population);
        }
        if (_instance.token) {
            _writer.writeString(4, _instance.token);
        }
        if (_instance.pinMessages && _instance.pinMessages.length) {
            _writer.writePackedInt64String(5, _instance.pinMessages);
        }
        if (_instance.lastMessageId) {
            _writer.writeInt64String(6, _instance.lastMessageId);
        }
        if (_instance.requesterRole) {
            _writer.writeEnum(3, _instance.requesterRole);
        }
        if (_instance.rollToken) {
            _writer.writeString(7, _instance.rollToken);
        }
    }
    get info() {
        return this._info;
    }
    set info(value) {
        this._info = value;
    }
    get population() {
        return this._population;
    }
    set population(value) {
        this._population = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    get pinMessages() {
        return this._pinMessages;
    }
    set pinMessages(value) {
        this._pinMessages = value;
    }
    get lastMessageId() {
        return this._lastMessageId;
    }
    set lastMessageId(value) {
        this._lastMessageId = value;
    }
    get requesterRole() {
        return this._requesterRole;
    }
    set requesterRole(value) {
        this._requesterRole = value;
    }
    get rollToken() {
        return this._rollToken;
    }
    set rollToken(value) {
        this._rollToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetGroupRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            info: this.info ? this.info.toObject() : undefined,
            population: this.population,
            token: this.token,
            pinMessages: (this.pinMessages || []).slice(),
            lastMessageId: this.lastMessageId,
            requesterRole: this.requesterRole,
            rollToken: this.rollToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            info: this.info ? this.info.toProtobufJSON(options) : null,
            population: this.population,
            token: this.token,
            pinMessages: (this.pinMessages || []).slice(),
            lastMessageId: this.lastMessageId,
            requesterRole: Role[this.requesterRole === null || this.requesterRole === undefined
                ? 0
                : this.requesterRole],
            rollToken: this.rollToken
        };
    }
}
GetGroupRes.id = 'proto.pub.v1.group.GetGroupRes';
/**
 * Message implementation for proto.pub.v1.group.GetMembersReq
 */
class GetMembersReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMembersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        GetMembersReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMembersReq();
        GetMembersReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.pointer = _instance.pointer || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt32();
                    break;
                case 3:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMembersReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt32(2, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(3, _instance.limit);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMembersReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            pointer: this.pointer,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            limit: this.limit
        };
    }
}
GetMembersReq.id = 'proto.pub.v1.group.GetMembersReq';
/**
 * Message implementation for proto.pub.v1.group.GetMembersRes
 */
class GetMembersRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMembersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.members = (_value.members || []).map(m => new Member(m));
        this.finished = _value.finished;
        GetMembersRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMembersRes();
        GetMembersRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.members = _instance.members || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Member();
                    _reader.readMessage(messageInitializer1, Member.deserializeBinaryFromReader);
                    (_instance.members = _instance.members || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMembersRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.members && _instance.members.length) {
            _writer.writeRepeatedMessage(1, _instance.members, Member.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get members() {
        return this._members;
    }
    set members(value) {
        this._members = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMembersRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            members: (this.members || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            members: (this.members || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
GetMembersRes.id = 'proto.pub.v1.group.GetMembersRes';
/**
 * Message implementation for proto.pub.v1.group.JoinGroupReq
 */
class JoinGroupReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of JoinGroupReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.token = _value.token;
        JoinGroupReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new JoinGroupReq();
        JoinGroupReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        JoinGroupReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.token) {
            _writer.writeString(2, _instance.token);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        JoinGroupReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            token: this.token
        };
    }
}
JoinGroupReq.id = 'proto.pub.v1.group.JoinGroupReq';
/**
 * Message implementation for proto.pub.v1.group.JoinGroupRes
 */
class JoinGroupRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of JoinGroupRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        JoinGroupRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new JoinGroupRes();
        JoinGroupRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        JoinGroupRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        JoinGroupRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
JoinGroupRes.id = 'proto.pub.v1.group.JoinGroupRes';
/**
 * Message implementation for proto.pub.v1.group.LeaveGroupReq
 */
class LeaveGroupReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LeaveGroupReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        LeaveGroupReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LeaveGroupReq();
        LeaveGroupReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        LeaveGroupReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LeaveGroupReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null
        };
    }
}
LeaveGroupReq.id = 'proto.pub.v1.group.LeaveGroupReq';
/**
 * Message implementation for proto.pub.v1.group.LeaveGroupRes
 */
class LeaveGroupRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LeaveGroupRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        LeaveGroupRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LeaveGroupRes();
        LeaveGroupRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        LeaveGroupRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LeaveGroupRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
LeaveGroupRes.id = 'proto.pub.v1.group.LeaveGroupRes';
/**
 * Message implementation for proto.pub.v1.group.CreateTokenReq
 */
class CreateTokenReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateTokenReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.validUntil = _value.validUntil;
        this.numberOfAvailableJoins = _value.numberOfAvailableJoins;
        CreateTokenReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateTokenReq();
        CreateTokenReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.validUntil = _instance.validUntil || '0';
        _instance.numberOfAvailableJoins = _instance.numberOfAvailableJoins || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.validUntil = _reader.readInt64String();
                    break;
                case 3:
                    _instance.numberOfAvailableJoins = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateTokenReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.validUntil) {
            _writer.writeInt64String(2, _instance.validUntil);
        }
        if (_instance.numberOfAvailableJoins) {
            _writer.writeInt64String(3, _instance.numberOfAvailableJoins);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get validUntil() {
        return this._validUntil;
    }
    set validUntil(value) {
        this._validUntil = value;
    }
    get numberOfAvailableJoins() {
        return this._numberOfAvailableJoins;
    }
    set numberOfAvailableJoins(value) {
        this._numberOfAvailableJoins = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateTokenReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            validUntil: this.validUntil,
            numberOfAvailableJoins: this.numberOfAvailableJoins
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            validUntil: this.validUntil,
            numberOfAvailableJoins: this.numberOfAvailableJoins
        };
    }
}
CreateTokenReq.id = 'proto.pub.v1.group.CreateTokenReq';
/**
 * Message implementation for proto.pub.v1.group.CreateTokenRes
 */
class CreateTokenRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.joinToken = _value.joinToken;
        CreateTokenRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateTokenRes();
        CreateTokenRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.joinToken = _instance.joinToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.joinToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateTokenRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.joinToken) {
            _writer.writeString(1, _instance.joinToken);
        }
    }
    get joinToken() {
        return this._joinToken;
    }
    set joinToken(value) {
        this._joinToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateTokenRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            joinToken: this.joinToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            joinToken: this.joinToken
        };
    }
}
CreateTokenRes.id = 'proto.pub.v1.group.CreateTokenRes';
/**
 * Message implementation for proto.pub.v1.group.DeleteTokenReq
 */
class DeleteTokenReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteTokenReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        DeleteTokenReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteTokenReq();
        DeleteTokenReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteTokenReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteTokenReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
DeleteTokenReq.id = 'proto.pub.v1.group.DeleteTokenReq';
/**
 * Message implementation for proto.pub.v1.group.DeleteTokenRes
 */
class DeleteTokenRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        DeleteTokenRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteTokenRes();
        DeleteTokenRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        DeleteTokenRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteTokenRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
DeleteTokenRes.id = 'proto.pub.v1.group.DeleteTokenRes';
/**
 * Message implementation for proto.pub.v1.group.PinMessageReq
 */
class PinMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PinMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.messageId = _value.messageId;
        PinMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PinMessageReq();
        PinMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PinMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PinMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
PinMessageReq.id = 'proto.pub.v1.group.PinMessageReq';
/**
 * Message implementation for proto.pub.v1.group.PinMessageRes
 */
class PinMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PinMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        PinMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PinMessageRes();
        PinMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        PinMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PinMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
PinMessageRes.id = 'proto.pub.v1.group.PinMessageRes';
/**
 * Message implementation for proto.pub.v1.group.UnpinMessageReq
 */
class UnpinMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnpinMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.messageId = _value.messageId;
        UnpinMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnpinMessageReq();
        UnpinMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UnpinMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnpinMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
UnpinMessageReq.id = 'proto.pub.v1.group.UnpinMessageReq';
/**
 * Message implementation for proto.pub.v1.group.UnpinMessageRes
 */
class UnpinMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnpinMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UnpinMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnpinMessageRes();
        UnpinMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UnpinMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnpinMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UnpinMessageRes.id = 'proto.pub.v1.group.UnpinMessageRes';

var group_pb$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GroupInfo: GroupInfo,
    GroupAdmin: GroupAdmin,
    CreateGroupReq: CreateGroupReq,
    CreateGroupRes: CreateGroupRes,
    ModifyGroupReq: ModifyGroupReq,
    ModifyGroupRes: ModifyGroupRes,
    ChangeRoleReq: ChangeRoleReq,
    ChangeRoleRes: ChangeRoleRes,
    RemoveGroupReq: RemoveGroupReq,
    RemoveGroupRes: RemoveGroupRes,
    AddMembersReq: AddMembersReq,
    AddMembersRes: AddMembersRes,
    KickMembersReq: KickMembersReq,
    KickMembersRes: KickMembersRes,
    BanMemberReq: BanMemberReq,
    BanMemberRes: BanMemberRes,
    UnbanMemberReq: UnbanMemberReq,
    UnbanMemberRes: UnbanMemberRes,
    GetGroupReq: GetGroupReq,
    GetGroupRes: GetGroupRes,
    GetMembersReq: GetMembersReq,
    GetMembersRes: GetMembersRes,
    JoinGroupReq: JoinGroupReq,
    JoinGroupRes: JoinGroupRes,
    LeaveGroupReq: LeaveGroupReq,
    LeaveGroupRes: LeaveGroupRes,
    CreateTokenReq: CreateTokenReq,
    CreateTokenRes: CreateTokenRes,
    DeleteTokenReq: DeleteTokenReq,
    DeleteTokenRes: DeleteTokenRes,
    PinMessageReq: PinMessageReq,
    PinMessageRes: PinMessageRes,
    UnpinMessageReq: UnpinMessageReq,
    UnpinMessageRes: UnpinMessageRes
});

/* tslint:disable */
/**
 * Specific GrpcClientSettings for GroupService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_GROUP_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_GROUP_SERVICE_CLIENT_SETTINGS');

var group_pbconf$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GRPC_GROUP_SERVICE_CLIENT_SETTINGS: GRPC_GROUP_SERVICE_CLIENT_SETTINGS
});

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.group.GroupService
 */
class GroupServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.group.GroupService/CreateGroup
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreateGroupRes>>
             */
            createGroup: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/CreateGroup',
                    requestData,
                    requestMetadata,
                    requestClass: CreateGroupReq,
                    responseClass: CreateGroupRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/ModifyGroup
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ModifyGroupRes>>
             */
            modifyGroup: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/ModifyGroup',
                    requestData,
                    requestMetadata,
                    requestClass: ModifyGroupReq,
                    responseClass: ModifyGroupRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/GetGroup
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetGroupRes>>
             */
            getGroup: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/GetGroup',
                    requestData,
                    requestMetadata,
                    requestClass: GetGroupReq,
                    responseClass: GetGroupRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/ChangeRole
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ChangeRoleRes>>
             */
            changeRole: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/ChangeRole',
                    requestData,
                    requestMetadata,
                    requestClass: ChangeRoleReq,
                    responseClass: ChangeRoleRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/RemoveGroup
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RemoveGroupRes>>
             */
            removeGroup: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/RemoveGroup',
                    requestData,
                    requestMetadata,
                    requestClass: RemoveGroupReq,
                    responseClass: RemoveGroupRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/AddMembers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AddMembersRes>>
             */
            addMembers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/AddMembers',
                    requestData,
                    requestMetadata,
                    requestClass: AddMembersReq,
                    responseClass: AddMembersRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/KickMembers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.KickMembersRes>>
             */
            kickMembers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/KickMembers',
                    requestData,
                    requestMetadata,
                    requestClass: KickMembersReq,
                    responseClass: KickMembersRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/BanMember
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BanMemberRes>>
             */
            banMember: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/BanMember',
                    requestData,
                    requestMetadata,
                    requestClass: BanMemberReq,
                    responseClass: BanMemberRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/UnbanMember
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UnbanMemberRes>>
             */
            unbanMember: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/UnbanMember',
                    requestData,
                    requestMetadata,
                    requestClass: UnbanMemberReq,
                    responseClass: UnbanMemberRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/GetMembers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetMembersRes>>
             */
            getMembers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/GetMembers',
                    requestData,
                    requestMetadata,
                    requestClass: GetMembersReq,
                    responseClass: GetMembersRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/JoinGroup
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.JoinGroupRes>>
             */
            joinGroup: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/JoinGroup',
                    requestData,
                    requestMetadata,
                    requestClass: JoinGroupReq,
                    responseClass: JoinGroupRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/LeaveGroup
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.LeaveGroupRes>>
             */
            leaveGroup: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/LeaveGroup',
                    requestData,
                    requestMetadata,
                    requestClass: LeaveGroupReq,
                    responseClass: LeaveGroupRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/CreateToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreateTokenRes>>
             */
            createToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/CreateToken',
                    requestData,
                    requestMetadata,
                    requestClass: CreateTokenReq,
                    responseClass: CreateTokenRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/DeleteToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.DeleteTokenRes>>
             */
            deleteToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/DeleteToken',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteTokenReq,
                    responseClass: DeleteTokenRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/PinMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PinMessageRes>>
             */
            pinMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/PinMessage',
                    requestData,
                    requestMetadata,
                    requestClass: PinMessageReq,
                    responseClass: PinMessageRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.group.GroupService/UnpinMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UnpinMessageRes>>
             */
            unpinMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.group.GroupService/UnpinMessage',
                    requestData,
                    requestMetadata,
                    requestClass: UnpinMessageReq,
                    responseClass: UnpinMessageRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.group.GroupService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/CreateGroup
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreateGroupRes>
     */
    createGroup(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createGroup(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/ModifyGroup
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ModifyGroupRes>
     */
    modifyGroup(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .modifyGroup(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/GetGroup
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetGroupRes>
     */
    getGroup(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getGroup(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/ChangeRole
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ChangeRoleRes>
     */
    changeRole(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .changeRole(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/RemoveGroup
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RemoveGroupRes>
     */
    removeGroup(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removeGroup(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/AddMembers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AddMembersRes>
     */
    addMembers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addMembers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/KickMembers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.KickMembersRes>
     */
    kickMembers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .kickMembers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/BanMember
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BanMemberRes>
     */
    banMember(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .banMember(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/UnbanMember
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UnbanMemberRes>
     */
    unbanMember(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .unbanMember(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/GetMembers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetMembersRes>
     */
    getMembers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getMembers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/JoinGroup
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.JoinGroupRes>
     */
    joinGroup(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .joinGroup(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/LeaveGroup
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.LeaveGroupRes>
     */
    leaveGroup(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .leaveGroup(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/CreateToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreateTokenRes>
     */
    createToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/DeleteToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.DeleteTokenRes>
     */
    deleteToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/PinMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PinMessageRes>
     */
    pinMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .pinMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.group.GroupService/UnpinMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UnpinMessageRes>
     */
    unpinMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .unpinMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
GroupServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: GroupServiceClient, deps: [{ token: GRPC_GROUP_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
GroupServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: GroupServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: GroupServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_GROUP_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

var group_pbsc$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GroupServiceClient: GroupServiceClient
});

/**
 * Message implementation for proto.pub.v1.live_location.CreateLiveLocationReq
 */
class CreateLiveLocationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateLiveLocationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new Uid(_value.room)
            : undefined;
        this.duration = _value.duration;
        CreateLiveLocationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateLiveLocationReq();
        CreateLiveLocationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
        _instance.duration = _instance.duration || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new Uid();
                    _reader.readMessage(_instance.room, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.duration = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateLiveLocationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, Uid.serializeBinaryToWriter);
        }
        if (_instance.duration) {
            _writer.writeInt64String(2, _instance.duration);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    get duration() {
        return this._duration;
    }
    set duration(value) {
        this._duration = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateLiveLocationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined,
            duration: this.duration
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null,
            duration: this.duration
        };
    }
}
CreateLiveLocationReq.id = 'proto.pub.v1.live_location.CreateLiveLocationReq';
/**
 * Message implementation for proto.pub.v1.live_location.CreateLiveLocationRes
 */
class CreateLiveLocationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateLiveLocationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.endAt = _value.endAt;
        CreateLiveLocationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateLiveLocationRes();
        CreateLiveLocationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.endAt = _instance.endAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.endAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateLiveLocationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.endAt) {
            _writer.writeInt64String(2, _instance.endAt);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get endAt() {
        return this._endAt;
    }
    set endAt(value) {
        this._endAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateLiveLocationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            endAt: this.endAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            endAt: this.endAt
        };
    }
}
CreateLiveLocationRes.id = 'proto.pub.v1.live_location.CreateLiveLocationRes';
/**
 * Message implementation for proto.pub.v1.live_location.UpdateLocationReq
 */
class UpdateLocationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateLocationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.location = _value.location
            ? new Location(_value.location)
            : undefined;
        UpdateLocationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateLocationReq();
        UpdateLocationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.location = _instance.location || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.location = new Location();
                    _reader.readMessage(_instance.location, Location.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateLocationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.location) {
            _writer.writeMessage(1, _instance.location, Location.serializeBinaryToWriter);
        }
    }
    get location() {
        return this._location;
    }
    set location(value) {
        this._location = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateLocationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            location: this.location ? this.location.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            location: this.location ? this.location.toProtobufJSON(options) : null
        };
    }
}
UpdateLocationReq.id = 'proto.pub.v1.live_location.UpdateLocationReq';
/**
 * Message implementation for proto.pub.v1.live_location.UpdateLocationRes
 */
class UpdateLocationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateLocationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UpdateLocationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateLocationRes();
        UpdateLocationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UpdateLocationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateLocationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UpdateLocationRes.id = 'proto.pub.v1.live_location.UpdateLocationRes';
/**
 * Message implementation for proto.pub.v1.live_location.ShouldSendLiveLocationReq
 */
class ShouldSendLiveLocationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ShouldSendLiveLocationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ShouldSendLiveLocationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ShouldSendLiveLocationReq();
        ShouldSendLiveLocationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ShouldSendLiveLocationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ShouldSendLiveLocationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ShouldSendLiveLocationReq.id = 'proto.pub.v1.live_location.ShouldSendLiveLocationReq';
/**
 * Message implementation for proto.pub.v1.live_location.ShouldSendLiveLocationRes
 */
class ShouldSendLiveLocationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ShouldSendLiveLocationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.shouldSend = _value.shouldSend;
        this.endAt = _value.endAt;
        ShouldSendLiveLocationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ShouldSendLiveLocationRes();
        ShouldSendLiveLocationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.shouldSend = _instance.shouldSend || false;
        _instance.endAt = _instance.endAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.shouldSend = _reader.readBool();
                    break;
                case 2:
                    _instance.endAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ShouldSendLiveLocationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.shouldSend) {
            _writer.writeBool(1, _instance.shouldSend);
        }
        if (_instance.endAt) {
            _writer.writeInt64String(2, _instance.endAt);
        }
    }
    get shouldSend() {
        return this._shouldSend;
    }
    set shouldSend(value) {
        this._shouldSend = value;
    }
    get endAt() {
        return this._endAt;
    }
    set endAt(value) {
        this._endAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ShouldSendLiveLocationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            shouldSend: this.shouldSend,
            endAt: this.endAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            shouldSend: this.shouldSend,
            endAt: this.endAt
        };
    }
}
ShouldSendLiveLocationRes.id = 'proto.pub.v1.live_location.ShouldSendLiveLocationRes';
/**
 * Message implementation for proto.pub.v1.live_location.GetLastUpdatedLiveLocationReq
 */
class GetLastUpdatedLiveLocationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLastUpdatedLiveLocationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        GetLastUpdatedLiveLocationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLastUpdatedLiveLocationReq();
        GetLastUpdatedLiveLocationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLastUpdatedLiveLocationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLastUpdatedLiveLocationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid
        };
    }
}
GetLastUpdatedLiveLocationReq.id = 'proto.pub.v1.live_location.GetLastUpdatedLiveLocationReq';
/**
 * Message implementation for proto.pub.v1.live_location.GetLastUpdatedLiveLocationRes
 */
class GetLastUpdatedLiveLocationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLastUpdatedLiveLocationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.liveLocations = (_value.liveLocations || []).map(m => new LiveLocation(m));
        GetLastUpdatedLiveLocationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLastUpdatedLiveLocationRes();
        GetLastUpdatedLiveLocationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.liveLocations = _instance.liveLocations || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new LiveLocation();
                    _reader.readMessage(messageInitializer1, LiveLocation.deserializeBinaryFromReader);
                    (_instance.liveLocations = _instance.liveLocations || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLastUpdatedLiveLocationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.liveLocations && _instance.liveLocations.length) {
            _writer.writeRepeatedMessage(1, _instance.liveLocations, LiveLocation.serializeBinaryToWriter);
        }
    }
    get liveLocations() {
        return this._liveLocations;
    }
    set liveLocations(value) {
        this._liveLocations = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLastUpdatedLiveLocationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            liveLocations: (this.liveLocations || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            liveLocations: (this.liveLocations || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetLastUpdatedLiveLocationRes.id = 'proto.pub.v1.live_location.GetLastUpdatedLiveLocationRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for LiveLocationService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_LIVE_LOCATION_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_LIVE_LOCATION_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.live_location.LiveLocationService
 */
class LiveLocationServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.live_location.LiveLocationService/CreateLiveLocation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreateLiveLocationRes>>
             */
            createLiveLocation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.LiveLocationService/CreateLiveLocation',
                    requestData,
                    requestMetadata,
                    requestClass: CreateLiveLocationReq,
                    responseClass: CreateLiveLocationRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.LiveLocationService/UpdateLocation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UpdateLocationRes>>
             */
            updateLocation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.LiveLocationService/UpdateLocation',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateLocationReq,
                    responseClass: UpdateLocationRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.LiveLocationService/ShouldSendLiveLocation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ShouldSendLiveLocationRes>>
             */
            shouldSendLiveLocation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.LiveLocationService/ShouldSendLiveLocation',
                    requestData,
                    requestMetadata,
                    requestClass: ShouldSendLiveLocationReq,
                    responseClass: ShouldSendLiveLocationRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.LiveLocationService/GetLastUpdatedLiveLocation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetLastUpdatedLiveLocationRes>>
             */
            getLastUpdatedLiveLocation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.LiveLocationService/GetLastUpdatedLiveLocation',
                    requestData,
                    requestMetadata,
                    requestClass: GetLastUpdatedLiveLocationReq,
                    responseClass: GetLastUpdatedLiveLocationRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.live_location.LiveLocationService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.live_location.LiveLocationService/CreateLiveLocation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreateLiveLocationRes>
     */
    createLiveLocation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createLiveLocation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.LiveLocationService/UpdateLocation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UpdateLocationRes>
     */
    updateLocation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateLocation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.LiveLocationService/ShouldSendLiveLocation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ShouldSendLiveLocationRes>
     */
    shouldSendLiveLocation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .shouldSendLiveLocation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.LiveLocationService/GetLastUpdatedLiveLocation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetLastUpdatedLiveLocationRes>
     */
    getLastUpdatedLiveLocation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getLastUpdatedLiveLocation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
LiveLocationServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: LiveLocationServiceClient, deps: [{ token: GRPC_LIVE_LOCATION_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
LiveLocationServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: LiveLocationServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: LiveLocationServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_LIVE_LOCATION_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.payment.GetUserInfoReq
 */
class GetUserInfoReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserInfoReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.forceToSyncWithPaymentProvider = _value.forceToSyncWithPaymentProvider;
        GetUserInfoReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserInfoReq();
        GetUserInfoReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.forceToSyncWithPaymentProvider =
            _instance.forceToSyncWithPaymentProvider || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.forceToSyncWithPaymentProvider = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserInfoReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.forceToSyncWithPaymentProvider) {
            _writer.writeBool(1, _instance.forceToSyncWithPaymentProvider);
        }
    }
    get forceToSyncWithPaymentProvider() {
        return this._forceToSyncWithPaymentProvider;
    }
    set forceToSyncWithPaymentProvider(value) {
        this._forceToSyncWithPaymentProvider = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserInfoReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            forceToSyncWithPaymentProvider: this.forceToSyncWithPaymentProvider
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            forceToSyncWithPaymentProvider: this.forceToSyncWithPaymentProvider
        };
    }
}
GetUserInfoReq.id = 'proto.pub.v1.payment.GetUserInfoReq';
/**
 * Message implementation for proto.pub.v1.payment.GetUserInfoRes
 */
class GetUserInfoRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserInfoRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.lastUpdateTime = _value.lastUpdateTime;
        this.balance = _value.balance;
        this.withdrawLimit = _value.withdrawLimit;
        GetUserInfoRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserInfoRes();
        GetUserInfoRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.lastUpdateTime = _instance.lastUpdateTime || '0';
        _instance.balance = _instance.balance || '0';
        _instance.withdrawLimit = _instance.withdrawLimit || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.lastUpdateTime = _reader.readInt64String();
                    break;
                case 2:
                    _instance.balance = _reader.readInt64String();
                    break;
                case 3:
                    _instance.withdrawLimit = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserInfoRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.lastUpdateTime) {
            _writer.writeInt64String(1, _instance.lastUpdateTime);
        }
        if (_instance.balance) {
            _writer.writeInt64String(2, _instance.balance);
        }
        if (_instance.withdrawLimit) {
            _writer.writeInt64String(3, _instance.withdrawLimit);
        }
    }
    get lastUpdateTime() {
        return this._lastUpdateTime;
    }
    set lastUpdateTime(value) {
        this._lastUpdateTime = value;
    }
    get balance() {
        return this._balance;
    }
    set balance(value) {
        this._balance = value;
    }
    get withdrawLimit() {
        return this._withdrawLimit;
    }
    set withdrawLimit(value) {
        this._withdrawLimit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserInfoRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            lastUpdateTime: this.lastUpdateTime,
            balance: this.balance,
            withdrawLimit: this.withdrawLimit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            lastUpdateTime: this.lastUpdateTime,
            balance: this.balance,
            withdrawLimit: this.withdrawLimit
        };
    }
}
GetUserInfoRes.id = 'proto.pub.v1.payment.GetUserInfoRes';
/**
 * Message implementation for proto.pub.v1.payment.GetTransactionsCountReq
 */
class GetTransactionsCountReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTransactionsCountReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.startFrom = _value.startFrom;
        this.endAt = _value.endAt;
        GetTransactionsCountReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTransactionsCountReq();
        GetTransactionsCountReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.startFrom = _instance.startFrom || '0';
        _instance.endAt = _instance.endAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.startFrom = _reader.readInt64String();
                    break;
                case 2:
                    _instance.endAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTransactionsCountReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.startFrom) {
            _writer.writeInt64String(1, _instance.startFrom);
        }
        if (_instance.endAt) {
            _writer.writeInt64String(2, _instance.endAt);
        }
    }
    get startFrom() {
        return this._startFrom;
    }
    set startFrom(value) {
        this._startFrom = value;
    }
    get endAt() {
        return this._endAt;
    }
    set endAt(value) {
        this._endAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTransactionsCountReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
}
GetTransactionsCountReq.id = 'proto.pub.v1.payment.GetTransactionsCountReq';
/**
 * Message implementation for proto.pub.v1.payment.GetTransactionsCountRes
 */
class GetTransactionsCountRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTransactionsCountRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.count = _value.count;
        GetTransactionsCountRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTransactionsCountRes();
        GetTransactionsCountRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.count = _instance.count || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.count = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTransactionsCountRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.count) {
            _writer.writeInt64String(1, _instance.count);
        }
    }
    get count() {
        return this._count;
    }
    set count(value) {
        this._count = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTransactionsCountRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            count: this.count
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            count: this.count
        };
    }
}
GetTransactionsCountRes.id = 'proto.pub.v1.payment.GetTransactionsCountRes';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawsCountReq
 */
class GetWithdrawsCountReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawsCountReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.startFrom = _value.startFrom;
        this.endAt = _value.endAt;
        GetWithdrawsCountReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawsCountReq();
        GetWithdrawsCountReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.startFrom = _instance.startFrom || '0';
        _instance.endAt = _instance.endAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.startFrom = _reader.readInt64String();
                    break;
                case 2:
                    _instance.endAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawsCountReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.startFrom) {
            _writer.writeInt64String(1, _instance.startFrom);
        }
        if (_instance.endAt) {
            _writer.writeInt64String(2, _instance.endAt);
        }
    }
    get startFrom() {
        return this._startFrom;
    }
    set startFrom(value) {
        this._startFrom = value;
    }
    get endAt() {
        return this._endAt;
    }
    set endAt(value) {
        this._endAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawsCountReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
}
GetWithdrawsCountReq.id = 'proto.pub.v1.payment.GetWithdrawsCountReq';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawsCountRes
 */
class GetWithdrawsCountRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawsCountRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.count = _value.count;
        GetWithdrawsCountRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawsCountRes();
        GetWithdrawsCountRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.count = _instance.count || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.count = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawsCountRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.count) {
            _writer.writeInt64String(1, _instance.count);
        }
    }
    get count() {
        return this._count;
    }
    set count(value) {
        this._count = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawsCountRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            count: this.count
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            count: this.count
        };
    }
}
GetWithdrawsCountRes.id = 'proto.pub.v1.payment.GetWithdrawsCountRes';
/**
 * Message implementation for proto.pub.v1.payment.GetTransactionsReq
 */
class GetTransactionsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTransactionsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        this.startFrom = _value.startFrom;
        this.endAt = _value.endAt;
        GetTransactionsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTransactionsReq();
        GetTransactionsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pointer = _instance.pointer || 0;
        _instance.limit = _instance.limit || 0;
        _instance.startFrom = _instance.startFrom || '0';
        _instance.endAt = _instance.endAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pointer = _reader.readInt32();
                    break;
                case 2:
                    _instance.limit = _reader.readInt32();
                    break;
                case 3:
                    _instance.startFrom = _reader.readInt64String();
                    break;
                case 4:
                    _instance.endAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTransactionsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pointer) {
            _writer.writeInt32(1, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(2, _instance.limit);
        }
        if (_instance.startFrom) {
            _writer.writeInt64String(3, _instance.startFrom);
        }
        if (_instance.endAt) {
            _writer.writeInt64String(4, _instance.endAt);
        }
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get startFrom() {
        return this._startFrom;
    }
    set startFrom(value) {
        this._startFrom = value;
    }
    get endAt() {
        return this._endAt;
    }
    set endAt(value) {
        this._endAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTransactionsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pointer: this.pointer,
            limit: this.limit,
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pointer: this.pointer,
            limit: this.limit,
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
}
GetTransactionsReq.id = 'proto.pub.v1.payment.GetTransactionsReq';
/**
 * Message implementation for proto.pub.v1.payment.GetTransactionsRes
 */
class GetTransactionsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTransactionsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.transactionList = (_value.transactionList || []).map(m => new Transaction(m));
        GetTransactionsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTransactionsRes();
        GetTransactionsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.transactionList = _instance.transactionList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Transaction();
                    _reader.readMessage(messageInitializer1, Transaction.deserializeBinaryFromReader);
                    (_instance.transactionList = _instance.transactionList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTransactionsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.transactionList && _instance.transactionList.length) {
            _writer.writeRepeatedMessage(1, _instance.transactionList, Transaction.serializeBinaryToWriter);
        }
    }
    get transactionList() {
        return this._transactionList;
    }
    set transactionList(value) {
        this._transactionList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTransactionsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            transactionList: (this.transactionList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            transactionList: (this.transactionList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetTransactionsRes.id = 'proto.pub.v1.payment.GetTransactionsRes';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawsReq
 */
class GetWithdrawsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        this.startFrom = _value.startFrom;
        this.endAt = _value.endAt;
        GetWithdrawsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawsReq();
        GetWithdrawsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pointer = _instance.pointer || 0;
        _instance.limit = _instance.limit || 0;
        _instance.startFrom = _instance.startFrom || '0';
        _instance.endAt = _instance.endAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pointer = _reader.readInt32();
                    break;
                case 2:
                    _instance.limit = _reader.readInt32();
                    break;
                case 3:
                    _instance.startFrom = _reader.readInt64String();
                    break;
                case 4:
                    _instance.endAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pointer) {
            _writer.writeInt32(1, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(2, _instance.limit);
        }
        if (_instance.startFrom) {
            _writer.writeInt64String(3, _instance.startFrom);
        }
        if (_instance.endAt) {
            _writer.writeInt64String(4, _instance.endAt);
        }
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get startFrom() {
        return this._startFrom;
    }
    set startFrom(value) {
        this._startFrom = value;
    }
    get endAt() {
        return this._endAt;
    }
    set endAt(value) {
        this._endAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pointer: this.pointer,
            limit: this.limit,
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pointer: this.pointer,
            limit: this.limit,
            startFrom: this.startFrom,
            endAt: this.endAt
        };
    }
}
GetWithdrawsReq.id = 'proto.pub.v1.payment.GetWithdrawsReq';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawsRes
 */
class GetWithdrawsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.withdrawList = (_value.withdrawList || []).map(m => new Withdraw(m));
        GetWithdrawsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawsRes();
        GetWithdrawsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.withdrawList = _instance.withdrawList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Withdraw();
                    _reader.readMessage(messageInitializer1, Withdraw.deserializeBinaryFromReader);
                    (_instance.withdrawList = _instance.withdrawList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.withdrawList && _instance.withdrawList.length) {
            _writer.writeRepeatedMessage(1, _instance.withdrawList, Withdraw.serializeBinaryToWriter);
        }
    }
    get withdrawList() {
        return this._withdrawList;
    }
    set withdrawList(value) {
        this._withdrawList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            withdrawList: (this.withdrawList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            withdrawList: (this.withdrawList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetWithdrawsRes.id = 'proto.pub.v1.payment.GetWithdrawsRes';
/**
 * Message implementation for proto.pub.v1.payment.TransferReq
 */
class TransferReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TransferReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.amount = _value.amount;
        this.description = _value.description;
        TransferReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TransferReq();
        TransferReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.to = _instance.to || undefined;
        _instance.amount = _instance.amount || '0';
        _instance.description = _instance.description || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 4:
                    _instance.description = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        TransferReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.to) {
            _writer.writeMessage(1, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.amount) {
            _writer.writeInt64String(2, _instance.amount);
        }
        if (_instance.description) {
            _writer.writeString(4, _instance.description);
        }
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TransferReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            to: this.to ? this.to.toObject() : undefined,
            amount: this.amount,
            description: this.description
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            to: this.to ? this.to.toProtobufJSON(options) : null,
            amount: this.amount,
            description: this.description
        };
    }
}
TransferReq.id = 'proto.pub.v1.payment.TransferReq';
/**
 * Message implementation for proto.pub.v1.payment.TransferRes
 */
class TransferRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of TransferRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.transaction = _value.transaction
            ? new Transaction(_value.transaction)
            : undefined;
        TransferRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new TransferRes();
        TransferRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.transaction = _instance.transaction || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.transaction = new Transaction();
                    _reader.readMessage(_instance.transaction, Transaction.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        TransferRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.transaction) {
            _writer.writeMessage(1, _instance.transaction, Transaction.serializeBinaryToWriter);
        }
    }
    get transaction() {
        return this._transaction;
    }
    set transaction(value) {
        this._transaction = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        TransferRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            transaction: this.transaction ? this.transaction.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            transaction: this.transaction
                ? this.transaction.toProtobufJSON(options)
                : null
        };
    }
}
TransferRes.id = 'proto.pub.v1.payment.TransferRes';
/**
 * Message implementation for proto.pub.v1.payment.CreatePaymentReq
 */
class CreatePaymentReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreatePaymentReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.amount = _value.amount;
        this.description = _value.description;
        this.expireAt = _value.expireAt;
        CreatePaymentReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreatePaymentReq();
        CreatePaymentReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.amount = _instance.amount || '0';
        _instance.description = _instance.description || '';
        _instance.expireAt = _instance.expireAt || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 2:
                    _instance.description = _reader.readString();
                    break;
                case 3:
                    _instance.expireAt = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreatePaymentReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.amount) {
            _writer.writeInt64String(1, _instance.amount);
        }
        if (_instance.description) {
            _writer.writeString(2, _instance.description);
        }
        if (_instance.expireAt) {
            _writer.writeInt64String(3, _instance.expireAt);
        }
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get expireAt() {
        return this._expireAt;
    }
    set expireAt(value) {
        this._expireAt = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreatePaymentReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            amount: this.amount,
            description: this.description,
            expireAt: this.expireAt
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            amount: this.amount,
            description: this.description,
            expireAt: this.expireAt
        };
    }
}
CreatePaymentReq.id = 'proto.pub.v1.payment.CreatePaymentReq';
/**
 * Message implementation for proto.pub.v1.payment.CreatePaymentRes
 */
class CreatePaymentRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreatePaymentRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.payment = _value.payment
            ? new Payment(_value.payment)
            : undefined;
        CreatePaymentRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreatePaymentRes();
        CreatePaymentRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.payment = _instance.payment || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.payment = new Payment();
                    _reader.readMessage(_instance.payment, Payment.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreatePaymentRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.payment) {
            _writer.writeMessage(1, _instance.payment, Payment.serializeBinaryToWriter);
        }
    }
    get payment() {
        return this._payment;
    }
    set payment(value) {
        this._payment = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreatePaymentRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            payment: this.payment ? this.payment.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            payment: this.payment ? this.payment.toProtobufJSON(options) : null
        };
    }
}
CreatePaymentRes.id = 'proto.pub.v1.payment.CreatePaymentRes';
/**
 * Message implementation for proto.pub.v1.payment.PayReq
 */
class PayReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PayReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentId = _value.paymentId;
        PayReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PayReq();
        PayReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentId = _instance.paymentId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.paymentId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PayReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentId) {
            _writer.writeString(2, _instance.paymentId);
        }
    }
    get paymentId() {
        return this._paymentId;
    }
    set paymentId(value) {
        this._paymentId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PayReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentId: this.paymentId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentId: this.paymentId
        };
    }
}
PayReq.id = 'proto.pub.v1.payment.PayReq';
/**
 * Message implementation for proto.pub.v1.payment.PayRes
 */
class PayRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PayRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentId = _value.paymentId;
        this.guid = _value.guid;
        PayRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PayRes();
        PayRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentId = _instance.paymentId || '';
        _instance.guid = _instance.guid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.paymentId = _reader.readString();
                    break;
                case 2:
                    _instance.guid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PayRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentId) {
            _writer.writeString(1, _instance.paymentId);
        }
        if (_instance.guid) {
            _writer.writeString(2, _instance.guid);
        }
    }
    get paymentId() {
        return this._paymentId;
    }
    set paymentId(value) {
        this._paymentId = value;
    }
    get guid() {
        return this._guid;
    }
    set guid(value) {
        this._guid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PayRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentId: this.paymentId,
            guid: this.guid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentId: this.paymentId,
            guid: this.guid
        };
    }
}
PayRes.id = 'proto.pub.v1.payment.PayRes';
/**
 * Message implementation for proto.pub.v1.payment.PayConfirmReq
 */
class PayConfirmReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PayConfirmReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.confirmSms = _value.confirmSms;
        this.paymentId = _value.paymentId;
        this.guid = _value.guid;
        PayConfirmReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PayConfirmReq();
        PayConfirmReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.confirmSms = _instance.confirmSms || '';
        _instance.paymentId = _instance.paymentId || '';
        _instance.guid = _instance.guid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.confirmSms = _reader.readString();
                    break;
                case 2:
                    _instance.paymentId = _reader.readString();
                    break;
                case 3:
                    _instance.guid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PayConfirmReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.confirmSms) {
            _writer.writeString(1, _instance.confirmSms);
        }
        if (_instance.paymentId) {
            _writer.writeString(2, _instance.paymentId);
        }
        if (_instance.guid) {
            _writer.writeString(3, _instance.guid);
        }
    }
    get confirmSms() {
        return this._confirmSms;
    }
    set confirmSms(value) {
        this._confirmSms = value;
    }
    get paymentId() {
        return this._paymentId;
    }
    set paymentId(value) {
        this._paymentId = value;
    }
    get guid() {
        return this._guid;
    }
    set guid(value) {
        this._guid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PayConfirmReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            confirmSms: this.confirmSms,
            paymentId: this.paymentId,
            guid: this.guid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            confirmSms: this.confirmSms,
            paymentId: this.paymentId,
            guid: this.guid
        };
    }
}
PayConfirmReq.id = 'proto.pub.v1.payment.PayConfirmReq';
/**
 * Message implementation for proto.pub.v1.payment.PayConfirmRes
 */
class PayConfirmRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PayConfirmRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.transaction = _value.transaction
            ? new Transaction(_value.transaction)
            : undefined;
        PayConfirmRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PayConfirmRes();
        PayConfirmRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.transaction = _instance.transaction || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.transaction = new Transaction();
                    _reader.readMessage(_instance.transaction, Transaction.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        PayConfirmRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.transaction) {
            _writer.writeMessage(1, _instance.transaction, Transaction.serializeBinaryToWriter);
        }
    }
    get transaction() {
        return this._transaction;
    }
    set transaction(value) {
        this._transaction = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PayConfirmRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            transaction: this.transaction ? this.transaction.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            transaction: this.transaction
                ? this.transaction.toProtobufJSON(options)
                : null
        };
    }
}
PayConfirmRes.id = 'proto.pub.v1.payment.PayConfirmRes';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawTariffReq
 */
class GetWithdrawTariffReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawTariffReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.amount = _value.amount;
        this.sheba = _value.sheba;
        GetWithdrawTariffReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawTariffReq();
        GetWithdrawTariffReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.amount = _instance.amount || '0';
        _instance.sheba = _instance.sheba || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 2:
                    _instance.sheba = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawTariffReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.amount) {
            _writer.writeInt64String(1, _instance.amount);
        }
        if (_instance.sheba) {
            _writer.writeString(2, _instance.sheba);
        }
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get sheba() {
        return this._sheba;
    }
    set sheba(value) {
        this._sheba = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawTariffReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            amount: this.amount,
            sheba: this.sheba
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            amount: this.amount,
            sheba: this.sheba
        };
    }
}
GetWithdrawTariffReq.id = 'proto.pub.v1.payment.GetWithdrawTariffReq';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawTariffRes
 */
class GetWithdrawTariffRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawTariffRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.tariff = _value.tariff;
        GetWithdrawTariffRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawTariffRes();
        GetWithdrawTariffRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.tariff = _instance.tariff || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.tariff = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawTariffRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.tariff) {
            _writer.writeInt64String(1, _instance.tariff);
        }
    }
    get tariff() {
        return this._tariff;
    }
    set tariff(value) {
        this._tariff = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawTariffRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            tariff: this.tariff
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            tariff: this.tariff
        };
    }
}
GetWithdrawTariffRes.id = 'proto.pub.v1.payment.GetWithdrawTariffRes';
/**
 * Message implementation for proto.pub.v1.payment.WithdrawReq
 */
class WithdrawReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of WithdrawReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sheba = _value.sheba;
        this.amount = _value.amount;
        this.destinationFirstName = _value.destinationFirstName;
        this.destinationLastName = _value.destinationLastName;
        this.description = _value.description;
        this.destinationPaymentId = _value.destinationPaymentId;
        this.ipAddress = _value.ipAddress;
        WithdrawReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new WithdrawReq();
        WithdrawReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sheba = _instance.sheba || '';
        _instance.amount = _instance.amount || '0';
        _instance.destinationFirstName = _instance.destinationFirstName || '0';
        _instance.destinationLastName = _instance.destinationLastName || '0';
        _instance.description = _instance.description || '';
        _instance.destinationPaymentId = _instance.destinationPaymentId || '';
        _instance.ipAddress = _instance.ipAddress || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sheba = _reader.readString();
                    break;
                case 2:
                    _instance.amount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.destinationFirstName = _reader.readInt64String();
                    break;
                case 4:
                    _instance.destinationLastName = _reader.readInt64String();
                    break;
                case 5:
                    _instance.description = _reader.readString();
                    break;
                case 6:
                    _instance.destinationPaymentId = _reader.readString();
                    break;
                case 7:
                    _instance.ipAddress = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        WithdrawReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sheba) {
            _writer.writeString(1, _instance.sheba);
        }
        if (_instance.amount) {
            _writer.writeInt64String(2, _instance.amount);
        }
        if (_instance.destinationFirstName) {
            _writer.writeInt64String(3, _instance.destinationFirstName);
        }
        if (_instance.destinationLastName) {
            _writer.writeInt64String(4, _instance.destinationLastName);
        }
        if (_instance.description) {
            _writer.writeString(5, _instance.description);
        }
        if (_instance.destinationPaymentId) {
            _writer.writeString(6, _instance.destinationPaymentId);
        }
        if (_instance.ipAddress) {
            _writer.writeString(7, _instance.ipAddress);
        }
    }
    get sheba() {
        return this._sheba;
    }
    set sheba(value) {
        this._sheba = value;
    }
    get amount() {
        return this._amount;
    }
    set amount(value) {
        this._amount = value;
    }
    get destinationFirstName() {
        return this._destinationFirstName;
    }
    set destinationFirstName(value) {
        this._destinationFirstName = value;
    }
    get destinationLastName() {
        return this._destinationLastName;
    }
    set destinationLastName(value) {
        this._destinationLastName = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get destinationPaymentId() {
        return this._destinationPaymentId;
    }
    set destinationPaymentId(value) {
        this._destinationPaymentId = value;
    }
    get ipAddress() {
        return this._ipAddress;
    }
    set ipAddress(value) {
        this._ipAddress = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        WithdrawReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sheba: this.sheba,
            amount: this.amount,
            destinationFirstName: this.destinationFirstName,
            destinationLastName: this.destinationLastName,
            description: this.description,
            destinationPaymentId: this.destinationPaymentId,
            ipAddress: this.ipAddress
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sheba: this.sheba,
            amount: this.amount,
            destinationFirstName: this.destinationFirstName,
            destinationLastName: this.destinationLastName,
            description: this.description,
            destinationPaymentId: this.destinationPaymentId,
            ipAddress: this.ipAddress
        };
    }
}
WithdrawReq.id = 'proto.pub.v1.payment.WithdrawReq';
/**
 * Message implementation for proto.pub.v1.payment.WithdrawRes
 */
class WithdrawRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of WithdrawRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.withdraw = _value.withdraw
            ? new Withdraw(_value.withdraw)
            : undefined;
        WithdrawRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new WithdrawRes();
        WithdrawRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.withdraw = _instance.withdraw || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.withdraw = new Withdraw();
                    _reader.readMessage(_instance.withdraw, Withdraw.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        WithdrawRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.withdraw) {
            _writer.writeMessage(1, _instance.withdraw, Withdraw.serializeBinaryToWriter);
        }
    }
    get withdraw() {
        return this._withdraw;
    }
    set withdraw(value) {
        this._withdraw = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        WithdrawRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            withdraw: this.withdraw ? this.withdraw.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            withdraw: this.withdraw ? this.withdraw.toProtobufJSON(options) : null
        };
    }
}
WithdrawRes.id = 'proto.pub.v1.payment.WithdrawRes';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawStatusReq
 */
class GetWithdrawStatusReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawStatusReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.guid = _value.guid;
        GetWithdrawStatusReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawStatusReq();
        GetWithdrawStatusReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.guid = _instance.guid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.guid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawStatusReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.guid) {
            _writer.writeString(1, _instance.guid);
        }
    }
    get guid() {
        return this._guid;
    }
    set guid(value) {
        this._guid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawStatusReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            guid: this.guid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            guid: this.guid
        };
    }
}
GetWithdrawStatusReq.id = 'proto.pub.v1.payment.GetWithdrawStatusReq';
/**
 * Message implementation for proto.pub.v1.payment.GetWithdrawStatusRes
 */
class GetWithdrawStatusRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetWithdrawStatusRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.withdraw = _value.withdraw
            ? new Withdraw(_value.withdraw)
            : undefined;
        GetWithdrawStatusRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetWithdrawStatusRes();
        GetWithdrawStatusRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.withdraw = _instance.withdraw || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.withdraw = new Withdraw();
                    _reader.readMessage(_instance.withdraw, Withdraw.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetWithdrawStatusRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.withdraw) {
            _writer.writeMessage(1, _instance.withdraw, Withdraw.serializeBinaryToWriter);
        }
    }
    get withdraw() {
        return this._withdraw;
    }
    set withdraw(value) {
        this._withdraw = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetWithdrawStatusRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            withdraw: this.withdraw ? this.withdraw.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            withdraw: this.withdraw ? this.withdraw.toProtobufJSON(options) : null
        };
    }
}
GetWithdrawStatusRes.id = 'proto.pub.v1.payment.GetWithdrawStatusRes';
/**
 * Message implementation for proto.pub.v1.payment.GetPaymentInformationReq
 */
class GetPaymentInformationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetPaymentInformationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentId = _value.paymentId;
        GetPaymentInformationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetPaymentInformationReq();
        GetPaymentInformationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentId = _instance.paymentId || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.paymentId = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetPaymentInformationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentId) {
            _writer.writeString(1, _instance.paymentId);
        }
    }
    get paymentId() {
        return this._paymentId;
    }
    set paymentId(value) {
        this._paymentId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetPaymentInformationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentId: this.paymentId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentId: this.paymentId
        };
    }
}
GetPaymentInformationReq.id = 'proto.pub.v1.payment.GetPaymentInformationReq';
/**
 * Message implementation for proto.pub.v1.payment.GetPaymentInformationRes
 */
class GetPaymentInformationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetPaymentInformationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.paymentInformation = _value.paymentInformation
            ? new PaymentInformation(_value.paymentInformation)
            : undefined;
        GetPaymentInformationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetPaymentInformationRes();
        GetPaymentInformationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.paymentInformation = _instance.paymentInformation || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.paymentInformation = new PaymentInformation();
                    _reader.readMessage(_instance.paymentInformation, PaymentInformation.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetPaymentInformationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.paymentInformation) {
            _writer.writeMessage(1, _instance.paymentInformation, PaymentInformation.serializeBinaryToWriter);
        }
    }
    get paymentInformation() {
        return this._paymentInformation;
    }
    set paymentInformation(value) {
        this._paymentInformation = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetPaymentInformationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            paymentInformation: this.paymentInformation
                ? this.paymentInformation.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            paymentInformation: this.paymentInformation
                ? this.paymentInformation.toProtobufJSON(options)
                : null
        };
    }
}
GetPaymentInformationRes.id = 'proto.pub.v1.payment.GetPaymentInformationRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for PaymentService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_PAYMENT_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_PAYMENT_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.payment.PaymentService
 */
class PaymentServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetUserInfo
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetUserInfoRes>>
             */
            getUserInfo: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetUserInfo',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserInfoReq,
                    responseClass: GetUserInfoRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetTransactionsCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetTransactionsCountRes>>
             */
            getTransactionsCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetTransactionsCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetTransactionsCountReq,
                    responseClass: GetTransactionsCountRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetTransactions
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetTransactionsRes>>
             */
            getTransactions: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetTransactions',
                    requestData,
                    requestMetadata,
                    requestClass: GetTransactionsReq,
                    responseClass: GetTransactionsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetWithdrawsCount
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetWithdrawsCountRes>>
             */
            getWithdrawsCount: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetWithdrawsCount',
                    requestData,
                    requestMetadata,
                    requestClass: GetWithdrawsCountReq,
                    responseClass: GetWithdrawsCountRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetWithdraws
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetWithdrawsRes>>
             */
            getWithdraws: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetWithdraws',
                    requestData,
                    requestMetadata,
                    requestClass: GetWithdrawsReq,
                    responseClass: GetWithdrawsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetWithdrawTariff
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetWithdrawTariffRes>>
             */
            getWithdrawTariff: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetWithdrawTariff',
                    requestData,
                    requestMetadata,
                    requestClass: GetWithdrawTariffReq,
                    responseClass: GetWithdrawTariffRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetPaymentInformation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetPaymentInformationRes>>
             */
            getPaymentInformation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetPaymentInformation',
                    requestData,
                    requestMetadata,
                    requestClass: GetPaymentInformationReq,
                    responseClass: GetPaymentInformationRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/GetWithdrawStatus
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetWithdrawStatusRes>>
             */
            getWithdrawStatus: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/GetWithdrawStatus',
                    requestData,
                    requestMetadata,
                    requestClass: GetWithdrawStatusReq,
                    responseClass: GetWithdrawStatusRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/CreatePayment
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreatePaymentRes>>
             */
            createPayment: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/CreatePayment',
                    requestData,
                    requestMetadata,
                    requestClass: CreatePaymentReq,
                    responseClass: CreatePaymentRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/Pay
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PayRes>>
             */
            pay: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/Pay',
                    requestData,
                    requestMetadata,
                    requestClass: PayReq,
                    responseClass: PayRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/PayConfirm
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.PayConfirmRes>>
             */
            payConfirm: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/PayConfirm',
                    requestData,
                    requestMetadata,
                    requestClass: PayConfirmReq,
                    responseClass: PayConfirmRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/Transfer
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.TransferRes>>
             */
            transfer: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/Transfer',
                    requestData,
                    requestMetadata,
                    requestClass: TransferReq,
                    responseClass: TransferRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.payment.PaymentService/Withdraw
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.WithdrawRes>>
             */
            withdraw: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.payment.PaymentService/Withdraw',
                    requestData,
                    requestMetadata,
                    requestClass: WithdrawReq,
                    responseClass: WithdrawRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.payment.PaymentService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetUserInfo
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetUserInfoRes>
     */
    getUserInfo(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserInfo(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetTransactionsCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetTransactionsCountRes>
     */
    getTransactionsCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getTransactionsCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetTransactions
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetTransactionsRes>
     */
    getTransactions(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getTransactions(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetWithdrawsCount
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetWithdrawsCountRes>
     */
    getWithdrawsCount(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getWithdrawsCount(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetWithdraws
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetWithdrawsRes>
     */
    getWithdraws(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getWithdraws(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetWithdrawTariff
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetWithdrawTariffRes>
     */
    getWithdrawTariff(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getWithdrawTariff(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetPaymentInformation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetPaymentInformationRes>
     */
    getPaymentInformation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getPaymentInformation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/GetWithdrawStatus
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetWithdrawStatusRes>
     */
    getWithdrawStatus(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getWithdrawStatus(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/CreatePayment
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreatePaymentRes>
     */
    createPayment(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createPayment(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/Pay
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PayRes>
     */
    pay(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .pay(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/PayConfirm
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.PayConfirmRes>
     */
    payConfirm(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .payConfirm(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/Transfer
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.TransferRes>
     */
    transfer(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .transfer(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.payment.PaymentService/Withdraw
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.WithdrawRes>
     */
    withdraw(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .withdraw(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
PaymentServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: PaymentServiceClient, deps: [{ token: GRPC_PAYMENT_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: PaymentServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: PaymentServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_PAYMENT_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.live_location.CreatePollReq
 */
class CreatePollReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreatePollReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.poll = _value.poll
            ? new Poll(_value.poll)
            : undefined;
        CreatePollReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreatePollReq();
        CreatePollReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.poll = _instance.poll || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.poll = new Poll();
                    _reader.readMessage(_instance.poll, Poll.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreatePollReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.poll) {
            _writer.writeMessage(1, _instance.poll, Poll.serializeBinaryToWriter);
        }
    }
    get poll() {
        return this._poll;
    }
    set poll(value) {
        this._poll = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreatePollReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            poll: this.poll ? this.poll.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            poll: this.poll ? this.poll.toProtobufJSON(options) : null
        };
    }
}
CreatePollReq.id = 'proto.pub.v1.live_location.CreatePollReq';
/**
 * Message implementation for proto.pub.v1.live_location.CreatePollRes
 */
class CreatePollRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreatePollRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.poll = _value.poll
            ? new Poll(_value.poll)
            : undefined;
        CreatePollRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreatePollRes();
        CreatePollRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.poll = _instance.poll || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.poll = new Poll();
                    _reader.readMessage(_instance.poll, Poll.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreatePollRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.poll) {
            _writer.writeMessage(1, _instance.poll, Poll.serializeBinaryToWriter);
        }
    }
    get poll() {
        return this._poll;
    }
    set poll(value) {
        this._poll = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreatePollRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            poll: this.poll ? this.poll.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            poll: this.poll ? this.poll.toProtobufJSON(options) : null
        };
    }
}
CreatePollRes.id = 'proto.pub.v1.live_location.CreatePollRes';
/**
 * Message implementation for proto.pub.v1.live_location.GetMeReq
 */
class GetMeReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMeReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        GetMeReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMeReq();
        GetMeReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMeReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMeReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid
        };
    }
}
GetMeReq.id = 'proto.pub.v1.live_location.GetMeReq';
/**
 * Message implementation for proto.pub.v1.live_location.GetMeRes
 */
class GetMeRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMeRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.selectedOptions = (_value.selectedOptions || []).slice();
        GetMeRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMeRes();
        GetMeRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.selectedOptions = _instance.selectedOptions || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.selectedOptions = _instance.selectedOptions || []).push(...(_reader.readPackedInt32() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMeRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.selectedOptions && _instance.selectedOptions.length) {
            _writer.writePackedInt32(1, _instance.selectedOptions);
        }
    }
    get selectedOptions() {
        return this._selectedOptions;
    }
    set selectedOptions(value) {
        this._selectedOptions = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMeRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            selectedOptions: (this.selectedOptions || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            selectedOptions: (this.selectedOptions || []).slice()
        };
    }
}
GetMeRes.id = 'proto.pub.v1.live_location.GetMeRes';
/**
 * Message implementation for proto.pub.v1.live_location.DoPollReq
 */
class DoPollReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DoPollReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.options = (_value.options || []).slice();
        DoPollReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DoPollReq();
        DoPollReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.options = _instance.options || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    (_instance.options = _instance.options || []).push(...(_reader.readPackedInt32() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        DoPollReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.options && _instance.options.length) {
            _writer.writePackedInt32(2, _instance.options);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DoPollReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            options: (this.options || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            options: (this.options || []).slice()
        };
    }
}
DoPollReq.id = 'proto.pub.v1.live_location.DoPollReq';
/**
 * Message implementation for proto.pub.v1.live_location.DoPollRes
 */
class DoPollRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DoPollRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        DoPollRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DoPollRes();
        DoPollRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        DoPollRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DoPollRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
DoPollRes.id = 'proto.pub.v1.live_location.DoPollRes';
/**
 * Message implementation for proto.pub.v1.live_location.GetOverallResultReq
 */
class GetOverallResultReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetOverallResultReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        GetOverallResultReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetOverallResultReq();
        GetOverallResultReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetOverallResultReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetOverallResultReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid
        };
    }
}
GetOverallResultReq.id = 'proto.pub.v1.live_location.GetOverallResultReq';
/**
 * Message implementation for proto.pub.v1.live_location.GetOverallResultRes
 */
class GetOverallResultRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetOverallResultRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        (this.results = _value.results
            ? Object.keys(_value.results).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.results[k] })), {})
            : {}),
            GetOverallResultRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetOverallResultRes();
        GetOverallResultRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.results = _instance.results || {};
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const msg_1 = {};
                    _reader.readMessage(msg_1, GetOverallResultRes.ResultsEntry.deserializeBinaryFromReader);
                    _instance.results = _instance.results || {};
                    _instance.results[Number(msg_1.key)] = msg_1.value;
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetOverallResultRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (!!_instance.results) {
            const keys_1 = Object.keys(_instance.results);
            if (keys_1.length) {
                const repeated_1 = keys_1
                    .map(key => ({
                    key: Number(key),
                    value: _instance.results[key]
                }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(1, repeated_1, GetOverallResultRes.ResultsEntry.serializeBinaryToWriter);
            }
        }
    }
    get results() {
        return this._results;
    }
    set results(value) {
        this._results = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetOverallResultRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            results: this.results
                ? Object.keys(this.results).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.results[k] })), {})
                : {}
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            results: this.results
                ? Object.keys(this.results).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.results[k] })), {})
                : {}
        };
    }
}
GetOverallResultRes.id = 'proto.pub.v1.live_location.GetOverallResultRes';
(function (GetOverallResultRes) {
    /**
     * Message implementation for proto.pub.v1.live_location.ResultsEntry
     */
    class ResultsEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ResultsEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value;
            ResultsEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ResultsEntry();
            ResultsEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || 0;
            _instance.value = _instance.value || 0;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readInt32();
                        break;
                    case 2:
                        _instance.value = _reader.readInt32();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ResultsEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeInt32(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeInt32(2, _instance.value);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ResultsEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value
            };
        }
    }
    ResultsEntry.id = 'proto.pub.v1.live_location.ResultsEntry';
    GetOverallResultRes.ResultsEntry = ResultsEntry;
})(GetOverallResultRes || (GetOverallResultRes = {}));
/**
 * Message implementation for proto.pub.v1.live_location.EditPollExpireTimeReq
 */
class EditPollExpireTimeReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EditPollExpireTimeReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.expireTime = _value.expireTime;
        EditPollExpireTimeReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EditPollExpireTimeReq();
        EditPollExpireTimeReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.expireTime = _instance.expireTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.expireTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        EditPollExpireTimeReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.expireTime) {
            _writer.writeInt64String(2, _instance.expireTime);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get expireTime() {
        return this._expireTime;
    }
    set expireTime(value) {
        this._expireTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EditPollExpireTimeReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            expireTime: this.expireTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            expireTime: this.expireTime
        };
    }
}
EditPollExpireTimeReq.id = 'proto.pub.v1.live_location.EditPollExpireTimeReq';
/**
 * Message implementation for proto.pub.v1.live_location.EditPollExpireTimeRes
 */
class EditPollExpireTimeRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EditPollExpireTimeRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.poll = _value.poll
            ? new Poll(_value.poll)
            : undefined;
        EditPollExpireTimeRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EditPollExpireTimeRes();
        EditPollExpireTimeRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.poll = _instance.poll || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.poll = new Poll();
                    _reader.readMessage(_instance.poll, Poll.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        EditPollExpireTimeRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.poll) {
            _writer.writeMessage(1, _instance.poll, Poll.serializeBinaryToWriter);
        }
    }
    get poll() {
        return this._poll;
    }
    set poll(value) {
        this._poll = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EditPollExpireTimeRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            poll: this.poll ? this.poll.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            poll: this.poll ? this.poll.toProtobufJSON(options) : null
        };
    }
}
EditPollExpireTimeRes.id = 'proto.pub.v1.live_location.EditPollExpireTimeRes';
/**
 * Message implementation for proto.pub.v1.live_location.GetUsersSelectedOptionResultReq
 */
class GetUsersSelectedOptionResultReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUsersSelectedOptionResultReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.option = _value.option;
        GetUsersSelectedOptionResultReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUsersSelectedOptionResultReq();
        GetUsersSelectedOptionResultReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.option = _instance.option || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.option = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUsersSelectedOptionResultReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.option) {
            _writer.writeInt32(2, _instance.option);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get option() {
        return this._option;
    }
    set option(value) {
        this._option = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUsersSelectedOptionResultReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            option: this.option
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            option: this.option
        };
    }
}
GetUsersSelectedOptionResultReq.id = 'proto.pub.v1.live_location.GetUsersSelectedOptionResultReq';
/**
 * Message implementation for proto.pub.v1.live_location.GetUsersSelectedOptionResultRes
 */
class GetUsersSelectedOptionResultRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUsersSelectedOptionResultRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.totalCount = _value.totalCount;
        this.users = (_value.users || []).map(m => new Uid(m));
        GetUsersSelectedOptionResultRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUsersSelectedOptionResultRes();
        GetUsersSelectedOptionResultRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.totalCount = _instance.totalCount || 0;
        _instance.users = _instance.users || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.totalCount = _reader.readInt32();
                    break;
                case 2:
                    const messageInitializer2 = new Uid();
                    _reader.readMessage(messageInitializer2, Uid.deserializeBinaryFromReader);
                    (_instance.users = _instance.users || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUsersSelectedOptionResultRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.totalCount) {
            _writer.writeInt32(1, _instance.totalCount);
        }
        if (_instance.users && _instance.users.length) {
            _writer.writeRepeatedMessage(2, _instance.users, Uid.serializeBinaryToWriter);
        }
    }
    get totalCount() {
        return this._totalCount;
    }
    set totalCount(value) {
        this._totalCount = value;
    }
    get users() {
        return this._users;
    }
    set users(value) {
        this._users = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUsersSelectedOptionResultRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            totalCount: this.totalCount,
            users: (this.users || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            totalCount: this.totalCount,
            users: (this.users || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetUsersSelectedOptionResultRes.id = 'proto.pub.v1.live_location.GetUsersSelectedOptionResultRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for PollService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_POLL_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_POLL_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.live_location.PollService
 */
class PollServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.live_location.PollService/CreatePoll
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreatePollRes>>
             */
            createPoll: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.PollService/CreatePoll',
                    requestData,
                    requestMetadata,
                    requestClass: CreatePollReq,
                    responseClass: CreatePollRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.PollService/DoPoll
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.DoPollRes>>
             */
            doPoll: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.PollService/DoPoll',
                    requestData,
                    requestMetadata,
                    requestClass: DoPollReq,
                    responseClass: DoPollRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.PollService/GetMe
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetMeRes>>
             */
            getMe: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.PollService/GetMe',
                    requestData,
                    requestMetadata,
                    requestClass: GetMeReq,
                    responseClass: GetMeRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.PollService/GetOverallResult
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetOverallResultRes>>
             */
            getOverallResult: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.PollService/GetOverallResult',
                    requestData,
                    requestMetadata,
                    requestClass: GetOverallResultReq,
                    responseClass: GetOverallResultRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.PollService/GetUsersSelectedOptionResult
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetUsersSelectedOptionResultRes>>
             */
            getUsersSelectedOptionResult: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.PollService/GetUsersSelectedOptionResult',
                    requestData,
                    requestMetadata,
                    requestClass: GetUsersSelectedOptionResultReq,
                    responseClass: GetUsersSelectedOptionResultRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.live_location.PollService/EditExpireTime
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.EditPollExpireTimeRes>>
             */
            editExpireTime: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.live_location.PollService/EditExpireTime',
                    requestData,
                    requestMetadata,
                    requestClass: EditPollExpireTimeReq,
                    responseClass: EditPollExpireTimeRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.live_location.PollService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.live_location.PollService/CreatePoll
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreatePollRes>
     */
    createPoll(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createPoll(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.PollService/DoPoll
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.DoPollRes>
     */
    doPoll(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .doPoll(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.PollService/GetMe
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetMeRes>
     */
    getMe(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getMe(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.PollService/GetOverallResult
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetOverallResultRes>
     */
    getOverallResult(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getOverallResult(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.PollService/GetUsersSelectedOptionResult
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetUsersSelectedOptionResultRes>
     */
    getUsersSelectedOptionResult(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUsersSelectedOptionResult(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.live_location.PollService/EditExpireTime
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.EditPollExpireTimeRes>
     */
    editExpireTime(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .editExpireTime(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
PollServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: PollServiceClient, deps: [{ token: GRPC_POLL_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
PollServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: PollServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: PollServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_POLL_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.models.PhoneNumber
 */
class PhoneNumber {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of PhoneNumber to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.countryCode = _value.countryCode;
        this.nationalNumber = _value.nationalNumber;
        PhoneNumber.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new PhoneNumber();
        PhoneNumber.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.countryCode = _instance.countryCode || 0;
        _instance.nationalNumber = _instance.nationalNumber || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.countryCode = _reader.readInt32();
                    break;
                case 2:
                    _instance.nationalNumber = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        PhoneNumber.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.countryCode) {
            _writer.writeInt32(1, _instance.countryCode);
        }
        if (_instance.nationalNumber) {
            _writer.writeInt64String(2, _instance.nationalNumber);
        }
    }
    get countryCode() {
        return this._countryCode;
    }
    set countryCode(value) {
        this._countryCode = value;
    }
    get nationalNumber() {
        return this._nationalNumber;
    }
    set nationalNumber(value) {
        this._nationalNumber = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        PhoneNumber.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            countryCode: this.countryCode,
            nationalNumber: this.nationalNumber
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            countryCode: this.countryCode,
            nationalNumber: this.nationalNumber
        };
    }
}
PhoneNumber.id = 'proto.pub.v1.models.PhoneNumber';

/**
 * Message implementation for proto.pub.v1.models.Contact
 */
class Contact {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Contact to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        this.owner = _value.owner
            ? new Uid(_value.owner)
            : undefined;
        this.phoneNumber = _value.phoneNumber
            ? new PhoneNumber(_value.phoneNumber)
            : undefined;
        this.firstName = _value.firstName;
        this.lastName = _value.lastName;
        Contact.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Contact();
        Contact.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
        _instance.owner = _instance.owner || undefined;
        _instance.phoneNumber = _instance.phoneNumber || undefined;
        _instance.firstName = _instance.firstName || '';
        _instance.lastName = _instance.lastName || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                case 2:
                    _instance.owner = new Uid();
                    _reader.readMessage(_instance.owner, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.phoneNumber = new PhoneNumber();
                    _reader.readMessage(_instance.phoneNumber, PhoneNumber.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.firstName = _reader.readString();
                    break;
                case 5:
                    _instance.lastName = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Contact.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
        if (_instance.owner) {
            _writer.writeMessage(2, _instance.owner, Uid.serializeBinaryToWriter);
        }
        if (_instance.phoneNumber) {
            _writer.writeMessage(3, _instance.phoneNumber, PhoneNumber.serializeBinaryToWriter);
        }
        if (_instance.firstName) {
            _writer.writeString(4, _instance.firstName);
        }
        if (_instance.lastName) {
            _writer.writeString(5, _instance.lastName);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    get owner() {
        return this._owner;
    }
    set owner(value) {
        this._owner = value;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get firstName() {
        return this._firstName;
    }
    set firstName(value) {
        this._firstName = value;
    }
    get lastName() {
        return this._lastName;
    }
    set lastName(value) {
        this._lastName = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Contact.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid,
            owner: this.owner ? this.owner.toObject() : undefined,
            phoneNumber: this.phoneNumber ? this.phoneNumber.toObject() : undefined,
            firstName: this.firstName,
            lastName: this.lastName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid,
            owner: this.owner ? this.owner.toProtobufJSON(options) : null,
            phoneNumber: this.phoneNumber
                ? this.phoneNumber.toProtobufJSON(options)
                : null,
            firstName: this.firstName,
            lastName: this.lastName
        };
    }
}
Contact.id = 'proto.pub.v1.models.Contact';

/**
 * Message implementation for proto.pub.v1.models.UserAsContact
 */
class UserAsContact {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserAsContact to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.phoneNumber = _value.phoneNumber
            ? new PhoneNumber(_value.phoneNumber)
            : undefined;
        this.firstName = _value.firstName;
        this.lastName = _value.lastName;
        this.description = _value.description;
        this.email = _value.email;
        UserAsContact.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserAsContact();
        UserAsContact.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.phoneNumber = _instance.phoneNumber || undefined;
        _instance.firstName = _instance.firstName || '';
        _instance.lastName = _instance.lastName || '';
        _instance.description = _instance.description || '';
        _instance.email = _instance.email || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.phoneNumber = new PhoneNumber();
                    _reader.readMessage(_instance.phoneNumber, PhoneNumber.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.firstName = _reader.readString();
                    break;
                case 4:
                    _instance.lastName = _reader.readString();
                    break;
                case 5:
                    _instance.description = _reader.readString();
                    break;
                case 6:
                    _instance.email = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserAsContact.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.phoneNumber) {
            _writer.writeMessage(2, _instance.phoneNumber, PhoneNumber.serializeBinaryToWriter);
        }
        if (_instance.firstName) {
            _writer.writeString(3, _instance.firstName);
        }
        if (_instance.lastName) {
            _writer.writeString(4, _instance.lastName);
        }
        if (_instance.description) {
            _writer.writeString(5, _instance.description);
        }
        if (_instance.email) {
            _writer.writeString(6, _instance.email);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get firstName() {
        return this._firstName;
    }
    set firstName(value) {
        this._firstName = value;
    }
    get lastName() {
        return this._lastName;
    }
    set lastName(value) {
        this._lastName = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get email() {
        return this._email;
    }
    set email(value) {
        this._email = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserAsContact.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            phoneNumber: this.phoneNumber ? this.phoneNumber.toObject() : undefined,
            firstName: this.firstName,
            lastName: this.lastName,
            description: this.description,
            email: this.email
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            phoneNumber: this.phoneNumber
                ? this.phoneNumber.toProtobufJSON(options)
                : null,
            firstName: this.firstName,
            lastName: this.lastName,
            description: this.description,
            email: this.email
        };
    }
}
UserAsContact.id = 'proto.pub.v1.models.UserAsContact';
/**
 * Message implementation for proto.pub.v1.models.UserPrivateData
 */
class UserPrivateData {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserPrivateData to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.phoneNumber = _value.phoneNumber
            ? new PhoneNumber(_value.phoneNumber)
            : undefined;
        this.firstName = _value.firstName;
        this.lastName = _value.lastName;
        this.description = _value.description;
        this.email = _value.email;
        this.isPasswordProtected = _value.isPasswordProtected;
        this.isEmailVerified = _value.isEmailVerified;
        this.passwordHash = _value.passwordHash;
        UserPrivateData.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserPrivateData();
        UserPrivateData.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.phoneNumber = _instance.phoneNumber || undefined;
        _instance.firstName = _instance.firstName || '';
        _instance.lastName = _instance.lastName || '';
        _instance.description = _instance.description || '';
        _instance.email = _instance.email || '';
        _instance.isPasswordProtected = _instance.isPasswordProtected || false;
        _instance.isEmailVerified = _instance.isEmailVerified || false;
        _instance.passwordHash = _instance.passwordHash || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.phoneNumber = new PhoneNumber();
                    _reader.readMessage(_instance.phoneNumber, PhoneNumber.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.firstName = _reader.readString();
                    break;
                case 5:
                    _instance.lastName = _reader.readString();
                    break;
                case 6:
                    _instance.description = _reader.readString();
                    break;
                case 7:
                    _instance.email = _reader.readString();
                    break;
                case 8:
                    _instance.isPasswordProtected = _reader.readBool();
                    break;
                case 9:
                    _instance.isEmailVerified = _reader.readBool();
                    break;
                case 3:
                    _instance.passwordHash = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserPrivateData.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.phoneNumber) {
            _writer.writeMessage(2, _instance.phoneNumber, PhoneNumber.serializeBinaryToWriter);
        }
        if (_instance.firstName) {
            _writer.writeString(4, _instance.firstName);
        }
        if (_instance.lastName) {
            _writer.writeString(5, _instance.lastName);
        }
        if (_instance.description) {
            _writer.writeString(6, _instance.description);
        }
        if (_instance.email) {
            _writer.writeString(7, _instance.email);
        }
        if (_instance.isPasswordProtected) {
            _writer.writeBool(8, _instance.isPasswordProtected);
        }
        if (_instance.isEmailVerified) {
            _writer.writeBool(9, _instance.isEmailVerified);
        }
        if (_instance.passwordHash) {
            _writer.writeString(3, _instance.passwordHash);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get firstName() {
        return this._firstName;
    }
    set firstName(value) {
        this._firstName = value;
    }
    get lastName() {
        return this._lastName;
    }
    set lastName(value) {
        this._lastName = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get email() {
        return this._email;
    }
    set email(value) {
        this._email = value;
    }
    get isPasswordProtected() {
        return this._isPasswordProtected;
    }
    set isPasswordProtected(value) {
        this._isPasswordProtected = value;
    }
    get isEmailVerified() {
        return this._isEmailVerified;
    }
    set isEmailVerified(value) {
        this._isEmailVerified = value;
    }
    get passwordHash() {
        return this._passwordHash;
    }
    set passwordHash(value) {
        this._passwordHash = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserPrivateData.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            phoneNumber: this.phoneNumber ? this.phoneNumber.toObject() : undefined,
            firstName: this.firstName,
            lastName: this.lastName,
            description: this.description,
            email: this.email,
            isPasswordProtected: this.isPasswordProtected,
            isEmailVerified: this.isEmailVerified,
            passwordHash: this.passwordHash
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            phoneNumber: this.phoneNumber
                ? this.phoneNumber.toProtobufJSON(options)
                : null,
            firstName: this.firstName,
            lastName: this.lastName,
            description: this.description,
            email: this.email,
            isPasswordProtected: this.isPasswordProtected,
            isEmailVerified: this.isEmailVerified,
            passwordHash: this.passwordHash
        };
    }
}
UserPrivateData.id = 'proto.pub.v1.models.UserPrivateData';

/**
 * Message implementation for proto.pub.v1.models.Session
 */
class Session {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Session to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionId = _value.sessionId;
        this.node = _value.node;
        this.device = _value.device;
        this.ip = _value.ip;
        this.createdOn = _value.createdOn;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        Session.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Session();
        Session.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionId = _instance.sessionId || '';
        _instance.node = _instance.node || '';
        _instance.device = _instance.device || '';
        _instance.ip = _instance.ip || '';
        _instance.createdOn = _instance.createdOn || '0';
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sessionId = _reader.readString();
                    break;
                case 2:
                    _instance.node = _reader.readString();
                    break;
                case 3:
                    _instance.device = _reader.readString();
                    break;
                case 4:
                    _instance.ip = _reader.readString();
                    break;
                case 5:
                    _instance.createdOn = _reader.readInt64String();
                    break;
                case 6:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Session.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionId) {
            _writer.writeString(1, _instance.sessionId);
        }
        if (_instance.node) {
            _writer.writeString(2, _instance.node);
        }
        if (_instance.device) {
            _writer.writeString(3, _instance.device);
        }
        if (_instance.ip) {
            _writer.writeString(4, _instance.ip);
        }
        if (_instance.createdOn) {
            _writer.writeInt64String(5, _instance.createdOn);
        }
        if (_instance.platform) {
            _writer.writeMessage(6, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get node() {
        return this._node;
    }
    set node(value) {
        this._node = value;
    }
    get device() {
        return this._device;
    }
    set device(value) {
        this._device = value;
    }
    get ip() {
        return this._ip;
    }
    set ip(value) {
        this._ip = value;
    }
    get createdOn() {
        return this._createdOn;
    }
    set createdOn(value) {
        this._createdOn = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Session.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionId: this.sessionId,
            node: this.node,
            device: this.device,
            ip: this.ip,
            createdOn: this.createdOn,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionId: this.sessionId,
            node: this.node,
            device: this.device,
            ip: this.ip,
            createdOn: this.createdOn,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
Session.id = 'proto.pub.v1.models.Session';

var VerificationType;
(function (VerificationType) {
    VerificationType[VerificationType["MESSAGE"] = 0] = "MESSAGE";
    VerificationType[VerificationType["SMS"] = 1] = "SMS";
})(VerificationType || (VerificationType = {}));
/**
 * Message implementation for proto.pub.v1.profile.DownloadLink
 */
class DownloadLink {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DownloadLink to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.url = _value.url;
        this.label = _value.label;
        DownloadLink.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DownloadLink();
        DownloadLink.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.url = _instance.url || '';
        _instance.label = _instance.label || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.url = _reader.readString();
                    break;
                case 2:
                    _instance.label = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DownloadLink.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.url) {
            _writer.writeString(1, _instance.url);
        }
        if (_instance.label) {
            _writer.writeString(2, _instance.label);
        }
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    get label() {
        return this._label;
    }
    set label(value) {
        this._label = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DownloadLink.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            url: this.url,
            label: this.label
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            url: this.url,
            label: this.label
        };
    }
}
DownloadLink.id = 'proto.pub.v1.profile.DownloadLink';
/**
 * Message implementation for proto.pub.v1.profile.NewerVersionInformation
 */
class NewerVersionInformation {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of NewerVersionInformation to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.version = _value.version;
        this.description = _value.description;
        this.size = _value.size;
        this.downloadLinks = (_value.downloadLinks || []).map(m => new DownloadLink(m));
        NewerVersionInformation.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new NewerVersionInformation();
        NewerVersionInformation.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.version = _instance.version || '';
        _instance.description = _instance.description || '';
        _instance.size = _instance.size || '';
        _instance.downloadLinks = _instance.downloadLinks || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.version = _reader.readString();
                    break;
                case 2:
                    _instance.description = _reader.readString();
                    break;
                case 3:
                    _instance.size = _reader.readString();
                    break;
                case 4:
                    const messageInitializer4 = new DownloadLink();
                    _reader.readMessage(messageInitializer4, DownloadLink.deserializeBinaryFromReader);
                    (_instance.downloadLinks = _instance.downloadLinks || []).push(messageInitializer4);
                    break;
                default:
                    _reader.skipField();
            }
        }
        NewerVersionInformation.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.version) {
            _writer.writeString(1, _instance.version);
        }
        if (_instance.description) {
            _writer.writeString(2, _instance.description);
        }
        if (_instance.size) {
            _writer.writeString(3, _instance.size);
        }
        if (_instance.downloadLinks && _instance.downloadLinks.length) {
            _writer.writeRepeatedMessage(4, _instance.downloadLinks, DownloadLink.serializeBinaryToWriter);
        }
    }
    get version() {
        return this._version;
    }
    set version(value) {
        this._version = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get size() {
        return this._size;
    }
    set size(value) {
        this._size = value;
    }
    get downloadLinks() {
        return this._downloadLinks;
    }
    set downloadLinks(value) {
        this._downloadLinks = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        NewerVersionInformation.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            version: this.version,
            description: this.description,
            size: this.size,
            downloadLinks: (this.downloadLinks || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            version: this.version,
            description: this.description,
            size: this.size,
            downloadLinks: (this.downloadLinks || []).map(m => m.toProtobufJSON(options))
        };
    }
}
NewerVersionInformation.id = 'proto.pub.v1.profile.NewerVersionInformation';
/**
 * Message implementation for proto.pub.v1.profile.GetVerificationCodeReq
 */
class GetVerificationCodeReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetVerificationCodeReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.phoneNumber = _value.phoneNumber
            ? new PhoneNumber(_value.phoneNumber)
            : undefined;
        this.type = _value.type;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        GetVerificationCodeReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetVerificationCodeReq();
        GetVerificationCodeReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.phoneNumber = _instance.phoneNumber || undefined;
        _instance.type = _instance.type || 0;
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.phoneNumber = new PhoneNumber();
                    _reader.readMessage(_instance.phoneNumber, PhoneNumber.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.type = _reader.readEnum();
                    break;
                case 3:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetVerificationCodeReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.phoneNumber) {
            _writer.writeMessage(1, _instance.phoneNumber, PhoneNumber.serializeBinaryToWriter);
        }
        if (_instance.type) {
            _writer.writeEnum(2, _instance.type);
        }
        if (_instance.platform) {
            _writer.writeMessage(3, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetVerificationCodeReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            phoneNumber: this.phoneNumber ? this.phoneNumber.toObject() : undefined,
            type: this.type,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            phoneNumber: this.phoneNumber
                ? this.phoneNumber.toProtobufJSON(options)
                : null,
            type: VerificationType[this.type === null || this.type === undefined ? 0 : this.type],
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
GetVerificationCodeReq.id = 'proto.pub.v1.profile.GetVerificationCodeReq';
/**
 * Message implementation for proto.pub.v1.profile.GetVerificationCodeRes
 */
class GetVerificationCodeRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetVerificationCodeRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.type = _value.type;
        this.newerVersionInformation = _value.newerVersionInformation
            ? new NewerVersionInformation(_value.newerVersionInformation)
            : undefined;
        GetVerificationCodeRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetVerificationCodeRes();
        GetVerificationCodeRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.type = _instance.type || 0;
        _instance.newerVersionInformation =
            _instance.newerVersionInformation || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.type = _reader.readEnum();
                    break;
                case 2:
                    _instance.newerVersionInformation = new NewerVersionInformation();
                    _reader.readMessage(_instance.newerVersionInformation, NewerVersionInformation.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetVerificationCodeRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.type) {
            _writer.writeEnum(1, _instance.type);
        }
        if (_instance.newerVersionInformation) {
            _writer.writeMessage(2, _instance.newerVersionInformation, NewerVersionInformation.serializeBinaryToWriter);
        }
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get newerVersionInformation() {
        return this._newerVersionInformation;
    }
    set newerVersionInformation(value) {
        this._newerVersionInformation = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetVerificationCodeRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            type: this.type,
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            type: VerificationType[this.type === null || this.type === undefined ? 0 : this.type],
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toProtobufJSON(options)
                : null
        };
    }
}
GetVerificationCodeRes.id = 'proto.pub.v1.profile.GetVerificationCodeRes';
/**
 * Message implementation for proto.pub.v1.profile.VerifyCodeReq
 */
class VerifyCodeReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of VerifyCodeReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.phoneNumber = _value.phoneNumber
            ? new PhoneNumber(_value.phoneNumber)
            : undefined;
        this.code = _value.code;
        this.device = _value.device;
        this.password = _value.password;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        VerifyCodeReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new VerifyCodeReq();
        VerifyCodeReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.phoneNumber = _instance.phoneNumber || undefined;
        _instance.code = _instance.code || '';
        _instance.device = _instance.device || '';
        _instance.password = _instance.password || '';
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.phoneNumber = new PhoneNumber();
                    _reader.readMessage(_instance.phoneNumber, PhoneNumber.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.code = _reader.readString();
                    break;
                case 3:
                    _instance.device = _reader.readString();
                    break;
                case 4:
                    _instance.password = _reader.readString();
                    break;
                case 5:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        VerifyCodeReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.phoneNumber) {
            _writer.writeMessage(1, _instance.phoneNumber, PhoneNumber.serializeBinaryToWriter);
        }
        if (_instance.code) {
            _writer.writeString(2, _instance.code);
        }
        if (_instance.device) {
            _writer.writeString(3, _instance.device);
        }
        if (_instance.password) {
            _writer.writeString(4, _instance.password);
        }
        if (_instance.platform) {
            _writer.writeMessage(5, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get code() {
        return this._code;
    }
    set code(value) {
        this._code = value;
    }
    get device() {
        return this._device;
    }
    set device(value) {
        this._device = value;
    }
    get password() {
        return this._password;
    }
    set password(value) {
        this._password = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        VerifyCodeReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            phoneNumber: this.phoneNumber ? this.phoneNumber.toObject() : undefined,
            code: this.code,
            device: this.device,
            password: this.password,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            phoneNumber: this.phoneNumber
                ? this.phoneNumber.toProtobufJSON(options)
                : null,
            code: this.code,
            device: this.device,
            password: this.password,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
VerifyCodeReq.id = 'proto.pub.v1.profile.VerifyCodeReq';
/**
 * Message implementation for proto.pub.v1.profile.CheckQrCodeIsVerifiedAndLoginReq
 */
class CheckQrCodeIsVerifiedAndLoginReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CheckQrCodeIsVerifiedAndLoginReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.token = _value.token;
        this.device = _value.device;
        this.password = _value.password;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        CheckQrCodeIsVerifiedAndLoginReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CheckQrCodeIsVerifiedAndLoginReq();
        CheckQrCodeIsVerifiedAndLoginReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.token = _instance.token || '';
        _instance.device = _instance.device || '';
        _instance.password = _instance.password || '';
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.token = _reader.readString();
                    break;
                case 2:
                    _instance.device = _reader.readString();
                    break;
                case 3:
                    _instance.password = _reader.readString();
                    break;
                case 4:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CheckQrCodeIsVerifiedAndLoginReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.token) {
            _writer.writeString(1, _instance.token);
        }
        if (_instance.device) {
            _writer.writeString(2, _instance.device);
        }
        if (_instance.password) {
            _writer.writeString(3, _instance.password);
        }
        if (_instance.platform) {
            _writer.writeMessage(4, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    get device() {
        return this._device;
    }
    set device(value) {
        this._device = value;
    }
    get password() {
        return this._password;
    }
    set password(value) {
        this._password = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CheckQrCodeIsVerifiedAndLoginReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            token: this.token,
            device: this.device,
            password: this.password,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            token: this.token,
            device: this.device,
            password: this.password,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
CheckQrCodeIsVerifiedAndLoginReq.id = 'proto.pub.v1.profile.CheckQrCodeIsVerifiedAndLoginReq';
/**
 * Message implementation for proto.pub.v1.profile.AccessTokenRes
 */
class AccessTokenRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AccessTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.status = _value.status;
        this.accessToken = _value.accessToken;
        this.refreshToken = _value.refreshToken;
        this.passwordHint = _value.passwordHint;
        this.forgotEmailHint = _value.forgotEmailHint;
        this.newerVersionInformation = _value.newerVersionInformation
            ? new NewerVersionInformation(_value.newerVersionInformation)
            : undefined;
        AccessTokenRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AccessTokenRes();
        AccessTokenRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.status = _instance.status || 0;
        _instance.accessToken = _instance.accessToken || '';
        _instance.refreshToken = _instance.refreshToken || '';
        _instance.passwordHint = _instance.passwordHint || '';
        _instance.forgotEmailHint = _instance.forgotEmailHint || '';
        _instance.newerVersionInformation =
            _instance.newerVersionInformation || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.status = _reader.readEnum();
                    break;
                case 2:
                    _instance.accessToken = _reader.readString();
                    break;
                case 3:
                    _instance.refreshToken = _reader.readString();
                    break;
                case 4:
                    _instance.passwordHint = _reader.readString();
                    break;
                case 5:
                    _instance.forgotEmailHint = _reader.readString();
                    break;
                case 6:
                    _instance.newerVersionInformation = new NewerVersionInformation();
                    _reader.readMessage(_instance.newerVersionInformation, NewerVersionInformation.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AccessTokenRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.status) {
            _writer.writeEnum(1, _instance.status);
        }
        if (_instance.accessToken) {
            _writer.writeString(2, _instance.accessToken);
        }
        if (_instance.refreshToken) {
            _writer.writeString(3, _instance.refreshToken);
        }
        if (_instance.passwordHint) {
            _writer.writeString(4, _instance.passwordHint);
        }
        if (_instance.forgotEmailHint) {
            _writer.writeString(5, _instance.forgotEmailHint);
        }
        if (_instance.newerVersionInformation) {
            _writer.writeMessage(6, _instance.newerVersionInformation, NewerVersionInformation.serializeBinaryToWriter);
        }
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get accessToken() {
        return this._accessToken;
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    get refreshToken() {
        return this._refreshToken;
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    get passwordHint() {
        return this._passwordHint;
    }
    set passwordHint(value) {
        this._passwordHint = value;
    }
    get forgotEmailHint() {
        return this._forgotEmailHint;
    }
    set forgotEmailHint(value) {
        this._forgotEmailHint = value;
    }
    get newerVersionInformation() {
        return this._newerVersionInformation;
    }
    set newerVersionInformation(value) {
        this._newerVersionInformation = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AccessTokenRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            status: this.status,
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            passwordHint: this.passwordHint,
            forgotEmailHint: this.forgotEmailHint,
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            status: AccessTokenRes.Status[this.status === null || this.status === undefined ? 0 : this.status],
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            passwordHint: this.passwordHint,
            forgotEmailHint: this.forgotEmailHint,
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toProtobufJSON(options)
                : null
        };
    }
}
AccessTokenRes.id = 'proto.pub.v1.profile.AccessTokenRes';
(function (AccessTokenRes) {
    let Status;
    (function (Status) {
        Status[Status["OK"] = 0] = "OK";
        Status[Status["PASSWORD_PROTECTED"] = 1] = "PASSWORD_PROTECTED";
    })(Status = AccessTokenRes.Status || (AccessTokenRes.Status = {}));
})(AccessTokenRes || (AccessTokenRes = {}));
/**
 * Message implementation for proto.pub.v1.profile.RenewAccessTokenReq
 */
class RenewAccessTokenReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RenewAccessTokenReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.refreshToken = _value.refreshToken;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        RenewAccessTokenReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RenewAccessTokenReq();
        RenewAccessTokenReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.refreshToken = _instance.refreshToken || '';
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.refreshToken = _reader.readString();
                    break;
                case 2:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RenewAccessTokenReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.refreshToken) {
            _writer.writeString(1, _instance.refreshToken);
        }
        if (_instance.platform) {
            _writer.writeMessage(2, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get refreshToken() {
        return this._refreshToken;
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RenewAccessTokenReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            refreshToken: this.refreshToken,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            refreshToken: this.refreshToken,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
RenewAccessTokenReq.id = 'proto.pub.v1.profile.RenewAccessTokenReq';
/**
 * Message implementation for proto.pub.v1.profile.RenewAccessTokenRes
 */
class RenewAccessTokenRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RenewAccessTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.accessToken = _value.accessToken;
        this.refreshToken = _value.refreshToken;
        this.newerVersionInformation = _value.newerVersionInformation
            ? new NewerVersionInformation(_value.newerVersionInformation)
            : undefined;
        RenewAccessTokenRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RenewAccessTokenRes();
        RenewAccessTokenRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.accessToken = _instance.accessToken || '';
        _instance.refreshToken = _instance.refreshToken || '';
        _instance.newerVersionInformation =
            _instance.newerVersionInformation || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.accessToken = _reader.readString();
                    break;
                case 2:
                    _instance.refreshToken = _reader.readString();
                    break;
                case 6:
                    _instance.newerVersionInformation = new NewerVersionInformation();
                    _reader.readMessage(_instance.newerVersionInformation, NewerVersionInformation.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RenewAccessTokenRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.accessToken) {
            _writer.writeString(1, _instance.accessToken);
        }
        if (_instance.refreshToken) {
            _writer.writeString(2, _instance.refreshToken);
        }
        if (_instance.newerVersionInformation) {
            _writer.writeMessage(6, _instance.newerVersionInformation, NewerVersionInformation.serializeBinaryToWriter);
        }
    }
    get accessToken() {
        return this._accessToken;
    }
    set accessToken(value) {
        this._accessToken = value;
    }
    get refreshToken() {
        return this._refreshToken;
    }
    set refreshToken(value) {
        this._refreshToken = value;
    }
    get newerVersionInformation() {
        return this._newerVersionInformation;
    }
    set newerVersionInformation(value) {
        this._newerVersionInformation = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RenewAccessTokenRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            accessToken: this.accessToken,
            refreshToken: this.refreshToken,
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toProtobufJSON(options)
                : null
        };
    }
}
RenewAccessTokenRes.id = 'proto.pub.v1.profile.RenewAccessTokenRes';
/**
 * Message implementation for proto.pub.v1.profile.VerifyEmailAddressReq
 */
class VerifyEmailAddressReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of VerifyEmailAddressReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.hash = _value.hash;
        VerifyEmailAddressReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new VerifyEmailAddressReq();
        VerifyEmailAddressReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.hash = _instance.hash || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.hash = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        VerifyEmailAddressReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.hash) {
            _writer.writeString(1, _instance.hash);
        }
    }
    get hash() {
        return this._hash;
    }
    set hash(value) {
        this._hash = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        VerifyEmailAddressReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            hash: this.hash
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            hash: this.hash
        };
    }
}
VerifyEmailAddressReq.id = 'proto.pub.v1.profile.VerifyEmailAddressReq';
/**
 * Message implementation for proto.pub.v1.profile.VerifyEmailAddressRes
 */
class VerifyEmailAddressRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of VerifyEmailAddressRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        VerifyEmailAddressRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new VerifyEmailAddressRes();
        VerifyEmailAddressRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        VerifyEmailAddressRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        VerifyEmailAddressRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
VerifyEmailAddressRes.id = 'proto.pub.v1.profile.VerifyEmailAddressRes';
/**
 * Message implementation for proto.pub.v1.profile.SendErasePasswordEmailReq
 */
class SendErasePasswordEmailReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendErasePasswordEmailReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.phoneNumber = _value.phoneNumber
            ? new PhoneNumber(_value.phoneNumber)
            : undefined;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        SendErasePasswordEmailReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendErasePasswordEmailReq();
        SendErasePasswordEmailReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.phoneNumber = _instance.phoneNumber || undefined;
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.phoneNumber = new PhoneNumber();
                    _reader.readMessage(_instance.phoneNumber, PhoneNumber.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SendErasePasswordEmailReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.phoneNumber) {
            _writer.writeMessage(1, _instance.phoneNumber, PhoneNumber.serializeBinaryToWriter);
        }
        if (_instance.platform) {
            _writer.writeMessage(2, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get phoneNumber() {
        return this._phoneNumber;
    }
    set phoneNumber(value) {
        this._phoneNumber = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendErasePasswordEmailReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            phoneNumber: this.phoneNumber ? this.phoneNumber.toObject() : undefined,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            phoneNumber: this.phoneNumber
                ? this.phoneNumber.toProtobufJSON(options)
                : null,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
SendErasePasswordEmailReq.id = 'proto.pub.v1.profile.SendErasePasswordEmailReq';
/**
 * Message implementation for proto.pub.v1.profile.SendErasePasswordEmailRes
 */
class SendErasePasswordEmailRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendErasePasswordEmailRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.newerVersionInformation = _value.newerVersionInformation
            ? new NewerVersionInformation(_value.newerVersionInformation)
            : undefined;
        SendErasePasswordEmailRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendErasePasswordEmailRes();
        SendErasePasswordEmailRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.newerVersionInformation =
            _instance.newerVersionInformation || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.newerVersionInformation = new NewerVersionInformation();
                    _reader.readMessage(_instance.newerVersionInformation, NewerVersionInformation.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SendErasePasswordEmailRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.newerVersionInformation) {
            _writer.writeMessage(1, _instance.newerVersionInformation, NewerVersionInformation.serializeBinaryToWriter);
        }
    }
    get newerVersionInformation() {
        return this._newerVersionInformation;
    }
    set newerVersionInformation(value) {
        this._newerVersionInformation = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendErasePasswordEmailRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            newerVersionInformation: this.newerVersionInformation
                ? this.newerVersionInformation.toProtobufJSON(options)
                : null
        };
    }
}
SendErasePasswordEmailRes.id = 'proto.pub.v1.profile.SendErasePasswordEmailRes';
/**
 * Message implementation for proto.pub.v1.profile.ErasePasswordReq
 */
class ErasePasswordReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ErasePasswordReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.hash = _value.hash;
        ErasePasswordReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ErasePasswordReq();
        ErasePasswordReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.hash = _instance.hash || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.hash = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ErasePasswordReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.hash) {
            _writer.writeString(1, _instance.hash);
        }
    }
    get hash() {
        return this._hash;
    }
    set hash(value) {
        this._hash = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ErasePasswordReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            hash: this.hash
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            hash: this.hash
        };
    }
}
ErasePasswordReq.id = 'proto.pub.v1.profile.ErasePasswordReq';
/**
 * Message implementation for proto.pub.v1.profile.ErasePasswordRes
 */
class ErasePasswordRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ErasePasswordRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ErasePasswordRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ErasePasswordRes();
        ErasePasswordRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ErasePasswordRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ErasePasswordRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ErasePasswordRes.id = 'proto.pub.v1.profile.ErasePasswordRes';
/**
 * Message implementation for proto.pub.v1.profile.SaveContactsReq
 */
class SaveContactsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SaveContactsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.contactList = (_value.contactList || []).map(m => new Contact(m));
        this.returnUserContactByPhoneNumberList = (_value.returnUserContactByPhoneNumberList || []).map(m => new PhoneNumber(m));
        SaveContactsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SaveContactsReq();
        SaveContactsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.contactList = _instance.contactList || [];
        _instance.returnUserContactByPhoneNumberList =
            _instance.returnUserContactByPhoneNumberList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    const messageInitializer2 = new Contact();
                    _reader.readMessage(messageInitializer2, Contact.deserializeBinaryFromReader);
                    (_instance.contactList = _instance.contactList || []).push(messageInitializer2);
                    break;
                case 3:
                    const messageInitializer3 = new PhoneNumber();
                    _reader.readMessage(messageInitializer3, PhoneNumber.deserializeBinaryFromReader);
                    (_instance.returnUserContactByPhoneNumberList =
                        _instance.returnUserContactByPhoneNumberList || []).push(messageInitializer3);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SaveContactsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.contactList && _instance.contactList.length) {
            _writer.writeRepeatedMessage(2, _instance.contactList, Contact.serializeBinaryToWriter);
        }
        if (_instance.returnUserContactByPhoneNumberList &&
            _instance.returnUserContactByPhoneNumberList.length) {
            _writer.writeRepeatedMessage(3, _instance.returnUserContactByPhoneNumberList, PhoneNumber.serializeBinaryToWriter);
        }
    }
    get contactList() {
        return this._contactList;
    }
    set contactList(value) {
        this._contactList = value;
    }
    get returnUserContactByPhoneNumberList() {
        return this._returnUserContactByPhoneNumberList;
    }
    set returnUserContactByPhoneNumberList(value) {
        this._returnUserContactByPhoneNumberList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SaveContactsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            contactList: (this.contactList || []).map(m => m.toObject()),
            returnUserContactByPhoneNumberList: (this.returnUserContactByPhoneNumberList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            contactList: (this.contactList || []).map(m => m.toProtobufJSON(options)),
            returnUserContactByPhoneNumberList: (this.returnUserContactByPhoneNumberList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SaveContactsReq.id = 'proto.pub.v1.profile.SaveContactsReq';
/**
 * Message implementation for proto.pub.v1.profile.SaveContactsRes
 */
class SaveContactsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SaveContactsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userList = (_value.userList || []).map(m => new UserAsContact(m));
        SaveContactsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SaveContactsRes();
        SaveContactsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userList = _instance.userList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new UserAsContact();
                    _reader.readMessage(messageInitializer1, UserAsContact.deserializeBinaryFromReader);
                    (_instance.userList = _instance.userList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SaveContactsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userList && _instance.userList.length) {
            _writer.writeRepeatedMessage(1, _instance.userList, UserAsContact.serializeBinaryToWriter);
        }
    }
    get userList() {
        return this._userList;
    }
    set userList(value) {
        this._userList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SaveContactsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userList: (this.userList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userList: (this.userList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SaveContactsRes.id = 'proto.pub.v1.profile.SaveContactsRes';
/**
 * Message implementation for proto.pub.v1.profile.GetContactListUsersReq
 */
class GetContactListUsersReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetContactListUsersReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pageSize = _value.pageSize;
        this.pageNumber = _value.pageNumber;
        GetContactListUsersReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetContactListUsersReq();
        GetContactListUsersReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pageSize = _instance.pageSize || 0;
        _instance.pageNumber = _instance.pageNumber || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.pageSize = _reader.readInt32();
                    break;
                case 3:
                    _instance.pageNumber = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetContactListUsersReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pageSize) {
            _writer.writeInt32(2, _instance.pageSize);
        }
        if (_instance.pageNumber) {
            _writer.writeInt32(3, _instance.pageNumber);
        }
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
    }
    get pageNumber() {
        return this._pageNumber;
    }
    set pageNumber(value) {
        this._pageNumber = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetContactListUsersReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pageSize: this.pageSize,
            pageNumber: this.pageNumber
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pageSize: this.pageSize,
            pageNumber: this.pageNumber
        };
    }
}
GetContactListUsersReq.id = 'proto.pub.v1.profile.GetContactListUsersReq';
/**
 * Message implementation for proto.pub.v1.profile.GetContactListUsersRes
 */
class GetContactListUsersRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetContactListUsersRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userList = (_value.userList || []).map(m => new UserAsContact(m));
        this.nextPageNumber = _value.nextPageNumber;
        this.totalSize = _value.totalSize;
        GetContactListUsersRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetContactListUsersRes();
        GetContactListUsersRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userList = _instance.userList || [];
        _instance.nextPageNumber = _instance.nextPageNumber || 0;
        _instance.totalSize = _instance.totalSize || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new UserAsContact();
                    _reader.readMessage(messageInitializer1, UserAsContact.deserializeBinaryFromReader);
                    (_instance.userList = _instance.userList || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageNumber = _reader.readInt32();
                    break;
                case 3:
                    _instance.totalSize = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetContactListUsersRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userList && _instance.userList.length) {
            _writer.writeRepeatedMessage(1, _instance.userList, UserAsContact.serializeBinaryToWriter);
        }
        if (_instance.nextPageNumber) {
            _writer.writeInt32(2, _instance.nextPageNumber);
        }
        if (_instance.totalSize) {
            _writer.writeInt32(3, _instance.totalSize);
        }
    }
    get userList() {
        return this._userList;
    }
    set userList(value) {
        this._userList = value;
    }
    get nextPageNumber() {
        return this._nextPageNumber;
    }
    set nextPageNumber(value) {
        this._nextPageNumber = value;
    }
    get totalSize() {
        return this._totalSize;
    }
    set totalSize(value) {
        this._totalSize = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetContactListUsersRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userList: (this.userList || []).map(m => m.toObject()),
            nextPageNumber: this.nextPageNumber,
            totalSize: this.totalSize
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userList: (this.userList || []).map(m => m.toProtobufJSON(options)),
            nextPageNumber: this.nextPageNumber,
            totalSize: this.totalSize
        };
    }
}
GetContactListUsersRes.id = 'proto.pub.v1.profile.GetContactListUsersRes';
/**
 * Message implementation for proto.pub.v1.profile.GetContactListReq
 */
class GetContactListReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetContactListReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pageSize = _value.pageSize;
        this.pageNumber = _value.pageNumber;
        GetContactListReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetContactListReq();
        GetContactListReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pageSize = _instance.pageSize || 0;
        _instance.pageNumber = _instance.pageNumber || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.pageSize = _reader.readInt32();
                    break;
                case 3:
                    _instance.pageNumber = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetContactListReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pageSize) {
            _writer.writeInt32(2, _instance.pageSize);
        }
        if (_instance.pageNumber) {
            _writer.writeInt32(3, _instance.pageNumber);
        }
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
    }
    get pageNumber() {
        return this._pageNumber;
    }
    set pageNumber(value) {
        this._pageNumber = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetContactListReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pageSize: this.pageSize,
            pageNumber: this.pageNumber
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pageSize: this.pageSize,
            pageNumber: this.pageNumber
        };
    }
}
GetContactListReq.id = 'proto.pub.v1.profile.GetContactListReq';
/**
 * Message implementation for proto.pub.v1.profile.GetContactListRes
 */
class GetContactListRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetContactListRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.contactList = (_value.contactList || []).map(m => new Contact(m));
        this.nextPageNumber = _value.nextPageNumber;
        this.totalSize = _value.totalSize;
        GetContactListRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetContactListRes();
        GetContactListRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.contactList = _instance.contactList || [];
        _instance.nextPageNumber = _instance.nextPageNumber || 0;
        _instance.totalSize = _instance.totalSize || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Contact();
                    _reader.readMessage(messageInitializer1, Contact.deserializeBinaryFromReader);
                    (_instance.contactList = _instance.contactList || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageNumber = _reader.readInt32();
                    break;
                case 3:
                    _instance.totalSize = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetContactListRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.contactList && _instance.contactList.length) {
            _writer.writeRepeatedMessage(1, _instance.contactList, Contact.serializeBinaryToWriter);
        }
        if (_instance.nextPageNumber) {
            _writer.writeInt32(2, _instance.nextPageNumber);
        }
        if (_instance.totalSize) {
            _writer.writeInt32(3, _instance.totalSize);
        }
    }
    get contactList() {
        return this._contactList;
    }
    set contactList(value) {
        this._contactList = value;
    }
    get nextPageNumber() {
        return this._nextPageNumber;
    }
    set nextPageNumber(value) {
        this._nextPageNumber = value;
    }
    get totalSize() {
        return this._totalSize;
    }
    set totalSize(value) {
        this._totalSize = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetContactListRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            contactList: (this.contactList || []).map(m => m.toObject()),
            nextPageNumber: this.nextPageNumber,
            totalSize: this.totalSize
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            contactList: (this.contactList || []).map(m => m.toProtobufJSON(options)),
            nextPageNumber: this.nextPageNumber,
            totalSize: this.totalSize
        };
    }
}
GetContactListRes.id = 'proto.pub.v1.profile.GetContactListRes';
/**
 * Message implementation for proto.pub.v1.profile.GetUserByUidReq
 */
class GetUserByUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserByUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        GetUserByUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserByUidReq();
        GetUserByUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserByUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserByUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
GetUserByUidReq.id = 'proto.pub.v1.profile.GetUserByUidReq';
/**
 * Message implementation for proto.pub.v1.profile.GetUserByUidRes
 */
class GetUserByUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserByUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.user = _value.user
            ? new UserAsContact(_value.user)
            : undefined;
        GetUserByUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserByUidRes();
        GetUserByUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.user = _instance.user || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.user = new UserAsContact();
                    _reader.readMessage(_instance.user, UserAsContact.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserByUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.user) {
            _writer.writeMessage(1, _instance.user, UserAsContact.serializeBinaryToWriter);
        }
    }
    get user() {
        return this._user;
    }
    set user(value) {
        this._user = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserByUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            user: this.user ? this.user.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            user: this.user ? this.user.toProtobufJSON(options) : null
        };
    }
}
GetUserByUidRes.id = 'proto.pub.v1.profile.GetUserByUidRes';
/**
 * Message implementation for proto.pub.v1.profile.UserSearchReq
 */
class UserSearchReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserSearchReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        UserSearchReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserSearchReq();
        UserSearchReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserSearchReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserSearchReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
UserSearchReq.id = 'proto.pub.v1.profile.UserSearchReq';
/**
 * Message implementation for proto.pub.v1.profile.UserSearchRes
 */
class UserSearchRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UserSearchRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.userList = (_value.userList || []).map(m => new UserAsContact(m));
        UserSearchRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UserSearchRes();
        UserSearchRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.userList = _instance.userList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new UserAsContact();
                    _reader.readMessage(messageInitializer1, UserAsContact.deserializeBinaryFromReader);
                    (_instance.userList = _instance.userList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UserSearchRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.userList && _instance.userList.length) {
            _writer.writeRepeatedMessage(1, _instance.userList, UserAsContact.serializeBinaryToWriter);
        }
    }
    get userList() {
        return this._userList;
    }
    set userList(value) {
        this._userList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UserSearchRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            userList: (this.userList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            userList: (this.userList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
UserSearchRes.id = 'proto.pub.v1.profile.UserSearchRes';
/**
 * Message implementation for proto.pub.v1.profile.GetUserProfileReq
 */
class GetUserProfileReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserProfileReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetUserProfileReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserProfileReq();
        GetUserProfileReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetUserProfileReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserProfileReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetUserProfileReq.id = 'proto.pub.v1.profile.GetUserProfileReq';
/**
 * Message implementation for proto.pub.v1.profile.GetUserProfileRes
 */
class GetUserProfileRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserProfileRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.profile = _value.profile
            ? new UserPrivateData(_value.profile)
            : undefined;
        GetUserProfileRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserProfileRes();
        GetUserProfileRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.profile = _instance.profile || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.profile = new UserPrivateData();
                    _reader.readMessage(_instance.profile, UserPrivateData.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserProfileRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.profile) {
            _writer.writeMessage(1, _instance.profile, UserPrivateData.serializeBinaryToWriter);
        }
    }
    get profile() {
        return this._profile;
    }
    set profile(value) {
        this._profile = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserProfileRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            profile: this.profile ? this.profile.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            profile: this.profile ? this.profile.toProtobufJSON(options) : null
        };
    }
}
GetUserProfileRes.id = 'proto.pub.v1.profile.GetUserProfileRes';
/**
 * Message implementation for proto.pub.v1.profile.SaveUserProfileReq
 */
class SaveUserProfileReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SaveUserProfileReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.firstName = _value.firstName;
        this.lastName = _value.lastName;
        this.description = _value.description;
        this.deprecatedPasswordHash = _value.deprecatedPasswordHash;
        this.deprecatedEmail = _value.deprecatedEmail;
        SaveUserProfileReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SaveUserProfileReq();
        SaveUserProfileReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.firstName = _instance.firstName || '';
        _instance.lastName = _instance.lastName || '';
        _instance.description = _instance.description || '';
        _instance.deprecatedPasswordHash = _instance.deprecatedPasswordHash || '';
        _instance.deprecatedEmail = _instance.deprecatedEmail || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 2:
                    _instance.firstName = _reader.readString();
                    break;
                case 3:
                    _instance.lastName = _reader.readString();
                    break;
                case 4:
                    _instance.description = _reader.readString();
                    break;
                case 1:
                    _instance.deprecatedPasswordHash = _reader.readString();
                    break;
                case 5:
                    _instance.deprecatedEmail = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SaveUserProfileReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.firstName) {
            _writer.writeString(2, _instance.firstName);
        }
        if (_instance.lastName) {
            _writer.writeString(3, _instance.lastName);
        }
        if (_instance.description) {
            _writer.writeString(4, _instance.description);
        }
        if (_instance.deprecatedPasswordHash) {
            _writer.writeString(1, _instance.deprecatedPasswordHash);
        }
        if (_instance.deprecatedEmail) {
            _writer.writeString(5, _instance.deprecatedEmail);
        }
    }
    get firstName() {
        return this._firstName;
    }
    set firstName(value) {
        this._firstName = value;
    }
    get lastName() {
        return this._lastName;
    }
    set lastName(value) {
        this._lastName = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get deprecatedPasswordHash() {
        return this._deprecatedPasswordHash;
    }
    set deprecatedPasswordHash(value) {
        this._deprecatedPasswordHash = value;
    }
    get deprecatedEmail() {
        return this._deprecatedEmail;
    }
    set deprecatedEmail(value) {
        this._deprecatedEmail = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SaveUserProfileReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            firstName: this.firstName,
            lastName: this.lastName,
            description: this.description,
            deprecatedPasswordHash: this.deprecatedPasswordHash,
            deprecatedEmail: this.deprecatedEmail
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            firstName: this.firstName,
            lastName: this.lastName,
            description: this.description,
            deprecatedPasswordHash: this.deprecatedPasswordHash,
            deprecatedEmail: this.deprecatedEmail
        };
    }
}
SaveUserProfileReq.id = 'proto.pub.v1.profile.SaveUserProfileReq';
/**
 * Message implementation for proto.pub.v1.profile.SaveUserProfileRes
 */
class SaveUserProfileRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SaveUserProfileRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.profile = _value.profile
            ? new UserPrivateData(_value.profile)
            : undefined;
        SaveUserProfileRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SaveUserProfileRes();
        SaveUserProfileRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.profile = _instance.profile || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.profile = new UserPrivateData();
                    _reader.readMessage(_instance.profile, UserPrivateData.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SaveUserProfileRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.profile) {
            _writer.writeMessage(1, _instance.profile, UserPrivateData.serializeBinaryToWriter);
        }
    }
    get profile() {
        return this._profile;
    }
    set profile(value) {
        this._profile = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SaveUserProfileRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            profile: this.profile ? this.profile.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            profile: this.profile ? this.profile.toProtobufJSON(options) : null
        };
    }
}
SaveUserProfileRes.id = 'proto.pub.v1.profile.SaveUserProfileRes';
/**
 * Message implementation for proto.pub.v1.profile.UpdateEmailReq
 */
class UpdateEmailReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateEmailReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.email = _value.email;
        UpdateEmailReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateEmailReq();
        UpdateEmailReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.email = _instance.email || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.email = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateEmailReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.email) {
            _writer.writeString(1, _instance.email);
        }
    }
    get email() {
        return this._email;
    }
    set email(value) {
        this._email = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateEmailReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            email: this.email
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            email: this.email
        };
    }
}
UpdateEmailReq.id = 'proto.pub.v1.profile.UpdateEmailReq';
/**
 * Message implementation for proto.pub.v1.profile.UpdateEmailRes
 */
class UpdateEmailRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateEmailRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.profile = _value.profile
            ? new UserPrivateData(_value.profile)
            : undefined;
        UpdateEmailRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateEmailRes();
        UpdateEmailRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.profile = _instance.profile || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.profile = new UserPrivateData();
                    _reader.readMessage(_instance.profile, UserPrivateData.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateEmailRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.profile) {
            _writer.writeMessage(1, _instance.profile, UserPrivateData.serializeBinaryToWriter);
        }
    }
    get profile() {
        return this._profile;
    }
    set profile(value) {
        this._profile = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateEmailRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            profile: this.profile ? this.profile.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            profile: this.profile ? this.profile.toProtobufJSON(options) : null
        };
    }
}
UpdateEmailRes.id = 'proto.pub.v1.profile.UpdateEmailRes';
/**
 * Message implementation for proto.pub.v1.profile.ResendEmailVerificationReq
 */
class ResendEmailVerificationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ResendEmailVerificationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ResendEmailVerificationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ResendEmailVerificationReq();
        ResendEmailVerificationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ResendEmailVerificationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ResendEmailVerificationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ResendEmailVerificationReq.id = 'proto.pub.v1.profile.ResendEmailVerificationReq';
/**
 * Message implementation for proto.pub.v1.profile.ResendEmailVerificationRes
 */
class ResendEmailVerificationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ResendEmailVerificationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ResendEmailVerificationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ResendEmailVerificationRes();
        ResendEmailVerificationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ResendEmailVerificationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ResendEmailVerificationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ResendEmailVerificationRes.id = 'proto.pub.v1.profile.ResendEmailVerificationRes';
/**
 * Message implementation for proto.pub.v1.profile.UpdatePasswordReq
 */
class UpdatePasswordReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdatePasswordReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.newPassword = _value.newPassword;
        this.currentPassword = _value.currentPassword;
        this.passwordHint = _value.passwordHint;
        UpdatePasswordReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdatePasswordReq();
        UpdatePasswordReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.newPassword = _instance.newPassword || '';
        _instance.currentPassword = _instance.currentPassword || '';
        _instance.passwordHint = _instance.passwordHint || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.newPassword = _reader.readString();
                    break;
                case 2:
                    _instance.currentPassword = _reader.readString();
                    break;
                case 3:
                    _instance.passwordHint = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdatePasswordReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.newPassword) {
            _writer.writeString(1, _instance.newPassword);
        }
        if (_instance.currentPassword) {
            _writer.writeString(2, _instance.currentPassword);
        }
        if (_instance.passwordHint) {
            _writer.writeString(3, _instance.passwordHint);
        }
    }
    get newPassword() {
        return this._newPassword;
    }
    set newPassword(value) {
        this._newPassword = value;
    }
    get currentPassword() {
        return this._currentPassword;
    }
    set currentPassword(value) {
        this._currentPassword = value;
    }
    get passwordHint() {
        return this._passwordHint;
    }
    set passwordHint(value) {
        this._passwordHint = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdatePasswordReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            newPassword: this.newPassword,
            currentPassword: this.currentPassword,
            passwordHint: this.passwordHint
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            newPassword: this.newPassword,
            currentPassword: this.currentPassword,
            passwordHint: this.passwordHint
        };
    }
}
UpdatePasswordReq.id = 'proto.pub.v1.profile.UpdatePasswordReq';
/**
 * Message implementation for proto.pub.v1.profile.UpdatePasswordRes
 */
class UpdatePasswordRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdatePasswordRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.profile = _value.profile
            ? new UserPrivateData(_value.profile)
            : undefined;
        UpdatePasswordRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdatePasswordRes();
        UpdatePasswordRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.profile = _instance.profile || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.profile = new UserPrivateData();
                    _reader.readMessage(_instance.profile, UserPrivateData.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdatePasswordRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.profile) {
            _writer.writeMessage(1, _instance.profile, UserPrivateData.serializeBinaryToWriter);
        }
    }
    get profile() {
        return this._profile;
    }
    set profile(value) {
        this._profile = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdatePasswordRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            profile: this.profile ? this.profile.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            profile: this.profile ? this.profile.toProtobufJSON(options) : null
        };
    }
}
UpdatePasswordRes.id = 'proto.pub.v1.profile.UpdatePasswordRes';
/**
 * Message implementation for proto.pub.v1.profile.VerifyQrCodeTokenReq
 */
class VerifyQrCodeTokenReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of VerifyQrCodeTokenReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.token = _value.token;
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        VerifyQrCodeTokenReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new VerifyQrCodeTokenReq();
        VerifyQrCodeTokenReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.token = _instance.token || '';
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.token = _reader.readString();
                    break;
                case 2:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        VerifyQrCodeTokenReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.token) {
            _writer.writeString(1, _instance.token);
        }
        if (_instance.platform) {
            _writer.writeMessage(2, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        VerifyQrCodeTokenReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            token: this.token,
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            token: this.token,
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
VerifyQrCodeTokenReq.id = 'proto.pub.v1.profile.VerifyQrCodeTokenReq';
/**
 * Message implementation for proto.pub.v1.profile.VerifyQrCodeTokenRes
 */
class VerifyQrCodeTokenRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of VerifyQrCodeTokenRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        VerifyQrCodeTokenRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new VerifyQrCodeTokenRes();
        VerifyQrCodeTokenRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        VerifyQrCodeTokenRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        VerifyQrCodeTokenRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
VerifyQrCodeTokenRes.id = 'proto.pub.v1.profile.VerifyQrCodeTokenRes';
/**
 * Message implementation for proto.pub.v1.profile.UpdateSessionPlatformInformationReq
 */
class UpdateSessionPlatformInformationReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateSessionPlatformInformationReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.platform = _value.platform
            ? new Platform(_value.platform)
            : undefined;
        UpdateSessionPlatformInformationReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateSessionPlatformInformationReq();
        UpdateSessionPlatformInformationReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.platform = _instance.platform || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.platform = new Platform();
                    _reader.readMessage(_instance.platform, Platform.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateSessionPlatformInformationReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.platform) {
            _writer.writeMessage(1, _instance.platform, Platform.serializeBinaryToWriter);
        }
    }
    get platform() {
        return this._platform;
    }
    set platform(value) {
        this._platform = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateSessionPlatformInformationReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            platform: this.platform ? this.platform.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            platform: this.platform ? this.platform.toProtobufJSON(options) : null
        };
    }
}
UpdateSessionPlatformInformationReq.id = 'proto.pub.v1.profile.UpdateSessionPlatformInformationReq';
/**
 * Message implementation for proto.pub.v1.profile.UpdateSessionPlatformInformationRes
 */
class UpdateSessionPlatformInformationRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateSessionPlatformInformationRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UpdateSessionPlatformInformationRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateSessionPlatformInformationRes();
        UpdateSessionPlatformInformationRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UpdateSessionPlatformInformationRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateSessionPlatformInformationRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UpdateSessionPlatformInformationRes.id = 'proto.pub.v1.profile.UpdateSessionPlatformInformationRes';
/**
 * Message implementation for proto.pub.v1.profile.GetMySessionsReq
 */
class GetMySessionsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMySessionsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetMySessionsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMySessionsReq();
        GetMySessionsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetMySessionsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMySessionsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetMySessionsReq.id = 'proto.pub.v1.profile.GetMySessionsReq';
/**
 * Message implementation for proto.pub.v1.profile.GetMySessionsRes
 */
class GetMySessionsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMySessionsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessions = (_value.sessions || []).map(m => new Session(m));
        GetMySessionsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMySessionsRes();
        GetMySessionsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessions = _instance.sessions || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Session();
                    _reader.readMessage(messageInitializer1, Session.deserializeBinaryFromReader);
                    (_instance.sessions = _instance.sessions || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMySessionsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessions && _instance.sessions.length) {
            _writer.writeRepeatedMessage(1, _instance.sessions, Session.serializeBinaryToWriter);
        }
    }
    get sessions() {
        return this._sessions;
    }
    set sessions(value) {
        this._sessions = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMySessionsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessions: (this.sessions || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessions: (this.sessions || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetMySessionsRes.id = 'proto.pub.v1.profile.GetMySessionsRes';
/**
 * Message implementation for proto.pub.v1.profile.RevokeSessionReq
 */
class RevokeSessionReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RevokeSessionReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionIds = (_value.sessionIds || []).slice();
        RevokeSessionReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RevokeSessionReq();
        RevokeSessionReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionIds = _instance.sessionIds || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.sessionIds = _instance.sessionIds || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        RevokeSessionReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionIds && _instance.sessionIds.length) {
            _writer.writeRepeatedString(1, _instance.sessionIds);
        }
    }
    get sessionIds() {
        return this._sessionIds;
    }
    set sessionIds(value) {
        this._sessionIds = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RevokeSessionReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionIds: (this.sessionIds || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionIds: (this.sessionIds || []).slice()
        };
    }
}
RevokeSessionReq.id = 'proto.pub.v1.profile.RevokeSessionReq';
/**
 * Message implementation for proto.pub.v1.profile.RevokeSessionRes
 */
class RevokeSessionRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RevokeSessionRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RevokeSessionRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RevokeSessionRes();
        RevokeSessionRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RevokeSessionRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RevokeSessionRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RevokeSessionRes.id = 'proto.pub.v1.profile.RevokeSessionRes';
/**
 * Message implementation for proto.pub.v1.profile.LogoutSessionReq
 */
class LogoutSessionReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LogoutSessionReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sessionIds = (_value.sessionIds || []).slice();
        LogoutSessionReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LogoutSessionReq();
        LogoutSessionReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sessionIds = _instance.sessionIds || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.sessionIds = _instance.sessionIds || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        LogoutSessionReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sessionIds && _instance.sessionIds.length) {
            _writer.writeRepeatedString(1, _instance.sessionIds);
        }
    }
    get sessionIds() {
        return this._sessionIds;
    }
    set sessionIds(value) {
        this._sessionIds = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LogoutSessionReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sessionIds: (this.sessionIds || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            sessionIds: (this.sessionIds || []).slice()
        };
    }
}
LogoutSessionReq.id = 'proto.pub.v1.profile.LogoutSessionReq';
/**
 * Message implementation for proto.pub.v1.profile.LogoutSessionRes
 */
class LogoutSessionRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of LogoutSessionRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        LogoutSessionRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new LogoutSessionRes();
        LogoutSessionRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        LogoutSessionRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        LogoutSessionRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
LogoutSessionRes.id = 'proto.pub.v1.profile.LogoutSessionRes';
/**
 * Message implementation for proto.pub.v1.profile.RevokeAllOtherSessionsReq
 */
class RevokeAllOtherSessionsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RevokeAllOtherSessionsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RevokeAllOtherSessionsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RevokeAllOtherSessionsReq();
        RevokeAllOtherSessionsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RevokeAllOtherSessionsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RevokeAllOtherSessionsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RevokeAllOtherSessionsReq.id = 'proto.pub.v1.profile.RevokeAllOtherSessionsReq';
/**
 * Message implementation for proto.pub.v1.profile.RevokeAllOtherSessionsRes
 */
class RevokeAllOtherSessionsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RevokeAllOtherSessionsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RevokeAllOtherSessionsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RevokeAllOtherSessionsRes();
        RevokeAllOtherSessionsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RevokeAllOtherSessionsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RevokeAllOtherSessionsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RevokeAllOtherSessionsRes.id = 'proto.pub.v1.profile.RevokeAllOtherSessionsRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for ContactService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_CONTACT_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_CONTACT_SERVICE_CLIENT_SETTINGS');
/**
 * Specific GrpcClientSettings for UserService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_USER_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_USER_SERVICE_CLIENT_SETTINGS');
/**
 * Specific GrpcClientSettings for AuthService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_AUTH_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_AUTH_SERVICE_CLIENT_SETTINGS');
/**
 * Specific GrpcClientSettings for SessionService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_SESSION_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_SESSION_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.profile.ContactService
 */
class ContactServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.profile.ContactService/SaveContacts
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SaveContactsRes>>
             */
            saveContacts: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.ContactService/SaveContacts',
                    requestData,
                    requestMetadata,
                    requestClass: SaveContactsReq,
                    responseClass: SaveContactsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.ContactService/GetContactList
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetContactListRes>>
             */
            getContactList: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.ContactService/GetContactList',
                    requestData,
                    requestMetadata,
                    requestClass: GetContactListReq,
                    responseClass: GetContactListRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.ContactService/GetContactListUsers
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetContactListUsersRes>>
             */
            getContactListUsers: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.ContactService/GetContactListUsers',
                    requestData,
                    requestMetadata,
                    requestClass: GetContactListUsersReq,
                    responseClass: GetContactListUsersRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.ContactService/GetUserByUid
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetUserByUidRes>>
             */
            getUserByUid: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.ContactService/GetUserByUid',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserByUidReq,
                    responseClass: GetUserByUidRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.ContactService/SearchUserByName
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UserSearchRes>>
             */
            searchUserByName: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.ContactService/SearchUserByName',
                    requestData,
                    requestMetadata,
                    requestClass: UserSearchReq,
                    responseClass: UserSearchRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.profile.ContactService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.profile.ContactService/SaveContacts
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SaveContactsRes>
     */
    saveContacts(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .saveContacts(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.ContactService/GetContactList
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetContactListRes>
     */
    getContactList(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getContactList(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.ContactService/GetContactListUsers
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetContactListUsersRes>
     */
    getContactListUsers(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getContactListUsers(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.ContactService/GetUserByUid
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetUserByUidRes>
     */
    getUserByUid(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserByUid(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.ContactService/SearchUserByName
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UserSearchRes>
     */
    searchUserByName(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .searchUserByName(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ContactServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ContactServiceClient, deps: [{ token: GRPC_CONTACT_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ContactServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ContactServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ContactServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_CONTACT_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });
/**
 * Service client implementation for proto.pub.v1.profile.UserService
 */
class UserServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.profile.UserService/SaveUserProfile
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SaveUserProfileRes>>
             */
            saveUserProfile: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.UserService/SaveUserProfile',
                    requestData,
                    requestMetadata,
                    requestClass: SaveUserProfileReq,
                    responseClass: SaveUserProfileRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.UserService/UpdateEmail
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UpdateEmailRes>>
             */
            updateEmail: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.UserService/UpdateEmail',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateEmailReq,
                    responseClass: UpdateEmailRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.UserService/ResendEmailVerification
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ResendEmailVerificationRes>>
             */
            resendEmailVerification: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.UserService/ResendEmailVerification',
                    requestData,
                    requestMetadata,
                    requestClass: ResendEmailVerificationReq,
                    responseClass: ResendEmailVerificationRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.UserService/UpdatePassword
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UpdatePasswordRes>>
             */
            updatePassword: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.UserService/UpdatePassword',
                    requestData,
                    requestMetadata,
                    requestClass: UpdatePasswordReq,
                    responseClass: UpdatePasswordRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.UserService/GetUserProfile
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetUserProfileRes>>
             */
            getUserProfile: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.UserService/GetUserProfile',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserProfileReq,
                    responseClass: GetUserProfileRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.profile.UserService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.profile.UserService/SaveUserProfile
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SaveUserProfileRes>
     */
    saveUserProfile(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .saveUserProfile(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.UserService/UpdateEmail
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UpdateEmailRes>
     */
    updateEmail(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateEmail(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.UserService/ResendEmailVerification
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ResendEmailVerificationRes>
     */
    resendEmailVerification(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .resendEmailVerification(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.UserService/UpdatePassword
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UpdatePasswordRes>
     */
    updatePassword(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updatePassword(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.UserService/GetUserProfile
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetUserProfileRes>
     */
    getUserProfile(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserProfile(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
UserServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: UserServiceClient, deps: [{ token: GRPC_USER_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
UserServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: UserServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: UserServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_USER_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });
/**
 * Service client implementation for proto.pub.v1.profile.AuthService
 */
class AuthServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/GetVerificationCode
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetVerificationCodeRes>>
             */
            getVerificationCode: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/GetVerificationCode',
                    requestData,
                    requestMetadata,
                    requestClass: GetVerificationCodeReq,
                    responseClass: GetVerificationCodeRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/VerifyAndGetToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AccessTokenRes>>
             */
            verifyAndGetToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/VerifyAndGetToken',
                    requestData,
                    requestMetadata,
                    requestClass: VerifyCodeReq,
                    responseClass: AccessTokenRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/CheckQrCodeIsVerifiedAndLogin
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AccessTokenRes>>
             */
            checkQrCodeIsVerifiedAndLogin: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/CheckQrCodeIsVerifiedAndLogin',
                    requestData,
                    requestMetadata,
                    requestClass: CheckQrCodeIsVerifiedAndLoginReq,
                    responseClass: AccessTokenRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/RenewAccessToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RenewAccessTokenRes>>
             */
            renewAccessToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/RenewAccessToken',
                    requestData,
                    requestMetadata,
                    requestClass: RenewAccessTokenReq,
                    responseClass: RenewAccessTokenRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/VerifyEmailAddress
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.VerifyEmailAddressRes>>
             */
            verifyEmailAddress: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/VerifyEmailAddress',
                    requestData,
                    requestMetadata,
                    requestClass: VerifyEmailAddressReq,
                    responseClass: VerifyEmailAddressRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/SendErasePasswordEmail
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SendErasePasswordEmailRes>>
             */
            sendErasePasswordEmail: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/SendErasePasswordEmail',
                    requestData,
                    requestMetadata,
                    requestClass: SendErasePasswordEmailReq,
                    responseClass: SendErasePasswordEmailRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.AuthService/ErasePassword
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ErasePasswordRes>>
             */
            erasePassword: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.AuthService/ErasePassword',
                    requestData,
                    requestMetadata,
                    requestClass: ErasePasswordReq,
                    responseClass: ErasePasswordRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.profile.AuthService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/GetVerificationCode
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetVerificationCodeRes>
     */
    getVerificationCode(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getVerificationCode(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/VerifyAndGetToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AccessTokenRes>
     */
    verifyAndGetToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .verifyAndGetToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/CheckQrCodeIsVerifiedAndLogin
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AccessTokenRes>
     */
    checkQrCodeIsVerifiedAndLogin(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .checkQrCodeIsVerifiedAndLogin(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/RenewAccessToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RenewAccessTokenRes>
     */
    renewAccessToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .renewAccessToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/VerifyEmailAddress
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.VerifyEmailAddressRes>
     */
    verifyEmailAddress(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .verifyEmailAddress(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/SendErasePasswordEmail
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SendErasePasswordEmailRes>
     */
    sendErasePasswordEmail(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .sendErasePasswordEmail(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.AuthService/ErasePassword
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ErasePasswordRes>
     */
    erasePassword(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .erasePassword(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
AuthServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AuthServiceClient, deps: [{ token: GRPC_AUTH_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
AuthServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AuthServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: AuthServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_AUTH_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });
/**
 * Service client implementation for proto.pub.v1.profile.SessionService
 */
class SessionServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.profile.SessionService/VerifyQrCodeToken
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.VerifyQrCodeTokenRes>>
             */
            verifyQrCodeToken: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.SessionService/VerifyQrCodeToken',
                    requestData,
                    requestMetadata,
                    requestClass: VerifyQrCodeTokenReq,
                    responseClass: VerifyQrCodeTokenRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.SessionService/GetMySessions
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetMySessionsRes>>
             */
            getMySessions: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.SessionService/GetMySessions',
                    requestData,
                    requestMetadata,
                    requestClass: GetMySessionsReq,
                    responseClass: GetMySessionsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.SessionService/UpdateSessionPlatformInformation
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UpdateSessionPlatformInformationRes>>
             */
            updateSessionPlatformInformation: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.SessionService/UpdateSessionPlatformInformation',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateSessionPlatformInformationReq,
                    responseClass: UpdateSessionPlatformInformationRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.SessionService/LogoutSession
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.LogoutSessionRes>>
             */
            logoutSession: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.SessionService/LogoutSession',
                    requestData,
                    requestMetadata,
                    requestClass: LogoutSessionReq,
                    responseClass: LogoutSessionRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.SessionService/RevokeSession
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RevokeSessionRes>>
             */
            revokeSession: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.SessionService/RevokeSession',
                    requestData,
                    requestMetadata,
                    requestClass: RevokeSessionReq,
                    responseClass: RevokeSessionRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.profile.SessionService/RevokeAllOtherSessions
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RevokeAllOtherSessionsRes>>
             */
            revokeAllOtherSessions: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.profile.SessionService/RevokeAllOtherSessions',
                    requestData,
                    requestMetadata,
                    requestClass: RevokeAllOtherSessionsReq,
                    responseClass: RevokeAllOtherSessionsRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.profile.SessionService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.profile.SessionService/VerifyQrCodeToken
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.VerifyQrCodeTokenRes>
     */
    verifyQrCodeToken(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .verifyQrCodeToken(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.SessionService/GetMySessions
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetMySessionsRes>
     */
    getMySessions(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getMySessions(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.SessionService/UpdateSessionPlatformInformation
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UpdateSessionPlatformInformationRes>
     */
    updateSessionPlatformInformation(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateSessionPlatformInformation(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.SessionService/LogoutSession
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.LogoutSessionRes>
     */
    logoutSession(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .logoutSession(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.SessionService/RevokeSession
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RevokeSessionRes>
     */
    revokeSession(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .revokeSession(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.profile.SessionService/RevokeAllOtherSessions
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RevokeAllOtherSessionsRes>
     */
    revokeAllOtherSessions(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .revokeAllOtherSessions(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
SessionServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SessionServiceClient, deps: [{ token: GRPC_SESSION_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
SessionServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SessionServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: SessionServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_SESSION_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.models.Media
 */
class Media {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Media to deeply clone from
     */
    constructor(_value) {
        this._type = Media.TypeCase.none;
        _value = _value || {};
        this.createdOn = _value.createdOn;
        this.createdBy = _value.createdBy
            ? new Uid(_value.createdBy)
            : undefined;
        this.messageId = _value.messageId;
        this.encrypted = _value.encrypted;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.link = _value.link;
        Media.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Media();
        Media.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.createdOn = _instance.createdOn || '0';
        _instance.createdBy = _instance.createdBy || undefined;
        _instance.messageId = _instance.messageId || '0';
        _instance.encrypted = _instance.encrypted || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.createdOn = _reader.readInt64String();
                    break;
                case 2:
                    _instance.createdBy = new Uid();
                    _reader.readMessage(_instance.createdBy, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 6:
                    _instance.encrypted = _reader.readBool();
                    break;
                case 4:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.link = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Media.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.createdOn) {
            _writer.writeInt64String(1, _instance.createdOn);
        }
        if (_instance.createdBy) {
            _writer.writeMessage(2, _instance.createdBy, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(3, _instance.messageId);
        }
        if (_instance.encrypted) {
            _writer.writeBool(6, _instance.encrypted);
        }
        if (_instance.file) {
            _writer.writeMessage(4, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.link || _instance.link === '') {
            _writer.writeString(5, _instance.link);
        }
    }
    get createdOn() {
        return this._createdOn;
    }
    set createdOn(value) {
        this._createdOn = value;
    }
    get createdBy() {
        return this._createdBy;
    }
    set createdBy(value) {
        this._createdBy = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get encrypted() {
        return this._encrypted;
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        if (value !== undefined && value !== null) {
            this._link = undefined;
            this._type = Media.TypeCase.file;
        }
        this._file = value;
    }
    get link() {
        return this._link;
    }
    set link(value) {
        if (value !== undefined && value !== null) {
            this._file = undefined;
            this._type = Media.TypeCase.link;
        }
        this._link = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Media.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            createdOn: this.createdOn,
            createdBy: this.createdBy ? this.createdBy.toObject() : undefined,
            messageId: this.messageId,
            encrypted: this.encrypted,
            file: this.file ? this.file.toObject() : undefined,
            link: this.link
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            createdOn: this.createdOn,
            createdBy: this.createdBy ? this.createdBy.toProtobufJSON(options) : null,
            messageId: this.messageId,
            encrypted: this.encrypted,
            file: this.file ? this.file.toProtobufJSON(options) : null,
            link: this.link === null || this.link === undefined ? null : this.link
        };
    }
}
Media.id = 'proto.pub.v1.models.Media';
(function (Media) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["file"] = 1] = "file";
        TypeCase[TypeCase["link"] = 2] = "link";
    })(TypeCase = Media.TypeCase || (Media.TypeCase = {}));
})(Media || (Media = {}));

/**
 * Message implementation for proto.pub.v1.models.Meta
 */
class Meta {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Meta to deeply clone from
     */
    constructor(_value) {
        this._metaType = Meta.MetaTypeCase.none;
        _value = _value || {};
        this.createdOn = _value.createdOn;
        this.index = _value.index;
        this.sender = _value.sender
            ? new Uid(_value.sender)
            : undefined;
        this.messageId = _value.messageId;
        this.encrypted = _value.encrypted;
        this.file = _value.file
            ? new File(_value.file)
            : undefined;
        this.link = _value.link ? new Link(_value.link) : undefined;
        this.callInfo = _value.callInfo
            ? new CallInfo(_value.callInfo)
            : undefined;
        Meta.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Meta();
        Meta.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.createdOn = _instance.createdOn || '0';
        _instance.index = _instance.index || '0';
        _instance.sender = _instance.sender || undefined;
        _instance.messageId = _instance.messageId || '0';
        _instance.encrypted = _instance.encrypted || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.createdOn = _reader.readInt64String();
                    break;
                case 2:
                    _instance.index = _reader.readInt64String();
                    break;
                case 3:
                    _instance.sender = new Uid();
                    _reader.readMessage(_instance.sender, Uid.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 5:
                    _instance.encrypted = _reader.readBool();
                    break;
                case 6:
                    _instance.file = new File();
                    _reader.readMessage(_instance.file, File.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.link = new Link();
                    _reader.readMessage(_instance.link, Link.deserializeBinaryFromReader);
                    break;
                case 8:
                    _instance.callInfo = new CallInfo();
                    _reader.readMessage(_instance.callInfo, CallInfo.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Meta.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.createdOn) {
            _writer.writeInt64String(1, _instance.createdOn);
        }
        if (_instance.index) {
            _writer.writeInt64String(2, _instance.index);
        }
        if (_instance.sender) {
            _writer.writeMessage(3, _instance.sender, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(4, _instance.messageId);
        }
        if (_instance.encrypted) {
            _writer.writeBool(5, _instance.encrypted);
        }
        if (_instance.file) {
            _writer.writeMessage(6, _instance.file, File.serializeBinaryToWriter);
        }
        if (_instance.link) {
            _writer.writeMessage(7, _instance.link, Link.serializeBinaryToWriter);
        }
        if (_instance.callInfo) {
            _writer.writeMessage(8, _instance.callInfo, CallInfo.serializeBinaryToWriter);
        }
    }
    get createdOn() {
        return this._createdOn;
    }
    set createdOn(value) {
        this._createdOn = value;
    }
    get index() {
        return this._index;
    }
    set index(value) {
        this._index = value;
    }
    get sender() {
        return this._sender;
    }
    set sender(value) {
        this._sender = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get encrypted() {
        return this._encrypted;
    }
    set encrypted(value) {
        this._encrypted = value;
    }
    get file() {
        return this._file;
    }
    set file(value) {
        if (value !== undefined && value !== null) {
            this._link = this._callInfo = undefined;
            this._metaType = Meta.MetaTypeCase.file;
        }
        this._file = value;
    }
    get link() {
        return this._link;
    }
    set link(value) {
        if (value !== undefined && value !== null) {
            this._file = this._callInfo = undefined;
            this._metaType = Meta.MetaTypeCase.link;
        }
        this._link = value;
    }
    get callInfo() {
        return this._callInfo;
    }
    set callInfo(value) {
        if (value !== undefined && value !== null) {
            this._file = this._link = undefined;
            this._metaType = Meta.MetaTypeCase.callInfo;
        }
        this._callInfo = value;
    }
    get metaType() {
        return this._metaType;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Meta.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            createdOn: this.createdOn,
            index: this.index,
            sender: this.sender ? this.sender.toObject() : undefined,
            messageId: this.messageId,
            encrypted: this.encrypted,
            file: this.file ? this.file.toObject() : undefined,
            link: this.link ? this.link.toObject() : undefined,
            callInfo: this.callInfo ? this.callInfo.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            createdOn: this.createdOn,
            index: this.index,
            sender: this.sender ? this.sender.toProtobufJSON(options) : null,
            messageId: this.messageId,
            encrypted: this.encrypted,
            file: this.file ? this.file.toProtobufJSON(options) : null,
            link: this.link ? this.link.toProtobufJSON(options) : null,
            callInfo: this.callInfo ? this.callInfo.toProtobufJSON(options) : null
        };
    }
}
Meta.id = 'proto.pub.v1.models.Meta';
(function (Meta) {
    let MetaTypeCase;
    (function (MetaTypeCase) {
        MetaTypeCase[MetaTypeCase["none"] = 0] = "none";
        MetaTypeCase[MetaTypeCase["file"] = 1] = "file";
        MetaTypeCase[MetaTypeCase["link"] = 2] = "link";
        MetaTypeCase[MetaTypeCase["callInfo"] = 3] = "callInfo";
    })(MetaTypeCase = Meta.MetaTypeCase || (Meta.MetaTypeCase = {}));
})(Meta || (Meta = {}));
/**
 * Message implementation for proto.pub.v1.models.Link
 */
class Link {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Link to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.urls = (_value.urls || []).slice();
        Link.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Link();
        Link.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.urls = _instance.urls || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.urls = _instance.urls || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        Link.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.urls && _instance.urls.length) {
            _writer.writeRepeatedString(1, _instance.urls);
        }
    }
    get urls() {
        return this._urls;
    }
    set urls(value) {
        this._urls = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Link.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            urls: (this.urls || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            urls: (this.urls || []).slice()
        };
    }
}
Link.id = 'proto.pub.v1.models.Link';

/**
 * Message implementation for proto.pub.v1.models.Showcase
 */
class Showcase {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Showcase to deeply clone from
     */
    constructor(_value) {
        this._type = Showcase.TypeCase.none;
        _value = _value || {};
        this.isAdvertisement = _value.isAdvertisement;
        this.primary = _value.primary;
        this.groupedRooms = _value.groupedRooms
            ? new GroupedRooms(_value.groupedRooms)
            : undefined;
        this.singleBanner = _value.singleBanner
            ? new BannerCase(_value.singleBanner)
            : undefined;
        this.groupedBanners = _value.groupedBanners
            ? new GroupedBanners(_value.groupedBanners)
            : undefined;
        this.singleUrl = _value.singleUrl
            ? new UrlCase(_value.singleUrl)
            : undefined;
        this.groupedUrl = _value.groupedUrl
            ? new GroupedUrls(_value.groupedUrl)
            : undefined;
        Showcase.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Showcase();
        Showcase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isAdvertisement = _instance.isAdvertisement || false;
        _instance.primary = _instance.primary || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isAdvertisement = _reader.readBool();
                    break;
                case 2:
                    _instance.primary = _reader.readBool();
                    break;
                case 3:
                    _instance.groupedRooms = new GroupedRooms();
                    _reader.readMessage(_instance.groupedRooms, GroupedRooms.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.singleBanner = new BannerCase();
                    _reader.readMessage(_instance.singleBanner, BannerCase.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.groupedBanners = new GroupedBanners();
                    _reader.readMessage(_instance.groupedBanners, GroupedBanners.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.singleUrl = new UrlCase();
                    _reader.readMessage(_instance.singleUrl, UrlCase.deserializeBinaryFromReader);
                    break;
                case 7:
                    _instance.groupedUrl = new GroupedUrls();
                    _reader.readMessage(_instance.groupedUrl, GroupedUrls.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        Showcase.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isAdvertisement) {
            _writer.writeBool(1, _instance.isAdvertisement);
        }
        if (_instance.primary) {
            _writer.writeBool(2, _instance.primary);
        }
        if (_instance.groupedRooms) {
            _writer.writeMessage(3, _instance.groupedRooms, GroupedRooms.serializeBinaryToWriter);
        }
        if (_instance.singleBanner) {
            _writer.writeMessage(4, _instance.singleBanner, BannerCase.serializeBinaryToWriter);
        }
        if (_instance.groupedBanners) {
            _writer.writeMessage(5, _instance.groupedBanners, GroupedBanners.serializeBinaryToWriter);
        }
        if (_instance.singleUrl) {
            _writer.writeMessage(6, _instance.singleUrl, UrlCase.serializeBinaryToWriter);
        }
        if (_instance.groupedUrl) {
            _writer.writeMessage(7, _instance.groupedUrl, GroupedUrls.serializeBinaryToWriter);
        }
    }
    get isAdvertisement() {
        return this._isAdvertisement;
    }
    set isAdvertisement(value) {
        this._isAdvertisement = value;
    }
    get primary() {
        return this._primary;
    }
    set primary(value) {
        this._primary = value;
    }
    get groupedRooms() {
        return this._groupedRooms;
    }
    set groupedRooms(value) {
        if (value !== undefined && value !== null) {
            this._singleBanner = this._groupedBanners = this._singleUrl = this._groupedUrl = undefined;
            this._type = Showcase.TypeCase.groupedRooms;
        }
        this._groupedRooms = value;
    }
    get singleBanner() {
        return this._singleBanner;
    }
    set singleBanner(value) {
        if (value !== undefined && value !== null) {
            this._groupedRooms = this._groupedBanners = this._singleUrl = this._groupedUrl = undefined;
            this._type = Showcase.TypeCase.singleBanner;
        }
        this._singleBanner = value;
    }
    get groupedBanners() {
        return this._groupedBanners;
    }
    set groupedBanners(value) {
        if (value !== undefined && value !== null) {
            this._groupedRooms = this._singleBanner = this._singleUrl = this._groupedUrl = undefined;
            this._type = Showcase.TypeCase.groupedBanners;
        }
        this._groupedBanners = value;
    }
    get singleUrl() {
        return this._singleUrl;
    }
    set singleUrl(value) {
        if (value !== undefined && value !== null) {
            this._groupedRooms = this._singleBanner = this._groupedBanners = this._groupedUrl = undefined;
            this._type = Showcase.TypeCase.singleUrl;
        }
        this._singleUrl = value;
    }
    get groupedUrl() {
        return this._groupedUrl;
    }
    set groupedUrl(value) {
        if (value !== undefined && value !== null) {
            this._groupedRooms = this._singleBanner = this._groupedBanners = this._singleUrl = undefined;
            this._type = Showcase.TypeCase.groupedUrl;
        }
        this._groupedUrl = value;
    }
    get type() {
        return this._type;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Showcase.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isAdvertisement: this.isAdvertisement,
            primary: this.primary,
            groupedRooms: this.groupedRooms
                ? this.groupedRooms.toObject()
                : undefined,
            singleBanner: this.singleBanner
                ? this.singleBanner.toObject()
                : undefined,
            groupedBanners: this.groupedBanners
                ? this.groupedBanners.toObject()
                : undefined,
            singleUrl: this.singleUrl ? this.singleUrl.toObject() : undefined,
            groupedUrl: this.groupedUrl ? this.groupedUrl.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isAdvertisement: this.isAdvertisement,
            primary: this.primary,
            groupedRooms: this.groupedRooms
                ? this.groupedRooms.toProtobufJSON(options)
                : null,
            singleBanner: this.singleBanner
                ? this.singleBanner.toProtobufJSON(options)
                : null,
            groupedBanners: this.groupedBanners
                ? this.groupedBanners.toProtobufJSON(options)
                : null,
            singleUrl: this.singleUrl ? this.singleUrl.toProtobufJSON(options) : null,
            groupedUrl: this.groupedUrl
                ? this.groupedUrl.toProtobufJSON(options)
                : null
        };
    }
}
Showcase.id = 'proto.pub.v1.models.Showcase';
(function (Showcase) {
    let TypeCase;
    (function (TypeCase) {
        TypeCase[TypeCase["none"] = 0] = "none";
        TypeCase[TypeCase["groupedRooms"] = 1] = "groupedRooms";
        TypeCase[TypeCase["singleBanner"] = 2] = "singleBanner";
        TypeCase[TypeCase["groupedBanners"] = 3] = "groupedBanners";
        TypeCase[TypeCase["singleUrl"] = 4] = "singleUrl";
        TypeCase[TypeCase["groupedUrl"] = 5] = "groupedUrl";
    })(TypeCase = Showcase.TypeCase || (Showcase.TypeCase = {}));
})(Showcase || (Showcase = {}));
/**
 * Message implementation for proto.pub.v1.models.GroupedRooms
 */
class GroupedRooms {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GroupedRooms to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.roomsList = (_value.roomsList || []).map(m => new RoomCase(m));
        GroupedRooms.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GroupedRooms();
        GroupedRooms.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.roomsList = _instance.roomsList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new RoomCase();
                    _reader.readMessage(messageInitializer2, RoomCase.deserializeBinaryFromReader);
                    (_instance.roomsList = _instance.roomsList || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GroupedRooms.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.roomsList && _instance.roomsList.length) {
            _writer.writeRepeatedMessage(2, _instance.roomsList, RoomCase.serializeBinaryToWriter);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get roomsList() {
        return this._roomsList;
    }
    set roomsList(value) {
        this._roomsList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GroupedRooms.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            roomsList: (this.roomsList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            roomsList: (this.roomsList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GroupedRooms.id = 'proto.pub.v1.models.GroupedRooms';
/**
 * Message implementation for proto.pub.v1.models.GroupedBanners
 */
class GroupedBanners {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GroupedBanners to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.bannersList = (_value.bannersList || []).map(m => new BannerCase(m));
        GroupedBanners.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GroupedBanners();
        GroupedBanners.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.bannersList = _instance.bannersList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new BannerCase();
                    _reader.readMessage(messageInitializer2, BannerCase.deserializeBinaryFromReader);
                    (_instance.bannersList = _instance.bannersList || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GroupedBanners.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.bannersList && _instance.bannersList.length) {
            _writer.writeRepeatedMessage(2, _instance.bannersList, BannerCase.serializeBinaryToWriter);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get bannersList() {
        return this._bannersList;
    }
    set bannersList(value) {
        this._bannersList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GroupedBanners.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            bannersList: (this.bannersList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            bannersList: (this.bannersList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GroupedBanners.id = 'proto.pub.v1.models.GroupedBanners';
/**
 * Message implementation for proto.pub.v1.models.GroupedUrls
 */
class GroupedUrls {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GroupedUrls to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.urlsList = (_value.urlsList || []).map(m => new UrlCase(m));
        GroupedUrls.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GroupedUrls();
        GroupedUrls.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.urlsList = _instance.urlsList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new UrlCase();
                    _reader.readMessage(messageInitializer2, UrlCase.deserializeBinaryFromReader);
                    (_instance.urlsList = _instance.urlsList || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GroupedUrls.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.urlsList && _instance.urlsList.length) {
            _writer.writeRepeatedMessage(2, _instance.urlsList, UrlCase.serializeBinaryToWriter);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get urlsList() {
        return this._urlsList;
    }
    set urlsList(value) {
        this._urlsList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GroupedUrls.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            urlsList: (this.urlsList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name,
            urlsList: (this.urlsList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GroupedUrls.id = 'proto.pub.v1.models.GroupedUrls';
/**
 * Message implementation for proto.pub.v1.models.BannerCase
 */
class BannerCase {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BannerCase to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.bannerImg = _value.bannerImg
            ? new File(_value.bannerImg)
            : undefined;
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        BannerCase.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BannerCase();
        BannerCase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.bannerImg = _instance.bannerImg || undefined;
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.bannerImg = new File();
                    _reader.readMessage(_instance.bannerImg, File.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BannerCase.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.bannerImg) {
            _writer.writeMessage(1, _instance.bannerImg, File.serializeBinaryToWriter);
        }
        if (_instance.uid) {
            _writer.writeMessage(2, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get bannerImg() {
        return this._bannerImg;
    }
    set bannerImg(value) {
        this._bannerImg = value;
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BannerCase.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            bannerImg: this.bannerImg ? this.bannerImg.toObject() : undefined,
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            bannerImg: this.bannerImg ? this.bannerImg.toProtobufJSON(options) : null,
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
BannerCase.id = 'proto.pub.v1.models.BannerCase';
/**
 * Message implementation for proto.pub.v1.models.RoomCase
 */
class RoomCase {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RoomCase to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        RoomCase.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RoomCase();
        RoomCase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RoomCase.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RoomCase.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
RoomCase.id = 'proto.pub.v1.models.RoomCase';
/**
 * Message implementation for proto.pub.v1.models.UrlCase
 */
class UrlCase {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UrlCase to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name
            ? new File(_value.name)
            : undefined;
        this.description = _value.description
            ? new File(_value.description)
            : undefined;
        this.img = _value.img
            ? new File(_value.img)
            : undefined;
        this.url = _value.url;
        UrlCase.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UrlCase();
        UrlCase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || undefined;
        _instance.description = _instance.description || undefined;
        _instance.img = _instance.img || undefined;
        _instance.url = _instance.url || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = new File();
                    _reader.readMessage(_instance.name, File.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.description = new File();
                    _reader.readMessage(_instance.description, File.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.img = new File();
                    _reader.readMessage(_instance.img, File.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.url = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UrlCase.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeMessage(1, _instance.name, File.serializeBinaryToWriter);
        }
        if (_instance.description) {
            _writer.writeMessage(2, _instance.description, File.serializeBinaryToWriter);
        }
        if (_instance.img) {
            _writer.writeMessage(3, _instance.img, File.serializeBinaryToWriter);
        }
        if (_instance.url) {
            _writer.writeString(4, _instance.url);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get img() {
        return this._img;
    }
    set img(value) {
        this._img = value;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UrlCase.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name ? this.name.toObject() : undefined,
            description: this.description ? this.description.toObject() : undefined,
            img: this.img ? this.img.toObject() : undefined,
            url: this.url
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name ? this.name.toProtobufJSON(options) : null,
            description: this.description
                ? this.description.toProtobufJSON(options)
                : null,
            img: this.img ? this.img.toProtobufJSON(options) : null,
            url: this.url
        };
    }
}
UrlCase.id = 'proto.pub.v1.models.UrlCase';

/**
 * Message implementation for proto.pub.v1.query.IdIsAvailableReq
 */
class IdIsAvailableReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IdIsAvailableReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        IdIsAvailableReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IdIsAvailableReq();
        IdIsAvailableReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IdIsAvailableReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IdIsAvailableReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
IdIsAvailableReq.id = 'proto.pub.v1.query.IdIsAvailableReq';
/**
 * Message implementation for proto.pub.v1.query.IdIsAvailableRes
 */
class IdIsAvailableRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IdIsAvailableRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.isAvailable = _value.isAvailable;
        IdIsAvailableRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IdIsAvailableRes();
        IdIsAvailableRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.isAvailable = _instance.isAvailable || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.isAvailable = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IdIsAvailableRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.isAvailable) {
            _writer.writeBool(1, _instance.isAvailable);
        }
    }
    get isAvailable() {
        return this._isAvailable;
    }
    set isAvailable(value) {
        this._isAvailable = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IdIsAvailableRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            isAvailable: this.isAvailable
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            isAvailable: this.isAvailable
        };
    }
}
IdIsAvailableRes.id = 'proto.pub.v1.query.IdIsAvailableRes';
/**
 * Message implementation for proto.pub.v1.query.SetIdReq
 */
class SetIdReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SetIdReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        SetIdReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SetIdReq();
        SetIdReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SetIdReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SetIdReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
SetIdReq.id = 'proto.pub.v1.query.SetIdReq';
/**
 * Message implementation for proto.pub.v1.query.SetIdRes
 */
class SetIdRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SetIdRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SetIdRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SetIdRes();
        SetIdRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SetIdRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SetIdRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SetIdRes.id = 'proto.pub.v1.query.SetIdRes';
/**
 * Message implementation for proto.pub.v1.query.SubscribeOnGroupActivityReq
 */
class SubscribeOnGroupActivityReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SubscribeOnGroupActivityReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        SubscribeOnGroupActivityReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SubscribeOnGroupActivityReq();
        SubscribeOnGroupActivityReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SubscribeOnGroupActivityReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SubscribeOnGroupActivityReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
SubscribeOnGroupActivityReq.id = 'proto.pub.v1.query.SubscribeOnGroupActivityReq';
/**
 * Message implementation for proto.pub.v1.query.SubscribeOnGroupActivityRes
 */
class SubscribeOnGroupActivityRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SubscribeOnGroupActivityRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SubscribeOnGroupActivityRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SubscribeOnGroupActivityRes();
        SubscribeOnGroupActivityRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SubscribeOnGroupActivityRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SubscribeOnGroupActivityRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SubscribeOnGroupActivityRes.id = 'proto.pub.v1.query.SubscribeOnGroupActivityRes';
/**
 * Message implementation for proto.pub.v1.query.BlockUidReq
 */
class BlockUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BlockUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        BlockUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BlockUidReq();
        BlockUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BlockUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BlockUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
BlockUidReq.id = 'proto.pub.v1.query.BlockUidReq';
/**
 * Message implementation for proto.pub.v1.query.BlockUidRes
 */
class BlockUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BlockUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        BlockUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BlockUidRes();
        BlockUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        BlockUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BlockUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
BlockUidRes.id = 'proto.pub.v1.query.BlockUidRes';
/**
 * Message implementation for proto.pub.v1.query.GetBlockedListReq
 */
class GetBlockedListReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetBlockedListReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetBlockedListReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetBlockedListReq();
        GetBlockedListReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetBlockedListReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetBlockedListReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetBlockedListReq.id = 'proto.pub.v1.query.GetBlockedListReq';
/**
 * Message implementation for proto.pub.v1.query.GetBlockedListRes
 */
class GetBlockedListRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetBlockedListRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uidList = (_value.uidList || []).map(m => new Uid(m));
        GetBlockedListRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetBlockedListRes();
        GetBlockedListRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uidList = _instance.uidList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Uid();
                    _reader.readMessage(messageInitializer1, Uid.deserializeBinaryFromReader);
                    (_instance.uidList = _instance.uidList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetBlockedListRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uidList && _instance.uidList.length) {
            _writer.writeRepeatedMessage(1, _instance.uidList, Uid.serializeBinaryToWriter);
        }
    }
    get uidList() {
        return this._uidList;
    }
    set uidList(value) {
        this._uidList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetBlockedListRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uidList: (this.uidList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uidList: (this.uidList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
GetBlockedListRes.id = 'proto.pub.v1.query.GetBlockedListRes';
/**
 * Message implementation for proto.pub.v1.query.UnblockUidReq
 */
class UnblockUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnblockUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        UnblockUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnblockUidReq();
        UnblockUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UnblockUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnblockUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
UnblockUidReq.id = 'proto.pub.v1.query.UnblockUidReq';
/**
 * Message implementation for proto.pub.v1.query.UnblockUidRes
 */
class UnblockUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UnblockUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UnblockUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UnblockUidRes();
        UnblockUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UnblockUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UnblockUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UnblockUidRes.id = 'proto.pub.v1.query.UnblockUidRes';
/**
 * Message implementation for proto.pub.v1.query.ReportReq
 */
class ReportReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.type = _value.type;
        this.reason = _value.reason;
        ReportReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportReq();
        ReportReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.type = _instance.type || '';
        _instance.reason = _instance.reason || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.type = _reader.readString();
                    break;
                case 3:
                    _instance.reason = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ReportReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.type) {
            _writer.writeString(2, _instance.type);
        }
        if (_instance.reason) {
            _writer.writeString(3, _instance.reason);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get reason() {
        return this._reason;
    }
    set reason(value) {
        this._reason = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            type: this.type,
            reason: this.reason
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            type: this.type,
            reason: this.reason
        };
    }
}
ReportReq.id = 'proto.pub.v1.query.ReportReq';
/**
 * Message implementation for proto.pub.v1.query.ReportRes
 */
class ReportRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ReportRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ReportRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ReportRes();
        ReportRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ReportRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ReportRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ReportRes.id = 'proto.pub.v1.query.ReportRes';
/**
 * Message implementation for proto.pub.v1.query.GetIdByUidReq
 */
class GetIdByUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIdByUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        GetIdByUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIdByUidReq();
        GetIdByUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIdByUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIdByUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
GetIdByUidReq.id = 'proto.pub.v1.query.GetIdByUidReq';
/**
 * Message implementation for proto.pub.v1.query.GetIdByUidRes
 */
class GetIdByUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIdByUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.isVerified = _value.isVerified;
        GetIdByUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIdByUidRes();
        GetIdByUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
        _instance.isVerified = _instance.isVerified || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                case 2:
                    _instance.isVerified = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIdByUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
        if (_instance.isVerified) {
            _writer.writeBool(2, _instance.isVerified);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get isVerified() {
        return this._isVerified;
    }
    set isVerified(value) {
        this._isVerified = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIdByUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            isVerified: this.isVerified
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            isVerified: this.isVerified
        };
    }
}
GetIdByUidRes.id = 'proto.pub.v1.query.GetIdByUidRes';
/**
 * Message implementation for proto.pub.v1.query.GetUidByIdReq
 */
class GetUidByIdReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUidByIdReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        GetUidByIdReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUidByIdReq();
        GetUidByIdReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUidByIdReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUidByIdReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
GetUidByIdReq.id = 'proto.pub.v1.query.GetUidByIdReq';
/**
 * Message implementation for proto.pub.v1.query.GetUidByIdRes
 */
class GetUidByIdRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUidByIdRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        this.isVerified = _value.isVerified;
        GetUidByIdRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUidByIdRes();
        GetUidByIdRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
        _instance.isVerified = _instance.isVerified || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.isVerified = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUidByIdRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
        if (_instance.isVerified) {
            _writer.writeBool(2, _instance.isVerified);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    get isVerified() {
        return this._isVerified;
    }
    set isVerified(value) {
        this._isVerified = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUidByIdRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined,
            isVerified: this.isVerified
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null,
            isVerified: this.isVerified
        };
    }
}
GetUidByIdRes.id = 'proto.pub.v1.query.GetUidByIdRes';
/**
 * Message implementation for proto.pub.v1.query.GetLastActivityReq
 */
class GetLastActivityReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLastActivityReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uid = _value.uid ? new Uid(_value.uid) : undefined;
        GetLastActivityReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLastActivityReq();
        GetLastActivityReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uid = _instance.uid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uid = new Uid();
                    _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLastActivityReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uid) {
            _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
        }
    }
    get uid() {
        return this._uid;
    }
    set uid(value) {
        this._uid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLastActivityReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uid: this.uid ? this.uid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uid: this.uid ? this.uid.toProtobufJSON(options) : null
        };
    }
}
GetLastActivityReq.id = 'proto.pub.v1.query.GetLastActivityReq';
/**
 * Message implementation for proto.pub.v1.query.GetLastActivityRes
 */
class GetLastActivityRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetLastActivityRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.lastActivityTime = _value.lastActivityTime;
        GetLastActivityRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetLastActivityRes();
        GetLastActivityRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.lastActivityTime = _instance.lastActivityTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.lastActivityTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetLastActivityRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.lastActivityTime) {
            _writer.writeInt64String(1, _instance.lastActivityTime);
        }
    }
    get lastActivityTime() {
        return this._lastActivityTime;
    }
    set lastActivityTime(value) {
        this._lastActivityTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetLastActivityRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            lastActivityTime: this.lastActivityTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            lastActivityTime: this.lastActivityTime
        };
    }
}
GetLastActivityRes.id = 'proto.pub.v1.query.GetLastActivityRes';
/**
 * Message implementation for proto.pub.v1.query.SearchUidReq
 */
class SearchUidReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchUidReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.text = _value.text;
        this.filterByCategory = _value.filterByCategory;
        this.category = _value.category;
        this.justSearchInId = _value.justSearchInId;
        this.justSearchInName = _value.justSearchInName;
        SearchUidReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchUidReq();
        SearchUidReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.text = _instance.text || '';
        _instance.filterByCategory = _instance.filterByCategory || false;
        _instance.category = _instance.category || 0;
        _instance.justSearchInId = _instance.justSearchInId || false;
        _instance.justSearchInName = _instance.justSearchInName || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.text = _reader.readString();
                    break;
                case 2:
                    _instance.filterByCategory = _reader.readBool();
                    break;
                case 3:
                    _instance.category = _reader.readEnum();
                    break;
                case 4:
                    _instance.justSearchInId = _reader.readBool();
                    break;
                case 5:
                    _instance.justSearchInName = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchUidReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.text) {
            _writer.writeString(1, _instance.text);
        }
        if (_instance.filterByCategory) {
            _writer.writeBool(2, _instance.filterByCategory);
        }
        if (_instance.category) {
            _writer.writeEnum(3, _instance.category);
        }
        if (_instance.justSearchInId) {
            _writer.writeBool(4, _instance.justSearchInId);
        }
        if (_instance.justSearchInName) {
            _writer.writeBool(5, _instance.justSearchInName);
        }
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    get category() {
        return this._category;
    }
    set category(value) {
        this._category = value;
    }
    get justSearchInId() {
        return this._justSearchInId;
    }
    set justSearchInId(value) {
        this._justSearchInId = value;
    }
    get justSearchInName() {
        return this._justSearchInName;
    }
    set justSearchInName(value) {
        this._justSearchInName = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchUidReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            text: this.text,
            filterByCategory: this.filterByCategory,
            category: this.category,
            justSearchInId: this.justSearchInId,
            justSearchInName: this.justSearchInName
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            text: this.text,
            filterByCategory: this.filterByCategory,
            category: Categories[this.category === null || this.category === undefined
                ? 0
                : this.category],
            justSearchInId: this.justSearchInId,
            justSearchInName: this.justSearchInName
        };
    }
}
SearchUidReq.id = 'proto.pub.v1.query.SearchUidReq';
/**
 * Message implementation for proto.pub.v1.query.SearchUidRes
 */
class SearchUidRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchUidRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.itemList = (_value.itemList || []).map(m => new SearchUidRes.SearchUidItem(m));
        SearchUidRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchUidRes();
        SearchUidRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.itemList = _instance.itemList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new SearchUidRes.SearchUidItem();
                    _reader.readMessage(messageInitializer1, SearchUidRes.SearchUidItem.deserializeBinaryFromReader);
                    (_instance.itemList = _instance.itemList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchUidRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.itemList && _instance.itemList.length) {
            _writer.writeRepeatedMessage(1, _instance.itemList, SearchUidRes.SearchUidItem.serializeBinaryToWriter);
        }
    }
    get itemList() {
        return this._itemList;
    }
    set itemList(value) {
        this._itemList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchUidRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            itemList: (this.itemList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            itemList: (this.itemList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SearchUidRes.id = 'proto.pub.v1.query.SearchUidRes';
(function (SearchUidRes) {
    /**
     * Message implementation for proto.pub.v1.query.SearchUidItem
     */
    class SearchUidItem {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of SearchUidItem to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.uid = _value.uid
                ? new Uid(_value.uid)
                : undefined;
            this.id = _value.id;
            this.name = _value.name;
            SearchUidItem.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new SearchUidItem();
            SearchUidItem.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.uid = _instance.uid || undefined;
            _instance.id = _instance.id || '';
            _instance.name = _instance.name || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.uid = new Uid();
                        _reader.readMessage(_instance.uid, Uid.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.id = _reader.readString();
                        break;
                    case 3:
                        _instance.name = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            SearchUidItem.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.uid) {
                _writer.writeMessage(1, _instance.uid, Uid.serializeBinaryToWriter);
            }
            if (_instance.id) {
                _writer.writeString(2, _instance.id);
            }
            if (_instance.name) {
                _writer.writeString(3, _instance.name);
            }
        }
        get uid() {
            return this._uid;
        }
        set uid(value) {
            this._uid = value;
        }
        get id() {
            return this._id;
        }
        set id(value) {
            this._id = value;
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            SearchUidItem.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                uid: this.uid ? this.uid.toObject() : undefined,
                id: this.id,
                name: this.name
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                uid: this.uid ? this.uid.toProtobufJSON(options) : null,
                id: this.id,
                name: this.name
            };
        }
    }
    SearchUidItem.id = 'proto.pub.v1.query.SearchUidItem';
    SearchUidRes.SearchUidItem = SearchUidItem;
})(SearchUidRes || (SearchUidRes = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMessagesReq
 */
class FetchMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.type = _value.type;
        this.justNotHiddenMessages = _value.justNotHiddenMessages;
        this.justHiddenMessages = _value.justHiddenMessages;
        this.limit = _value.limit;
        FetchMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMessagesReq();
        FetchMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.type = _instance.type || 0;
        _instance.justNotHiddenMessages = _instance.justNotHiddenMessages || false;
        _instance.justHiddenMessages = _instance.justHiddenMessages || false;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.type = _reader.readEnum();
                    break;
                case 5:
                    _instance.justNotHiddenMessages = _reader.readBool();
                    break;
                case 6:
                    _instance.justHiddenMessages = _reader.readBool();
                    break;
                case 4:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.type) {
            _writer.writeEnum(3, _instance.type);
        }
        if (_instance.justNotHiddenMessages) {
            _writer.writeBool(5, _instance.justNotHiddenMessages);
        }
        if (_instance.justHiddenMessages) {
            _writer.writeBool(6, _instance.justHiddenMessages);
        }
        if (_instance.limit) {
            _writer.writeInt32(4, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value;
    }
    get justNotHiddenMessages() {
        return this._justNotHiddenMessages;
    }
    set justNotHiddenMessages(value) {
        this._justNotHiddenMessages = value;
    }
    get justHiddenMessages() {
        return this._justHiddenMessages;
    }
    set justHiddenMessages(value) {
        this._justHiddenMessages = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            type: this.type,
            justNotHiddenMessages: this.justNotHiddenMessages,
            justHiddenMessages: this.justHiddenMessages,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            type: FetchMessagesReq.Type[this.type === null || this.type === undefined ? 0 : this.type],
            justNotHiddenMessages: this.justNotHiddenMessages,
            justHiddenMessages: this.justHiddenMessages,
            limit: this.limit
        };
    }
}
FetchMessagesReq.id = 'proto.pub.v1.query.FetchMessagesReq';
(function (FetchMessagesReq) {
    let Type;
    (function (Type) {
        Type[Type["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        Type[Type["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(Type = FetchMessagesReq.Type || (FetchMessagesReq.Type = {}));
})(FetchMessagesReq || (FetchMessagesReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMessagesRes
 */
class FetchMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messages = (_value.messages || []).map(m => new Message(m));
        FetchMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMessagesRes();
        FetchMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messages = _instance.messages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Message();
                    _reader.readMessage(messageInitializer1, Message.deserializeBinaryFromReader);
                    (_instance.messages = _instance.messages || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messages && _instance.messages.length) {
            _writer.writeRepeatedMessage(1, _instance.messages, Message.serializeBinaryToWriter);
        }
    }
    get messages() {
        return this._messages;
    }
    set messages(value) {
        this._messages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messages: (this.messages || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messages: (this.messages || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchMessagesRes.id = 'proto.pub.v1.query.FetchMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.CountIsHiddenMessagesReq
 */
class CountIsHiddenMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CountIsHiddenMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.messageId = _value.messageId;
        CountIsHiddenMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CountIsHiddenMessagesReq();
        CountIsHiddenMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.messageId = _instance.messageId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.messageId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CountIsHiddenMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageId) {
            _writer.writeInt64String(2, _instance.messageId);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CountIsHiddenMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            messageId: this.messageId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            messageId: this.messageId
        };
    }
}
CountIsHiddenMessagesReq.id = 'proto.pub.v1.query.CountIsHiddenMessagesReq';
/**
 * Message implementation for proto.pub.v1.query.CountIsHiddenMessagesRes
 */
class CountIsHiddenMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CountIsHiddenMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.count = _value.count;
        CountIsHiddenMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CountIsHiddenMessagesRes();
        CountIsHiddenMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.count = _instance.count || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.count = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CountIsHiddenMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.count) {
            _writer.writeInt32(1, _instance.count);
        }
    }
    get count() {
        return this._count;
    }
    set count(value) {
        this._count = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CountIsHiddenMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            count: this.count
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            count: this.count
        };
    }
}
CountIsHiddenMessagesRes.id = 'proto.pub.v1.query.CountIsHiddenMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.GetAllUserRoomMetaReq
 */
class GetAllUserRoomMetaReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAllUserRoomMetaReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        this.after = _value.after;
        GetAllUserRoomMetaReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAllUserRoomMetaReq();
        GetAllUserRoomMetaReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pointer = _instance.pointer || 0;
        _instance.limit = _instance.limit || 0;
        _instance.after = _instance.after || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pointer = _reader.readInt32();
                    break;
                case 2:
                    _instance.limit = _reader.readInt32();
                    break;
                case 3:
                    _instance.after = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAllUserRoomMetaReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pointer) {
            _writer.writeInt32(1, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(2, _instance.limit);
        }
        if (_instance.after) {
            _writer.writeInt64String(3, _instance.after);
        }
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get after() {
        return this._after;
    }
    set after(value) {
        this._after = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAllUserRoomMetaReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pointer: this.pointer,
            limit: this.limit,
            after: this.after
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pointer: this.pointer,
            limit: this.limit,
            after: this.after
        };
    }
}
GetAllUserRoomMetaReq.id = 'proto.pub.v1.query.GetAllUserRoomMetaReq';
/**
 * Message implementation for proto.pub.v1.query.GetAllUserRoomMetaRes
 */
class GetAllUserRoomMetaRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetAllUserRoomMetaRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomsMeta = (_value.roomsMeta || []).map(m => new RoomMetadata(m));
        this.finished = _value.finished;
        GetAllUserRoomMetaRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetAllUserRoomMetaRes();
        GetAllUserRoomMetaRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomsMeta = _instance.roomsMeta || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new RoomMetadata();
                    _reader.readMessage(messageInitializer1, RoomMetadata.deserializeBinaryFromReader);
                    (_instance.roomsMeta = _instance.roomsMeta || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetAllUserRoomMetaRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomsMeta && _instance.roomsMeta.length) {
            _writer.writeRepeatedMessage(1, _instance.roomsMeta, RoomMetadata.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get roomsMeta() {
        return this._roomsMeta;
    }
    set roomsMeta(value) {
        this._roomsMeta = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetAllUserRoomMetaRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomsMeta: (this.roomsMeta || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomsMeta: (this.roomsMeta || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
GetAllUserRoomMetaRes.id = 'proto.pub.v1.query.GetAllUserRoomMetaRes';
/**
 * Message implementation for proto.pub.v1.query.GetUserRoomMetaReq
 */
class GetUserRoomMetaReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserRoomMetaReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        GetUserRoomMetaReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserRoomMetaReq();
        GetUserRoomMetaReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserRoomMetaReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserRoomMetaReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
GetUserRoomMetaReq.id = 'proto.pub.v1.query.GetUserRoomMetaReq';
/**
 * Message implementation for proto.pub.v1.query.GetUserRoomMetaRes
 */
class GetUserRoomMetaRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetUserRoomMetaRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomMeta = _value.roomMeta
            ? new RoomMetadata(_value.roomMeta)
            : undefined;
        GetUserRoomMetaRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetUserRoomMetaRes();
        GetUserRoomMetaRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomMeta = _instance.roomMeta || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomMeta = new RoomMetadata();
                    _reader.readMessage(_instance.roomMeta, RoomMetadata.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetUserRoomMetaRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomMeta) {
            _writer.writeMessage(1, _instance.roomMeta, RoomMetadata.serializeBinaryToWriter);
        }
    }
    get roomMeta() {
        return this._roomMeta;
    }
    set roomMeta(value) {
        this._roomMeta = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetUserRoomMetaRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomMeta: this.roomMeta ? this.roomMeta.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomMeta: this.roomMeta ? this.roomMeta.toProtobufJSON(options) : null
        };
    }
}
GetUserRoomMetaRes.id = 'proto.pub.v1.query.GetUserRoomMetaRes';
/**
 * Message implementation for proto.pub.v1.query.GetMediaMetadataReq
 */
class GetMediaMetadataReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMediaMetadataReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.with = _value.with
            ? new Uid(_value.with)
            : undefined;
        GetMediaMetadataReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMediaMetadataReq();
        GetMediaMetadataReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.with = _instance.with || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.with = new Uid();
                    _reader.readMessage(_instance.with, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMediaMetadataReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.with) {
            _writer.writeMessage(1, _instance.with, Uid.serializeBinaryToWriter);
        }
    }
    get with() {
        return this._with;
    }
    set with(value) {
        this._with = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMediaMetadataReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            with: this.with ? this.with.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            with: this.with ? this.with.toProtobufJSON(options) : null
        };
    }
}
GetMediaMetadataReq.id = 'proto.pub.v1.query.GetMediaMetadataReq';
/**
 * Message implementation for proto.pub.v1.query.GetMediaMetadataRes
 */
class GetMediaMetadataRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMediaMetadataRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.allImagesCount = _value.allImagesCount;
        this.allVideosCount = _value.allVideosCount;
        this.allFilesCount = _value.allFilesCount;
        this.allAudiosCount = _value.allAudiosCount;
        this.allMusicsCount = _value.allMusicsCount;
        this.allDocumentsCount = _value.allDocumentsCount;
        this.allLinksCount = _value.allLinksCount;
        GetMediaMetadataRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMediaMetadataRes();
        GetMediaMetadataRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.allImagesCount = _instance.allImagesCount || '0';
        _instance.allVideosCount = _instance.allVideosCount || '0';
        _instance.allFilesCount = _instance.allFilesCount || '0';
        _instance.allAudiosCount = _instance.allAudiosCount || '0';
        _instance.allMusicsCount = _instance.allMusicsCount || '0';
        _instance.allDocumentsCount = _instance.allDocumentsCount || '0';
        _instance.allLinksCount = _instance.allLinksCount || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.allImagesCount = _reader.readInt64String();
                    break;
                case 2:
                    _instance.allVideosCount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.allFilesCount = _reader.readInt64String();
                    break;
                case 4:
                    _instance.allAudiosCount = _reader.readInt64String();
                    break;
                case 5:
                    _instance.allMusicsCount = _reader.readInt64String();
                    break;
                case 6:
                    _instance.allDocumentsCount = _reader.readInt64String();
                    break;
                case 7:
                    _instance.allLinksCount = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMediaMetadataRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.allImagesCount) {
            _writer.writeInt64String(1, _instance.allImagesCount);
        }
        if (_instance.allVideosCount) {
            _writer.writeInt64String(2, _instance.allVideosCount);
        }
        if (_instance.allFilesCount) {
            _writer.writeInt64String(3, _instance.allFilesCount);
        }
        if (_instance.allAudiosCount) {
            _writer.writeInt64String(4, _instance.allAudiosCount);
        }
        if (_instance.allMusicsCount) {
            _writer.writeInt64String(5, _instance.allMusicsCount);
        }
        if (_instance.allDocumentsCount) {
            _writer.writeInt64String(6, _instance.allDocumentsCount);
        }
        if (_instance.allLinksCount) {
            _writer.writeInt64String(7, _instance.allLinksCount);
        }
    }
    get allImagesCount() {
        return this._allImagesCount;
    }
    set allImagesCount(value) {
        this._allImagesCount = value;
    }
    get allVideosCount() {
        return this._allVideosCount;
    }
    set allVideosCount(value) {
        this._allVideosCount = value;
    }
    get allFilesCount() {
        return this._allFilesCount;
    }
    set allFilesCount(value) {
        this._allFilesCount = value;
    }
    get allAudiosCount() {
        return this._allAudiosCount;
    }
    set allAudiosCount(value) {
        this._allAudiosCount = value;
    }
    get allMusicsCount() {
        return this._allMusicsCount;
    }
    set allMusicsCount(value) {
        this._allMusicsCount = value;
    }
    get allDocumentsCount() {
        return this._allDocumentsCount;
    }
    set allDocumentsCount(value) {
        this._allDocumentsCount = value;
    }
    get allLinksCount() {
        return this._allLinksCount;
    }
    set allLinksCount(value) {
        this._allLinksCount = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMediaMetadataRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            allImagesCount: this.allImagesCount,
            allVideosCount: this.allVideosCount,
            allFilesCount: this.allFilesCount,
            allAudiosCount: this.allAudiosCount,
            allMusicsCount: this.allMusicsCount,
            allDocumentsCount: this.allDocumentsCount,
            allLinksCount: this.allLinksCount
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            allImagesCount: this.allImagesCount,
            allVideosCount: this.allVideosCount,
            allFilesCount: this.allFilesCount,
            allAudiosCount: this.allAudiosCount,
            allMusicsCount: this.allMusicsCount,
            allDocumentsCount: this.allDocumentsCount,
            allLinksCount: this.allLinksCount
        };
    }
}
GetMediaMetadataRes.id = 'proto.pub.v1.query.GetMediaMetadataRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMediasReq
 */
class FetchMediasReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMediasReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.year = _value.year;
        this.mediaType = _value.mediaType;
        this.fetchingDirectionType = _value.fetchingDirectionType;
        this.limit = _value.limit;
        FetchMediasReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMediasReq();
        FetchMediasReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.year = _instance.year || 0;
        _instance.mediaType = _instance.mediaType || 0;
        _instance.fetchingDirectionType = _instance.fetchingDirectionType || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.year = _reader.readInt32();
                    break;
                case 4:
                    _instance.mediaType = _reader.readEnum();
                    break;
                case 5:
                    _instance.fetchingDirectionType = _reader.readEnum();
                    break;
                case 6:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMediasReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.year) {
            _writer.writeInt32(3, _instance.year);
        }
        if (_instance.mediaType) {
            _writer.writeEnum(4, _instance.mediaType);
        }
        if (_instance.fetchingDirectionType) {
            _writer.writeEnum(5, _instance.fetchingDirectionType);
        }
        if (_instance.limit) {
            _writer.writeInt32(6, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get year() {
        return this._year;
    }
    set year(value) {
        this._year = value;
    }
    get mediaType() {
        return this._mediaType;
    }
    set mediaType(value) {
        this._mediaType = value;
    }
    get fetchingDirectionType() {
        return this._fetchingDirectionType;
    }
    set fetchingDirectionType(value) {
        this._fetchingDirectionType = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMediasReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            year: this.year,
            mediaType: this.mediaType,
            fetchingDirectionType: this.fetchingDirectionType,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            year: this.year,
            mediaType: FetchMediasReq.MediaType[this.mediaType === null || this.mediaType === undefined
                ? 0
                : this.mediaType],
            fetchingDirectionType: FetchMediasReq.FetchingDirectionType[this.fetchingDirectionType === null ||
                this.fetchingDirectionType === undefined
                ? 0
                : this.fetchingDirectionType],
            limit: this.limit
        };
    }
}
FetchMediasReq.id = 'proto.pub.v1.query.FetchMediasReq';
(function (FetchMediasReq) {
    let MediaType;
    (function (MediaType) {
        MediaType[MediaType["IMAGES"] = 0] = "IMAGES";
        MediaType[MediaType["VIDEOS"] = 1] = "VIDEOS";
        MediaType[MediaType["FILES"] = 2] = "FILES";
        MediaType[MediaType["AUDIOS"] = 3] = "AUDIOS";
        MediaType[MediaType["MUSICS"] = 4] = "MUSICS";
        MediaType[MediaType["DOCUMENTS"] = 5] = "DOCUMENTS";
        MediaType[MediaType["LINKS"] = 6] = "LINKS";
    })(MediaType = FetchMediasReq.MediaType || (FetchMediasReq.MediaType = {}));
    let FetchingDirectionType;
    (function (FetchingDirectionType) {
        FetchingDirectionType[FetchingDirectionType["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        FetchingDirectionType[FetchingDirectionType["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(FetchingDirectionType = FetchMediasReq.FetchingDirectionType || (FetchMediasReq.FetchingDirectionType = {}));
})(FetchMediasReq || (FetchMediasReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMediasRes
 */
class FetchMediasRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMediasRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.medias = (_value.medias || []).map(m => new Media(m));
        FetchMediasRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMediasRes();
        FetchMediasRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.medias = _instance.medias || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Media();
                    _reader.readMessage(messageInitializer1, Media.deserializeBinaryFromReader);
                    (_instance.medias = _instance.medias || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMediasRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.medias && _instance.medias.length) {
            _writer.writeRepeatedMessage(1, _instance.medias, Media.serializeBinaryToWriter);
        }
    }
    get medias() {
        return this._medias;
    }
    set medias(value) {
        this._medias = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMediasRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            medias: (this.medias || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            medias: (this.medias || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchMediasRes.id = 'proto.pub.v1.query.FetchMediasRes';
/**
 * Message implementation for proto.pub.v1.query.GetMetaCountsReq
 */
class GetMetaCountsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMetaCountsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        GetMetaCountsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMetaCountsReq();
        GetMetaCountsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMetaCountsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMetaCountsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
GetMetaCountsReq.id = 'proto.pub.v1.query.GetMetaCountsReq';
/**
 * Message implementation for proto.pub.v1.query.GetMetaCountsRes
 */
class GetMetaCountsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetMetaCountsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.allMediaCount = _value.allMediaCount;
        this.allFilesCount = _value.allFilesCount;
        this.allMusicsCount = _value.allMusicsCount;
        this.allVoicesCount = _value.allVoicesCount;
        this.allLinksCount = _value.allLinksCount;
        this.allCallCount = _value.allCallCount;
        GetMetaCountsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetMetaCountsRes();
        GetMetaCountsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.allMediaCount = _instance.allMediaCount || '0';
        _instance.allFilesCount = _instance.allFilesCount || '0';
        _instance.allMusicsCount = _instance.allMusicsCount || '0';
        _instance.allVoicesCount = _instance.allVoicesCount || '0';
        _instance.allLinksCount = _instance.allLinksCount || '0';
        _instance.allCallCount = _instance.allCallCount || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.allMediaCount = _reader.readInt64String();
                    break;
                case 2:
                    _instance.allFilesCount = _reader.readInt64String();
                    break;
                case 3:
                    _instance.allMusicsCount = _reader.readInt64String();
                    break;
                case 4:
                    _instance.allVoicesCount = _reader.readInt64String();
                    break;
                case 5:
                    _instance.allLinksCount = _reader.readInt64String();
                    break;
                case 6:
                    _instance.allCallCount = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetMetaCountsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.allMediaCount) {
            _writer.writeInt64String(1, _instance.allMediaCount);
        }
        if (_instance.allFilesCount) {
            _writer.writeInt64String(2, _instance.allFilesCount);
        }
        if (_instance.allMusicsCount) {
            _writer.writeInt64String(3, _instance.allMusicsCount);
        }
        if (_instance.allVoicesCount) {
            _writer.writeInt64String(4, _instance.allVoicesCount);
        }
        if (_instance.allLinksCount) {
            _writer.writeInt64String(5, _instance.allLinksCount);
        }
        if (_instance.allCallCount) {
            _writer.writeInt64String(6, _instance.allCallCount);
        }
    }
    get allMediaCount() {
        return this._allMediaCount;
    }
    set allMediaCount(value) {
        this._allMediaCount = value;
    }
    get allFilesCount() {
        return this._allFilesCount;
    }
    set allFilesCount(value) {
        this._allFilesCount = value;
    }
    get allMusicsCount() {
        return this._allMusicsCount;
    }
    set allMusicsCount(value) {
        this._allMusicsCount = value;
    }
    get allVoicesCount() {
        return this._allVoicesCount;
    }
    set allVoicesCount(value) {
        this._allVoicesCount = value;
    }
    get allLinksCount() {
        return this._allLinksCount;
    }
    set allLinksCount(value) {
        this._allLinksCount = value;
    }
    get allCallCount() {
        return this._allCallCount;
    }
    set allCallCount(value) {
        this._allCallCount = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetMetaCountsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            allMediaCount: this.allMediaCount,
            allFilesCount: this.allFilesCount,
            allMusicsCount: this.allMusicsCount,
            allVoicesCount: this.allVoicesCount,
            allLinksCount: this.allLinksCount,
            allCallCount: this.allCallCount
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            allMediaCount: this.allMediaCount,
            allFilesCount: this.allFilesCount,
            allMusicsCount: this.allMusicsCount,
            allVoicesCount: this.allVoicesCount,
            allLinksCount: this.allLinksCount,
            allCallCount: this.allCallCount
        };
    }
}
GetMetaCountsRes.id = 'proto.pub.v1.query.GetMetaCountsRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMetaReq
 */
class FetchMetaReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMetaReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.year = _value.year;
        this.group = _value.group;
        this.fetchingDirectionType = _value.fetchingDirectionType;
        this.limit = _value.limit;
        FetchMetaReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMetaReq();
        FetchMetaReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.year = _instance.year || 0;
        _instance.group = _instance.group || 0;
        _instance.fetchingDirectionType = _instance.fetchingDirectionType || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.year = _reader.readInt32();
                    break;
                case 4:
                    _instance.group = _reader.readEnum();
                    break;
                case 5:
                    _instance.fetchingDirectionType = _reader.readEnum();
                    break;
                case 6:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMetaReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.year) {
            _writer.writeInt32(3, _instance.year);
        }
        if (_instance.group) {
            _writer.writeEnum(4, _instance.group);
        }
        if (_instance.fetchingDirectionType) {
            _writer.writeEnum(5, _instance.fetchingDirectionType);
        }
        if (_instance.limit) {
            _writer.writeInt32(6, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get year() {
        return this._year;
    }
    set year(value) {
        this._year = value;
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get fetchingDirectionType() {
        return this._fetchingDirectionType;
    }
    set fetchingDirectionType(value) {
        this._fetchingDirectionType = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMetaReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            year: this.year,
            group: this.group,
            fetchingDirectionType: this.fetchingDirectionType,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            year: this.year,
            group: FetchMetaReq.Group[this.group === null || this.group === undefined ? 0 : this.group],
            fetchingDirectionType: FetchMetaReq.Direction[this.fetchingDirectionType === null ||
                this.fetchingDirectionType === undefined
                ? 0
                : this.fetchingDirectionType],
            limit: this.limit
        };
    }
}
FetchMetaReq.id = 'proto.pub.v1.query.FetchMetaReq';
(function (FetchMetaReq) {
    let Group;
    (function (Group) {
        Group[Group["MEDIA"] = 0] = "MEDIA";
        Group[Group["MUSICS"] = 1] = "MUSICS";
        Group[Group["VOICES"] = 2] = "VOICES";
        Group[Group["FILES"] = 3] = "FILES";
        Group[Group["LINKS"] = 4] = "LINKS";
        Group[Group["CALLS"] = 5] = "CALLS";
    })(Group = FetchMetaReq.Group || (FetchMetaReq.Group = {}));
    let Direction;
    (function (Direction) {
        Direction[Direction["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        Direction[Direction["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(Direction = FetchMetaReq.Direction || (FetchMetaReq.Direction = {}));
})(FetchMetaReq || (FetchMetaReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchMetaRes
 */
class FetchMetaRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMetaRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.metaList = (_value.metaList || []).map(m => new Meta(m));
        FetchMetaRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMetaRes();
        FetchMetaRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.metaList = _instance.metaList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Meta();
                    _reader.readMessage(messageInitializer1, Meta.deserializeBinaryFromReader);
                    (_instance.metaList = _instance.metaList || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMetaRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.metaList && _instance.metaList.length) {
            _writer.writeRepeatedMessage(1, _instance.metaList, Meta.serializeBinaryToWriter);
        }
    }
    get metaList() {
        return this._metaList;
    }
    set metaList(value) {
        this._metaList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMetaRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            metaList: (this.metaList || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            metaList: (this.metaList || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchMetaRes.id = 'proto.pub.v1.query.FetchMetaRes';
/**
 * Message implementation for proto.pub.v1.query.FetchMentionListReq
 */
class FetchMentionListReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMentionListReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.group = _value.group
            ? new Uid(_value.group)
            : undefined;
        this.afterId = _value.afterId;
        FetchMentionListReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMentionListReq();
        FetchMentionListReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.group = _instance.group || undefined;
        _instance.afterId = _instance.afterId || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.group = new Uid();
                    _reader.readMessage(_instance.group, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.afterId = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMentionListReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.group) {
            _writer.writeMessage(1, _instance.group, Uid.serializeBinaryToWriter);
        }
        if (_instance.afterId) {
            _writer.writeInt64String(2, _instance.afterId);
        }
    }
    get group() {
        return this._group;
    }
    set group(value) {
        this._group = value;
    }
    get afterId() {
        return this._afterId;
    }
    set afterId(value) {
        this._afterId = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMentionListReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            group: this.group ? this.group.toObject() : undefined,
            afterId: this.afterId
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            group: this.group ? this.group.toProtobufJSON(options) : null,
            afterId: this.afterId
        };
    }
}
FetchMentionListReq.id = 'proto.pub.v1.query.FetchMentionListReq';
/**
 * Message implementation for proto.pub.v1.query.FetchMentionListRes
 */
class FetchMentionListRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchMentionListRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.idList = (_value.idList || []).slice();
        FetchMentionListRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchMentionListRes();
        FetchMentionListRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.idList = _instance.idList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.idList = _instance.idList || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchMentionListRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.idList && _instance.idList.length) {
            _writer.writePackedInt64String(1, _instance.idList);
        }
    }
    get idList() {
        return this._idList;
    }
    set idList(value) {
        this._idList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchMentionListRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            idList: (this.idList || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            idList: (this.idList || []).slice()
        };
    }
}
FetchMentionListRes.id = 'proto.pub.v1.query.FetchMentionListRes';
/**
 * Message implementation for proto.pub.v1.query.FetchCurrentUserSeenDataReq
 */
class FetchCurrentUserSeenDataReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchCurrentUserSeenDataReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        FetchCurrentUserSeenDataReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchCurrentUserSeenDataReq();
        FetchCurrentUserSeenDataReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchCurrentUserSeenDataReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchCurrentUserSeenDataReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
FetchCurrentUserSeenDataReq.id = 'proto.pub.v1.query.FetchCurrentUserSeenDataReq';
/**
 * Message implementation for proto.pub.v1.query.FetchCurrentUserSeenDataRes
 */
class FetchCurrentUserSeenDataRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchCurrentUserSeenDataRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.seen = _value.seen
            ? new Seen(_value.seen)
            : undefined;
        FetchCurrentUserSeenDataRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchCurrentUserSeenDataRes();
        FetchCurrentUserSeenDataRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.seen = _instance.seen || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.seen = new Seen();
                    _reader.readMessage(_instance.seen, Seen.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchCurrentUserSeenDataRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.seen) {
            _writer.writeMessage(1, _instance.seen, Seen.serializeBinaryToWriter);
        }
    }
    get seen() {
        return this._seen;
    }
    set seen(value) {
        this._seen = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchCurrentUserSeenDataRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            seen: this.seen ? this.seen.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            seen: this.seen ? this.seen.toProtobufJSON(options) : null
        };
    }
}
FetchCurrentUserSeenDataRes.id = 'proto.pub.v1.query.FetchCurrentUserSeenDataRes';
/**
 * Message implementation for proto.pub.v1.query.FetchLastOtherUserSeenDataReq
 */
class FetchLastOtherUserSeenDataReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchLastOtherUserSeenDataReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        FetchLastOtherUserSeenDataReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchLastOtherUserSeenDataReq();
        FetchLastOtherUserSeenDataReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchLastOtherUserSeenDataReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchLastOtherUserSeenDataReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
FetchLastOtherUserSeenDataReq.id = 'proto.pub.v1.query.FetchLastOtherUserSeenDataReq';
/**
 * Message implementation for proto.pub.v1.query.FetchLastOtherUserSeenDataRes
 */
class FetchLastOtherUserSeenDataRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchLastOtherUserSeenDataRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.seen = _value.seen
            ? new Seen(_value.seen)
            : undefined;
        FetchLastOtherUserSeenDataRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchLastOtherUserSeenDataRes();
        FetchLastOtherUserSeenDataRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.seen = _instance.seen || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.seen = new Seen();
                    _reader.readMessage(_instance.seen, Seen.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchLastOtherUserSeenDataRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.seen) {
            _writer.writeMessage(1, _instance.seen, Seen.serializeBinaryToWriter);
        }
    }
    get seen() {
        return this._seen;
    }
    set seen(value) {
        this._seen = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchLastOtherUserSeenDataRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            seen: this.seen ? this.seen.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            seen: this.seen ? this.seen.toProtobufJSON(options) : null
        };
    }
}
FetchLastOtherUserSeenDataRes.id = 'proto.pub.v1.query.FetchLastOtherUserSeenDataRes';
/**
 * Message implementation for proto.pub.v1.query.FetchSeenCountOfChannelMessageReq
 */
class FetchSeenCountOfChannelMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchSeenCountOfChannelMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        FetchSeenCountOfChannelMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchSeenCountOfChannelMessageReq();
        FetchSeenCountOfChannelMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchSeenCountOfChannelMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt32(3, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchSeenCountOfChannelMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            limit: this.limit
        };
    }
}
FetchSeenCountOfChannelMessageReq.id = 'proto.pub.v1.query.FetchSeenCountOfChannelMessageReq';
/**
 * Message implementation for proto.pub.v1.query.FetchSeenCountOfChannelMessageRes
 */
class FetchSeenCountOfChannelMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchSeenCountOfChannelMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.seenCounts = (_value.seenCounts || []).map(m => new FetchSeenCountOfChannelMessageRes.SeenCount(m));
        FetchSeenCountOfChannelMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchSeenCountOfChannelMessageRes();
        FetchSeenCountOfChannelMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.seenCounts = _instance.seenCounts || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new FetchSeenCountOfChannelMessageRes.SeenCount();
                    _reader.readMessage(messageInitializer1, FetchSeenCountOfChannelMessageRes.SeenCount
                        .deserializeBinaryFromReader);
                    (_instance.seenCounts = _instance.seenCounts || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchSeenCountOfChannelMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.seenCounts && _instance.seenCounts.length) {
            _writer.writeRepeatedMessage(1, _instance.seenCounts, FetchSeenCountOfChannelMessageRes.SeenCount.serializeBinaryToWriter);
        }
    }
    get seenCounts() {
        return this._seenCounts;
    }
    set seenCounts(value) {
        this._seenCounts = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchSeenCountOfChannelMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            seenCounts: (this.seenCounts || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            seenCounts: (this.seenCounts || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchSeenCountOfChannelMessageRes.id = 'proto.pub.v1.query.FetchSeenCountOfChannelMessageRes';
(function (FetchSeenCountOfChannelMessageRes) {
    /**
     * Message implementation for proto.pub.v1.query.SeenCount
     */
    class SeenCount {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of SeenCount to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.count = _value.count;
            this.messageId = _value.messageId;
            SeenCount.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new SeenCount();
            SeenCount.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.count = _instance.count || '0';
            _instance.messageId = _instance.messageId || '0';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.count = _reader.readInt64String();
                        break;
                    case 2:
                        _instance.messageId = _reader.readInt64String();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            SeenCount.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.count) {
                _writer.writeInt64String(1, _instance.count);
            }
            if (_instance.messageId) {
                _writer.writeInt64String(2, _instance.messageId);
            }
        }
        get count() {
            return this._count;
        }
        set count(value) {
            this._count = value;
        }
        get messageId() {
            return this._messageId;
        }
        set messageId(value) {
            this._messageId = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            SeenCount.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                count: this.count,
                messageId: this.messageId
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                count: this.count,
                messageId: this.messageId
            };
        }
    }
    SeenCount.id = 'proto.pub.v1.query.SeenCount';
    FetchSeenCountOfChannelMessageRes.SeenCount = SeenCount;
})(FetchSeenCountOfChannelMessageRes || (FetchSeenCountOfChannelMessageRes = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchUserCallsReq
 */
class FetchUserCallsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchUserCallsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        this.pointer = _value.pointer;
        this.year = _value.year;
        this.month = _value.month;
        this.fetchingDirectionType = _value.fetchingDirectionType;
        this.limit = _value.limit;
        FetchUserCallsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchUserCallsReq();
        FetchUserCallsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
        _instance.pointer = _instance.pointer || '0';
        _instance.year = _instance.year || 0;
        _instance.month = _instance.month || 0;
        _instance.fetchingDirectionType = _instance.fetchingDirectionType || 0;
        _instance.limit = _instance.limit || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.year = _reader.readInt32();
                    break;
                case 4:
                    _instance.month = _reader.readInt32();
                    break;
                case 5:
                    _instance.fetchingDirectionType = _reader.readEnum();
                    break;
                case 6:
                    _instance.limit = _reader.readInt32();
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchUserCallsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.year) {
            _writer.writeInt32(3, _instance.year);
        }
        if (_instance.month) {
            _writer.writeInt32(4, _instance.month);
        }
        if (_instance.fetchingDirectionType) {
            _writer.writeEnum(5, _instance.fetchingDirectionType);
        }
        if (_instance.limit) {
            _writer.writeInt32(6, _instance.limit);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get year() {
        return this._year;
    }
    set year(value) {
        this._year = value;
    }
    get month() {
        return this._month;
    }
    set month(value) {
        this._month = value;
    }
    get fetchingDirectionType() {
        return this._fetchingDirectionType;
    }
    set fetchingDirectionType(value) {
        this._fetchingDirectionType = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchUserCallsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined,
            pointer: this.pointer,
            year: this.year,
            month: this.month,
            fetchingDirectionType: this.fetchingDirectionType,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null,
            pointer: this.pointer,
            year: this.year,
            month: this.month,
            fetchingDirectionType: FetchUserCallsReq.FetchingDirectionType[this.fetchingDirectionType === null ||
                this.fetchingDirectionType === undefined
                ? 0
                : this.fetchingDirectionType],
            limit: this.limit
        };
    }
}
FetchUserCallsReq.id = 'proto.pub.v1.query.FetchUserCallsReq';
(function (FetchUserCallsReq) {
    let FetchingDirectionType;
    (function (FetchingDirectionType) {
        FetchingDirectionType[FetchingDirectionType["FORWARD_FETCH"] = 0] = "FORWARD_FETCH";
        FetchingDirectionType[FetchingDirectionType["BACKWARD_FETCH"] = 1] = "BACKWARD_FETCH";
    })(FetchingDirectionType = FetchUserCallsReq.FetchingDirectionType || (FetchUserCallsReq.FetchingDirectionType = {}));
})(FetchUserCallsReq || (FetchUserCallsReq = {}));
/**
 * Message implementation for proto.pub.v1.query.FetchUserCallsRes
 */
class FetchUserCallsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of FetchUserCallsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.cellEvents = (_value.cellEvents || []).map(m => new CallInfo(m));
        FetchUserCallsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new FetchUserCallsRes();
        FetchUserCallsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.cellEvents = _instance.cellEvents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new CallInfo();
                    _reader.readMessage(messageInitializer1, CallInfo.deserializeBinaryFromReader);
                    (_instance.cellEvents = _instance.cellEvents || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        FetchUserCallsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.cellEvents && _instance.cellEvents.length) {
            _writer.writeRepeatedMessage(1, _instance.cellEvents, CallInfo.serializeBinaryToWriter);
        }
    }
    get cellEvents() {
        return this._cellEvents;
    }
    set cellEvents(value) {
        this._cellEvents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        FetchUserCallsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            cellEvents: (this.cellEvents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            cellEvents: (this.cellEvents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
FetchUserCallsRes.id = 'proto.pub.v1.query.FetchUserCallsRes';
/**
 * Message implementation for proto.pub.v1.query.UpdateMessageReq
 */
class UpdateMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messageId = _value.messageId;
        this.message = _value.message
            ? new MessageByClient(_value.message)
            : undefined;
        UpdateMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateMessageReq();
        UpdateMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messageId = _instance.messageId || '0';
        _instance.message = _instance.message || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 2:
                    _instance.message = new MessageByClient();
                    _reader.readMessage(_instance.message, MessageByClient.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messageId) {
            _writer.writeInt64String(1, _instance.messageId);
        }
        if (_instance.message) {
            _writer.writeMessage(2, _instance.message, MessageByClient.serializeBinaryToWriter);
        }
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        this._message = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messageId: this.messageId,
            message: this.message ? this.message.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messageId: this.messageId,
            message: this.message ? this.message.toProtobufJSON(options) : null
        };
    }
}
UpdateMessageReq.id = 'proto.pub.v1.query.UpdateMessageReq';
/**
 * Message implementation for proto.pub.v1.query.UpdateMessageRes
 */
class UpdateMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        UpdateMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateMessageRes();
        UpdateMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        UpdateMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
UpdateMessageRes.id = 'proto.pub.v1.query.UpdateMessageRes';
/**
 * Message implementation for proto.pub.v1.query.DeleteMessageReq
 */
class DeleteMessageReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteMessageReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messageId = _value.messageId;
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        DeleteMessageReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteMessageReq();
        DeleteMessageReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messageId = _instance.messageId || '0';
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.messageId = _reader.readInt64String();
                    break;
                case 2:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteMessageReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messageId) {
            _writer.writeInt64String(1, _instance.messageId);
        }
        if (_instance.roomUid) {
            _writer.writeMessage(2, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
    }
    get messageId() {
        return this._messageId;
    }
    set messageId(value) {
        this._messageId = value;
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteMessageReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messageId: this.messageId,
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messageId: this.messageId,
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
DeleteMessageReq.id = 'proto.pub.v1.query.DeleteMessageReq';
/**
 * Message implementation for proto.pub.v1.query.DeleteMessageRes
 */
class DeleteMessageRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteMessageRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        DeleteMessageRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteMessageRes();
        DeleteMessageRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        DeleteMessageRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteMessageRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
DeleteMessageRes.id = 'proto.pub.v1.query.DeleteMessageRes';
/**
 * Message implementation for proto.pub.v1.query.RemovePrivateRoomReq
 */
class RemovePrivateRoomReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemovePrivateRoomReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.roomUid = _value.roomUid
            ? new Uid(_value.roomUid)
            : undefined;
        RemovePrivateRoomReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemovePrivateRoomReq();
        RemovePrivateRoomReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.roomUid = _instance.roomUid || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.roomUid = new Uid();
                    _reader.readMessage(_instance.roomUid, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemovePrivateRoomReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.roomUid) {
            _writer.writeMessage(1, _instance.roomUid, Uid.serializeBinaryToWriter);
        }
    }
    get roomUid() {
        return this._roomUid;
    }
    set roomUid(value) {
        this._roomUid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemovePrivateRoomReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            roomUid: this.roomUid ? this.roomUid.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            roomUid: this.roomUid ? this.roomUid.toProtobufJSON(options) : null
        };
    }
}
RemovePrivateRoomReq.id = 'proto.pub.v1.query.RemovePrivateRoomReq';
/**
 * Message implementation for proto.pub.v1.query.RemovePrivateRoomRes
 */
class RemovePrivateRoomRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemovePrivateRoomRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemovePrivateRoomRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemovePrivateRoomRes();
        RemovePrivateRoomRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemovePrivateRoomRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemovePrivateRoomRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemovePrivateRoomRes.id = 'proto.pub.v1.query.RemovePrivateRoomRes';
/**
 * Message implementation for proto.pub.v1.query.AddAvatarReq
 */
class AddAvatarReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = _value.avatar
            ? new Avatar(_value.avatar)
            : undefined;
        AddAvatarReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddAvatarReq();
        AddAvatarReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.avatar = new Avatar();
                    _reader.readMessage(_instance.avatar, Avatar.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        AddAvatarReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar) {
            _writer.writeMessage(1, _instance.avatar, Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddAvatarReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: this.avatar ? this.avatar.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null
        };
    }
}
AddAvatarReq.id = 'proto.pub.v1.query.AddAvatarReq';
/**
 * Message implementation for proto.pub.v1.query.AddAvatarRes
 */
class AddAvatarRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of AddAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        AddAvatarRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new AddAvatarRes();
        AddAvatarRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        AddAvatarRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        AddAvatarRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
AddAvatarRes.id = 'proto.pub.v1.query.AddAvatarRes';
/**
 * Message implementation for proto.pub.v1.query.RemoveAvatarReq
 */
class RemoveAvatarReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveAvatarReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.avatar = _value.avatar
            ? new Avatar(_value.avatar)
            : undefined;
        RemoveAvatarReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveAvatarReq();
        RemoveAvatarReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.avatar = _instance.avatar || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.avatar = new Avatar();
                    _reader.readMessage(_instance.avatar, Avatar.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        RemoveAvatarReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.avatar) {
            _writer.writeMessage(1, _instance.avatar, Avatar.serializeBinaryToWriter);
        }
    }
    get avatar() {
        return this._avatar;
    }
    set avatar(value) {
        this._avatar = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveAvatarReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            avatar: this.avatar ? this.avatar.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            avatar: this.avatar ? this.avatar.toProtobufJSON(options) : null
        };
    }
}
RemoveAvatarReq.id = 'proto.pub.v1.query.RemoveAvatarReq';
/**
 * Message implementation for proto.pub.v1.query.RemoveAvatarRes
 */
class RemoveAvatarRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of RemoveAvatarRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        RemoveAvatarRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new RemoveAvatarRes();
        RemoveAvatarRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        RemoveAvatarRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        RemoveAvatarRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
RemoveAvatarRes.id = 'proto.pub.v1.query.RemoveAvatarRes';
/**
 * Message implementation for proto.pub.v1.query.SearchInMessagesReq
 */
class SearchInMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchInMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.searchTerm = _value.searchTerm;
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        this.rooms = (_value.rooms || []).map(m => new Uid(m));
        SearchInMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchInMessagesReq();
        SearchInMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.searchTerm = _instance.searchTerm || '';
        _instance.pointer = _instance.pointer || '0';
        _instance.limit = _instance.limit || '0';
        _instance.rooms = _instance.rooms || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.searchTerm = _reader.readString();
                    break;
                case 2:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 3:
                    _instance.limit = _reader.readInt64String();
                    break;
                case 4:
                    const messageInitializer4 = new Uid();
                    _reader.readMessage(messageInitializer4, Uid.deserializeBinaryFromReader);
                    (_instance.rooms = _instance.rooms || []).push(messageInitializer4);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchInMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.searchTerm) {
            _writer.writeString(1, _instance.searchTerm);
        }
        if (_instance.pointer) {
            _writer.writeInt64String(2, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt64String(3, _instance.limit);
        }
        if (_instance.rooms && _instance.rooms.length) {
            _writer.writeRepeatedMessage(4, _instance.rooms, Uid.serializeBinaryToWriter);
        }
    }
    get searchTerm() {
        return this._searchTerm;
    }
    set searchTerm(value) {
        this._searchTerm = value;
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    get rooms() {
        return this._rooms;
    }
    set rooms(value) {
        this._rooms = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchInMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            searchTerm: this.searchTerm,
            pointer: this.pointer,
            limit: this.limit,
            rooms: (this.rooms || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            searchTerm: this.searchTerm,
            pointer: this.pointer,
            limit: this.limit,
            rooms: (this.rooms || []).map(m => m.toProtobufJSON(options))
        };
    }
}
SearchInMessagesReq.id = 'proto.pub.v1.query.SearchInMessagesReq';
/**
 * Message implementation for proto.pub.v1.query.MessageMetadata
 */
class MessageMetadata {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of MessageMetadata to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        this.time = _value.time;
        this.from = _value.from
            ? new Uid(_value.from)
            : undefined;
        this.to = _value.to ? new Uid(_value.to) : undefined;
        this.text = _value.text;
        MessageMetadata.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new MessageMetadata();
        MessageMetadata.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '0';
        _instance.time = _instance.time || '0';
        _instance.from = _instance.from || undefined;
        _instance.to = _instance.to || undefined;
        _instance.text = _instance.text || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readInt64String();
                    break;
                case 2:
                    _instance.time = _reader.readInt64String();
                    break;
                case 3:
                    _instance.from = new Uid();
                    _reader.readMessage(_instance.from, Uid.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.to = new Uid();
                    _reader.readMessage(_instance.to, Uid.deserializeBinaryFromReader);
                    break;
                case 5:
                    _instance.text = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        MessageMetadata.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeInt64String(1, _instance.id);
        }
        if (_instance.time) {
            _writer.writeInt64String(2, _instance.time);
        }
        if (_instance.from) {
            _writer.writeMessage(3, _instance.from, Uid.serializeBinaryToWriter);
        }
        if (_instance.to) {
            _writer.writeMessage(4, _instance.to, Uid.serializeBinaryToWriter);
        }
        if (_instance.text) {
            _writer.writeString(5, _instance.text);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    get time() {
        return this._time;
    }
    set time(value) {
        this._time = value;
    }
    get from() {
        return this._from;
    }
    set from(value) {
        this._from = value;
    }
    get to() {
        return this._to;
    }
    set to(value) {
        this._to = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        MessageMetadata.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toObject() : undefined,
            to: this.to ? this.to.toObject() : undefined,
            text: this.text
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id,
            time: this.time,
            from: this.from ? this.from.toProtobufJSON(options) : null,
            to: this.to ? this.to.toProtobufJSON(options) : null,
            text: this.text
        };
    }
}
MessageMetadata.id = 'proto.pub.v1.query.MessageMetadata';
/**
 * Message implementation for proto.pub.v1.query.SearchInMessagesRes
 */
class SearchInMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SearchInMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.messages = (_value.messages || []).map(m => new MessageMetadata(m));
        this.finished = _value.finished;
        SearchInMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SearchInMessagesRes();
        SearchInMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.messages = _instance.messages || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new MessageMetadata();
                    _reader.readMessage(messageInitializer1, MessageMetadata.deserializeBinaryFromReader);
                    (_instance.messages = _instance.messages || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        SearchInMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.messages && _instance.messages.length) {
            _writer.writeRepeatedMessage(1, _instance.messages, MessageMetadata.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get messages() {
        return this._messages;
    }
    set messages(value) {
        this._messages = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SearchInMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            messages: (this.messages || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            messages: (this.messages || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
SearchInMessagesRes.id = 'proto.pub.v1.query.SearchInMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.SendGlitchReq
 */
class SendGlitchReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendGlitchReq to deeply clone from
     */
    constructor(_value) {
        this._glitch = SendGlitchReq.GlitchCase.none;
        _value = _value || {};
        this.offlineNotification = _value.offlineNotification
            ? new GlitchOfOfflineNotification(_value.offlineNotification)
            : undefined;
        SendGlitchReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendGlitchReq();
        SendGlitchReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.offlineNotification = new GlitchOfOfflineNotification();
                    _reader.readMessage(_instance.offlineNotification, GlitchOfOfflineNotification.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        SendGlitchReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.offlineNotification) {
            _writer.writeMessage(1, _instance.offlineNotification, GlitchOfOfflineNotification.serializeBinaryToWriter);
        }
    }
    get offlineNotification() {
        return this._offlineNotification;
    }
    set offlineNotification(value) {
        if (value !== undefined && value !== null) {
            this._glitch = SendGlitchReq.GlitchCase.offlineNotification;
        }
        this._offlineNotification = value;
    }
    get glitch() {
        return this._glitch;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendGlitchReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            offlineNotification: this.offlineNotification
                ? this.offlineNotification.toObject()
                : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            offlineNotification: this.offlineNotification
                ? this.offlineNotification.toProtobufJSON(options)
                : null
        };
    }
}
SendGlitchReq.id = 'proto.pub.v1.query.SendGlitchReq';
(function (SendGlitchReq) {
    let GlitchCase;
    (function (GlitchCase) {
        GlitchCase[GlitchCase["none"] = 0] = "none";
        GlitchCase[GlitchCase["offlineNotification"] = 1] = "offlineNotification";
    })(GlitchCase = SendGlitchReq.GlitchCase || (SendGlitchReq.GlitchCase = {}));
})(SendGlitchReq || (SendGlitchReq = {}));
/**
 * Message implementation for proto.pub.v1.query.GlitchOfOfflineNotification
 */
class GlitchOfOfflineNotification {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GlitchOfOfflineNotification to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new Uid(_value.room)
            : undefined;
        GlitchOfOfflineNotification.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GlitchOfOfflineNotification();
        GlitchOfOfflineNotification.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new Uid();
                    _reader.readMessage(_instance.room, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GlitchOfOfflineNotification.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, Uid.serializeBinaryToWriter);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GlitchOfOfflineNotification.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null
        };
    }
}
GlitchOfOfflineNotification.id = 'proto.pub.v1.query.GlitchOfOfflineNotification';
/**
 * Message implementation for proto.pub.v1.query.SendGlitchRes
 */
class SendGlitchRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of SendGlitchRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        SendGlitchRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new SendGlitchRes();
        SendGlitchRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        SendGlitchRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        SendGlitchRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
SendGlitchRes.id = 'proto.pub.v1.query.SendGlitchRes';
/**
 * Message implementation for proto.pub.v1.query.GetTimeReq
 */
class GetTimeReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTimeReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetTimeReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTimeReq();
        GetTimeReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetTimeReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTimeReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetTimeReq.id = 'proto.pub.v1.query.GetTimeReq';
/**
 * Message implementation for proto.pub.v1.query.GetTimeRes
 */
class GetTimeRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTimeRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.currentTime = _value.currentTime;
        GetTimeRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTimeRes();
        GetTimeRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.currentTime = _instance.currentTime || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.currentTime = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTimeRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.currentTime) {
            _writer.writeInt64String(1, _instance.currentTime);
        }
    }
    get currentTime() {
        return this._currentTime;
    }
    set currentTime(value) {
        this._currentTime = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTimeRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            currentTime: this.currentTime
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            currentTime: this.currentTime
        };
    }
}
GetTimeRes.id = 'proto.pub.v1.query.GetTimeRes';
/**
 * Message implementation for proto.pub.v1.query.ForwardMessagesReq
 */
class ForwardMessagesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ForwardMessagesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.fromRoom = _value.fromRoom
            ? new Uid(_value.fromRoom)
            : undefined;
        this.toRoom = _value.toRoom
            ? new Uid(_value.toRoom)
            : undefined;
        this.messageIdList = (_value.messageIdList || []).slice();
        ForwardMessagesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ForwardMessagesReq();
        ForwardMessagesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.fromRoom = _instance.fromRoom || undefined;
        _instance.toRoom = _instance.toRoom || undefined;
        _instance.messageIdList = _instance.messageIdList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.fromRoom = new Uid();
                    _reader.readMessage(_instance.fromRoom, Uid.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.toRoom = new Uid();
                    _reader.readMessage(_instance.toRoom, Uid.deserializeBinaryFromReader);
                    break;
                case 3:
                    (_instance.messageIdList = _instance.messageIdList || []).push(...(_reader.readPackedInt64String() || []));
                    break;
                default:
                    _reader.skipField();
            }
        }
        ForwardMessagesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.fromRoom) {
            _writer.writeMessage(1, _instance.fromRoom, Uid.serializeBinaryToWriter);
        }
        if (_instance.toRoom) {
            _writer.writeMessage(2, _instance.toRoom, Uid.serializeBinaryToWriter);
        }
        if (_instance.messageIdList && _instance.messageIdList.length) {
            _writer.writePackedInt64String(3, _instance.messageIdList);
        }
    }
    get fromRoom() {
        return this._fromRoom;
    }
    set fromRoom(value) {
        this._fromRoom = value;
    }
    get toRoom() {
        return this._toRoom;
    }
    set toRoom(value) {
        this._toRoom = value;
    }
    get messageIdList() {
        return this._messageIdList;
    }
    set messageIdList(value) {
        this._messageIdList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ForwardMessagesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            fromRoom: this.fromRoom ? this.fromRoom.toObject() : undefined,
            toRoom: this.toRoom ? this.toRoom.toObject() : undefined,
            messageIdList: (this.messageIdList || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            fromRoom: this.fromRoom ? this.fromRoom.toProtobufJSON(options) : null,
            toRoom: this.toRoom ? this.toRoom.toProtobufJSON(options) : null,
            messageIdList: (this.messageIdList || []).slice()
        };
    }
}
ForwardMessagesReq.id = 'proto.pub.v1.query.ForwardMessagesReq';
/**
 * Message implementation for proto.pub.v1.query.ForwardMessagesRes
 */
class ForwardMessagesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ForwardMessagesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        ForwardMessagesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ForwardMessagesRes();
        ForwardMessagesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        ForwardMessagesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ForwardMessagesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
ForwardMessagesRes.id = 'proto.pub.v1.query.ForwardMessagesRes';
/**
 * Message implementation for proto.pub.v1.query.CreateGroupCallReq
 */
class CreateGroupCallReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateGroupCallReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new Uid(_value.room)
            : undefined;
        CreateGroupCallReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateGroupCallReq();
        CreateGroupCallReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new Uid();
                    _reader.readMessage(_instance.room, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateGroupCallReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, Uid.serializeBinaryToWriter);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateGroupCallReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null
        };
    }
}
CreateGroupCallReq.id = 'proto.pub.v1.query.CreateGroupCallReq';
/**
 * Message implementation for proto.pub.v1.query.CreateGroupCallRes
 */
class CreateGroupCallRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateGroupCallRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.token = _value.token;
        CreateGroupCallRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateGroupCallRes();
        CreateGroupCallRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.token = _instance.token || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.token = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateGroupCallRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.token) {
            _writer.writeString(1, _instance.token);
        }
    }
    get token() {
        return this._token;
    }
    set token(value) {
        this._token = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateGroupCallRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            token: this.token
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            token: this.token
        };
    }
}
CreateGroupCallRes.id = 'proto.pub.v1.query.CreateGroupCallRes';
/**
 * Message implementation for proto.pub.v1.query.EndGroupCallReq
 */
class EndGroupCallReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EndGroupCallReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.room = _value.room
            ? new Uid(_value.room)
            : undefined;
        EndGroupCallReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EndGroupCallReq();
        EndGroupCallReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.room = _instance.room || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.room = new Uid();
                    _reader.readMessage(_instance.room, Uid.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        EndGroupCallReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.room) {
            _writer.writeMessage(1, _instance.room, Uid.serializeBinaryToWriter);
        }
    }
    get room() {
        return this._room;
    }
    set room(value) {
        this._room = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EndGroupCallReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            room: this.room ? this.room.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            room: this.room ? this.room.toProtobufJSON(options) : null
        };
    }
}
EndGroupCallReq.id = 'proto.pub.v1.query.EndGroupCallReq';
/**
 * Message implementation for proto.pub.v1.query.EndGroupCallRes
 */
class EndGroupCallRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of EndGroupCallRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        EndGroupCallRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new EndGroupCallRes();
        EndGroupCallRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        EndGroupCallRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        EndGroupCallRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
EndGroupCallRes.id = 'proto.pub.v1.query.EndGroupCallRes';
/**
 * Message implementation for proto.pub.v1.query.GetShowcasesReq
 */
class GetShowcasesReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetShowcasesReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.pointer = _value.pointer;
        this.limit = _value.limit;
        GetShowcasesReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetShowcasesReq();
        GetShowcasesReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.pointer = _instance.pointer || '0';
        _instance.limit = _instance.limit || '0';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.pointer = _reader.readInt64String();
                    break;
                case 2:
                    _instance.limit = _reader.readInt64String();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetShowcasesReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.pointer) {
            _writer.writeInt64String(1, _instance.pointer);
        }
        if (_instance.limit) {
            _writer.writeInt64String(2, _instance.limit);
        }
    }
    get pointer() {
        return this._pointer;
    }
    set pointer(value) {
        this._pointer = value;
    }
    get limit() {
        return this._limit;
    }
    set limit(value) {
        this._limit = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetShowcasesReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            pointer: this.pointer,
            limit: this.limit
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            pointer: this.pointer,
            limit: this.limit
        };
    }
}
GetShowcasesReq.id = 'proto.pub.v1.query.GetShowcasesReq';
/**
 * Message implementation for proto.pub.v1.query.GetShowcasesRes
 */
class GetShowcasesRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetShowcasesRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.showcases = (_value.showcases || []).map(m => new Showcase(m));
        this.finished = _value.finished;
        GetShowcasesRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetShowcasesRes();
        GetShowcasesRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.showcases = _instance.showcases || [];
        _instance.finished = _instance.finished || false;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Showcase();
                    _reader.readMessage(messageInitializer1, Showcase.deserializeBinaryFromReader);
                    (_instance.showcases = _instance.showcases || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.finished = _reader.readBool();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetShowcasesRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.showcases && _instance.showcases.length) {
            _writer.writeRepeatedMessage(1, _instance.showcases, Showcase.serializeBinaryToWriter);
        }
        if (_instance.finished) {
            _writer.writeBool(2, _instance.finished);
        }
    }
    get showcases() {
        return this._showcases;
    }
    set showcases(value) {
        this._showcases = value;
    }
    get finished() {
        return this._finished;
    }
    set finished(value) {
        this._finished = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetShowcasesRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            showcases: (this.showcases || []).map(m => m.toObject()),
            finished: this.finished
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            showcases: (this.showcases || []).map(m => m.toProtobufJSON(options)),
            finished: this.finished
        };
    }
}
GetShowcasesRes.id = 'proto.pub.v1.query.GetShowcasesRes';

var query_pb$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    IdIsAvailableReq: IdIsAvailableReq,
    IdIsAvailableRes: IdIsAvailableRes,
    SetIdReq: SetIdReq,
    SetIdRes: SetIdRes,
    SubscribeOnGroupActivityReq: SubscribeOnGroupActivityReq,
    SubscribeOnGroupActivityRes: SubscribeOnGroupActivityRes,
    BlockUidReq: BlockUidReq,
    BlockUidRes: BlockUidRes,
    GetBlockedListReq: GetBlockedListReq,
    GetBlockedListRes: GetBlockedListRes,
    UnblockUidReq: UnblockUidReq,
    UnblockUidRes: UnblockUidRes,
    ReportReq: ReportReq,
    ReportRes: ReportRes,
    GetIdByUidReq: GetIdByUidReq,
    GetIdByUidRes: GetIdByUidRes,
    GetUidByIdReq: GetUidByIdReq,
    GetUidByIdRes: GetUidByIdRes,
    GetLastActivityReq: GetLastActivityReq,
    GetLastActivityRes: GetLastActivityRes,
    SearchUidReq: SearchUidReq,
    get SearchUidRes () { return SearchUidRes; },
    get FetchMessagesReq () { return FetchMessagesReq; },
    FetchMessagesRes: FetchMessagesRes,
    CountIsHiddenMessagesReq: CountIsHiddenMessagesReq,
    CountIsHiddenMessagesRes: CountIsHiddenMessagesRes,
    GetAllUserRoomMetaReq: GetAllUserRoomMetaReq,
    GetAllUserRoomMetaRes: GetAllUserRoomMetaRes,
    GetUserRoomMetaReq: GetUserRoomMetaReq,
    GetUserRoomMetaRes: GetUserRoomMetaRes,
    GetMediaMetadataReq: GetMediaMetadataReq,
    GetMediaMetadataRes: GetMediaMetadataRes,
    get FetchMediasReq () { return FetchMediasReq; },
    FetchMediasRes: FetchMediasRes,
    GetMetaCountsReq: GetMetaCountsReq,
    GetMetaCountsRes: GetMetaCountsRes,
    get FetchMetaReq () { return FetchMetaReq; },
    FetchMetaRes: FetchMetaRes,
    FetchMentionListReq: FetchMentionListReq,
    FetchMentionListRes: FetchMentionListRes,
    FetchCurrentUserSeenDataReq: FetchCurrentUserSeenDataReq,
    FetchCurrentUserSeenDataRes: FetchCurrentUserSeenDataRes,
    FetchLastOtherUserSeenDataReq: FetchLastOtherUserSeenDataReq,
    FetchLastOtherUserSeenDataRes: FetchLastOtherUserSeenDataRes,
    FetchSeenCountOfChannelMessageReq: FetchSeenCountOfChannelMessageReq,
    get FetchSeenCountOfChannelMessageRes () { return FetchSeenCountOfChannelMessageRes; },
    get FetchUserCallsReq () { return FetchUserCallsReq; },
    FetchUserCallsRes: FetchUserCallsRes,
    UpdateMessageReq: UpdateMessageReq,
    UpdateMessageRes: UpdateMessageRes,
    DeleteMessageReq: DeleteMessageReq,
    DeleteMessageRes: DeleteMessageRes,
    RemovePrivateRoomReq: RemovePrivateRoomReq,
    RemovePrivateRoomRes: RemovePrivateRoomRes,
    AddAvatarReq: AddAvatarReq,
    AddAvatarRes: AddAvatarRes,
    RemoveAvatarReq: RemoveAvatarReq,
    RemoveAvatarRes: RemoveAvatarRes,
    SearchInMessagesReq: SearchInMessagesReq,
    MessageMetadata: MessageMetadata,
    SearchInMessagesRes: SearchInMessagesRes,
    get SendGlitchReq () { return SendGlitchReq; },
    GlitchOfOfflineNotification: GlitchOfOfflineNotification,
    SendGlitchRes: SendGlitchRes,
    GetTimeReq: GetTimeReq,
    GetTimeRes: GetTimeRes,
    ForwardMessagesReq: ForwardMessagesReq,
    ForwardMessagesRes: ForwardMessagesRes,
    CreateGroupCallReq: CreateGroupCallReq,
    CreateGroupCallRes: CreateGroupCallRes,
    EndGroupCallReq: EndGroupCallReq,
    EndGroupCallRes: EndGroupCallRes,
    GetShowcasesReq: GetShowcasesReq,
    GetShowcasesRes: GetShowcasesRes
});

/* tslint:disable */
/**
 * Specific GrpcClientSettings for QueryService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_QUERY_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_QUERY_SERVICE_CLIENT_SETTINGS');

var query_pbconf$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GRPC_QUERY_SERVICE_CLIENT_SETTINGS: GRPC_QUERY_SERVICE_CLIENT_SETTINGS
});

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.query.QueryService
 */
class QueryServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetTime
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetTimeRes>>
             */
            getTime: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetTime',
                    requestData,
                    requestMetadata,
                    requestClass: GetTimeReq,
                    responseClass: GetTimeRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/IdIsAvailable
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.IdIsAvailableRes>>
             */
            idIsAvailable: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/IdIsAvailable',
                    requestData,
                    requestMetadata,
                    requestClass: IdIsAvailableReq,
                    responseClass: IdIsAvailableRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/SetId
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SetIdRes>>
             */
            setId: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/SetId',
                    requestData,
                    requestMetadata,
                    requestClass: SetIdReq,
                    responseClass: SetIdRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/BlockUid
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.BlockUidRes>>
             */
            blockUid: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/BlockUid',
                    requestData,
                    requestMetadata,
                    requestClass: BlockUidReq,
                    responseClass: BlockUidRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/UnblockUid
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UnblockUidRes>>
             */
            unblockUid: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/UnblockUid',
                    requestData,
                    requestMetadata,
                    requestClass: UnblockUidReq,
                    responseClass: UnblockUidRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/Report
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ReportRes>>
             */
            report: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/Report',
                    requestData,
                    requestMetadata,
                    requestClass: ReportReq,
                    responseClass: ReportRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetBlockedList
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetBlockedListRes>>
             */
            getBlockedList: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetBlockedList',
                    requestData,
                    requestMetadata,
                    requestClass: GetBlockedListReq,
                    responseClass: GetBlockedListRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetIdByUid
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetIdByUidRes>>
             */
            getIdByUid: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetIdByUid',
                    requestData,
                    requestMetadata,
                    requestClass: GetIdByUidReq,
                    responseClass: GetIdByUidRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetUidById
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetUidByIdRes>>
             */
            getUidById: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetUidById',
                    requestData,
                    requestMetadata,
                    requestClass: GetUidByIdReq,
                    responseClass: GetUidByIdRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/SearchUid
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SearchUidRes>>
             */
            searchUid: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/SearchUid',
                    requestData,
                    requestMetadata,
                    requestClass: SearchUidReq,
                    responseClass: SearchUidRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetLastActivity
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetLastActivityRes>>
             */
            getLastActivity: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetLastActivity',
                    requestData,
                    requestMetadata,
                    requestClass: GetLastActivityReq,
                    responseClass: GetLastActivityRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchMessagesRes>>
             */
            fetchMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchMessages',
                    requestData,
                    requestMetadata,
                    requestClass: FetchMessagesReq,
                    responseClass: FetchMessagesRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/CountIsHiddenMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CountIsHiddenMessagesRes>>
             */
            countIsHiddenMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/CountIsHiddenMessages',
                    requestData,
                    requestMetadata,
                    requestClass: CountIsHiddenMessagesReq,
                    responseClass: CountIsHiddenMessagesRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetAllUserRoomMeta
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetAllUserRoomMetaRes>>
             */
            getAllUserRoomMeta: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetAllUserRoomMeta',
                    requestData,
                    requestMetadata,
                    requestClass: GetAllUserRoomMetaReq,
                    responseClass: GetAllUserRoomMetaRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetUserRoomMeta
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetUserRoomMetaRes>>
             */
            getUserRoomMeta: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetUserRoomMeta',
                    requestData,
                    requestMetadata,
                    requestClass: GetUserRoomMetaReq,
                    responseClass: GetUserRoomMetaRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetMediaMetadata
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetMediaMetadataRes>>
             */
            getMediaMetadata: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetMediaMetadata',
                    requestData,
                    requestMetadata,
                    requestClass: GetMediaMetadataReq,
                    responseClass: GetMediaMetadataRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchMedias
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchMediasRes>>
             */
            fetchMedias: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchMedias',
                    requestData,
                    requestMetadata,
                    requestClass: FetchMediasReq,
                    responseClass: FetchMediasRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetMetaCounts
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetMetaCountsRes>>
             */
            getMetaCounts: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetMetaCounts',
                    requestData,
                    requestMetadata,
                    requestClass: GetMetaCountsReq,
                    responseClass: GetMetaCountsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchMetaList
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchMetaRes>>
             */
            fetchMetaList: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchMetaList',
                    requestData,
                    requestMetadata,
                    requestClass: FetchMetaReq,
                    responseClass: FetchMetaRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchMentionList
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchMentionListRes>>
             */
            fetchMentionList: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchMentionList',
                    requestData,
                    requestMetadata,
                    requestClass: FetchMentionListReq,
                    responseClass: FetchMentionListRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchCurrentUserSeenData
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchCurrentUserSeenDataRes>>
             */
            fetchCurrentUserSeenData: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchCurrentUserSeenData',
                    requestData,
                    requestMetadata,
                    requestClass: FetchCurrentUserSeenDataReq,
                    responseClass: FetchCurrentUserSeenDataRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchLastOtherUserSeenData
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchLastOtherUserSeenDataRes>>
             */
            fetchLastOtherUserSeenData: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchLastOtherUserSeenData',
                    requestData,
                    requestMetadata,
                    requestClass: FetchLastOtherUserSeenDataReq,
                    responseClass: FetchLastOtherUserSeenDataRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchSeenCountOfChannelMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchSeenCountOfChannelMessageRes>>
             */
            fetchSeenCountOfChannelMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchSeenCountOfChannelMessage',
                    requestData,
                    requestMetadata,
                    requestClass: FetchSeenCountOfChannelMessageReq,
                    responseClass: FetchSeenCountOfChannelMessageRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/FetchUserCalls
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.FetchUserCallsRes>>
             */
            fetchUserCalls: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/FetchUserCalls',
                    requestData,
                    requestMetadata,
                    requestClass: FetchUserCallsReq,
                    responseClass: FetchUserCallsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/UpdateMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.UpdateMessageRes>>
             */
            updateMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/UpdateMessage',
                    requestData,
                    requestMetadata,
                    requestClass: UpdateMessageReq,
                    responseClass: UpdateMessageRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/DeleteMessage
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.DeleteMessageRes>>
             */
            deleteMessage: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/DeleteMessage',
                    requestData,
                    requestMetadata,
                    requestClass: DeleteMessageReq,
                    responseClass: DeleteMessageRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/ForwardMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.ForwardMessagesRes>>
             */
            forwardMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/ForwardMessages',
                    requestData,
                    requestMetadata,
                    requestClass: ForwardMessagesReq,
                    responseClass: ForwardMessagesRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/AddAvatar
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.AddAvatarRes>>
             */
            addAvatar: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/AddAvatar',
                    requestData,
                    requestMetadata,
                    requestClass: AddAvatarReq,
                    responseClass: AddAvatarRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/RemoveAvatar
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RemoveAvatarRes>>
             */
            removeAvatar: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/RemoveAvatar',
                    requestData,
                    requestMetadata,
                    requestClass: RemoveAvatarReq,
                    responseClass: RemoveAvatarRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/RemovePrivateRoom
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.RemovePrivateRoomRes>>
             */
            removePrivateRoom: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/RemovePrivateRoom',
                    requestData,
                    requestMetadata,
                    requestClass: RemovePrivateRoomReq,
                    responseClass: RemovePrivateRoomRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/SearchInMessages
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SearchInMessagesRes>>
             */
            searchInMessages: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/SearchInMessages',
                    requestData,
                    requestMetadata,
                    requestClass: SearchInMessagesReq,
                    responseClass: SearchInMessagesRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/SendGlitch
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.SendGlitchRes>>
             */
            sendGlitch: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/SendGlitch',
                    requestData,
                    requestMetadata,
                    requestClass: SendGlitchReq,
                    responseClass: SendGlitchRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/CreateGroupCall
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.CreateGroupCallRes>>
             */
            createGroupCall: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/CreateGroupCall',
                    requestData,
                    requestMetadata,
                    requestClass: CreateGroupCallReq,
                    responseClass: CreateGroupCallRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/EndGroupCall
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.EndGroupCallRes>>
             */
            endGroupCall: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/EndGroupCall',
                    requestData,
                    requestMetadata,
                    requestClass: EndGroupCallReq,
                    responseClass: EndGroupCallRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.query.QueryService/GetShowcases
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetShowcasesRes>>
             */
            getShowcases: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.query.QueryService/GetShowcases',
                    requestData,
                    requestMetadata,
                    requestClass: GetShowcasesReq,
                    responseClass: GetShowcasesRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.query.QueryService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetTime
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetTimeRes>
     */
    getTime(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getTime(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/IdIsAvailable
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.IdIsAvailableRes>
     */
    idIsAvailable(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .idIsAvailable(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/SetId
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SetIdRes>
     */
    setId(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .setId(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/BlockUid
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.BlockUidRes>
     */
    blockUid(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .blockUid(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/UnblockUid
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UnblockUidRes>
     */
    unblockUid(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .unblockUid(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/Report
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ReportRes>
     */
    report(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .report(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetBlockedList
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetBlockedListRes>
     */
    getBlockedList(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getBlockedList(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetIdByUid
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetIdByUidRes>
     */
    getIdByUid(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getIdByUid(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetUidById
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetUidByIdRes>
     */
    getUidById(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUidById(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/SearchUid
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SearchUidRes>
     */
    searchUid(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .searchUid(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetLastActivity
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetLastActivityRes>
     */
    getLastActivity(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getLastActivity(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchMessagesRes>
     */
    fetchMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/CountIsHiddenMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CountIsHiddenMessagesRes>
     */
    countIsHiddenMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .countIsHiddenMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetAllUserRoomMeta
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetAllUserRoomMetaRes>
     */
    getAllUserRoomMeta(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getAllUserRoomMeta(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetUserRoomMeta
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetUserRoomMetaRes>
     */
    getUserRoomMeta(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getUserRoomMeta(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetMediaMetadata
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetMediaMetadataRes>
     */
    getMediaMetadata(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getMediaMetadata(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchMedias
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchMediasRes>
     */
    fetchMedias(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchMedias(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetMetaCounts
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetMetaCountsRes>
     */
    getMetaCounts(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getMetaCounts(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchMetaList
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchMetaRes>
     */
    fetchMetaList(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchMetaList(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchMentionList
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchMentionListRes>
     */
    fetchMentionList(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchMentionList(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchCurrentUserSeenData
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchCurrentUserSeenDataRes>
     */
    fetchCurrentUserSeenData(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchCurrentUserSeenData(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchLastOtherUserSeenData
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchLastOtherUserSeenDataRes>
     */
    fetchLastOtherUserSeenData(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchLastOtherUserSeenData(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchSeenCountOfChannelMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchSeenCountOfChannelMessageRes>
     */
    fetchSeenCountOfChannelMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchSeenCountOfChannelMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/FetchUserCalls
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.FetchUserCallsRes>
     */
    fetchUserCalls(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .fetchUserCalls(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/UpdateMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.UpdateMessageRes>
     */
    updateMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .updateMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/DeleteMessage
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.DeleteMessageRes>
     */
    deleteMessage(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .deleteMessage(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/ForwardMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.ForwardMessagesRes>
     */
    forwardMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .forwardMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/AddAvatar
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.AddAvatarRes>
     */
    addAvatar(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .addAvatar(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/RemoveAvatar
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RemoveAvatarRes>
     */
    removeAvatar(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removeAvatar(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/RemovePrivateRoom
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.RemovePrivateRoomRes>
     */
    removePrivateRoom(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .removePrivateRoom(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/SearchInMessages
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SearchInMessagesRes>
     */
    searchInMessages(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .searchInMessages(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/SendGlitch
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.SendGlitchRes>
     */
    sendGlitch(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .sendGlitch(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/CreateGroupCall
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.CreateGroupCallRes>
     */
    createGroupCall(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .createGroupCall(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/EndGroupCall
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.EndGroupCallRes>
     */
    endGroupCall(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .endGroupCall(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.query.QueryService/GetShowcases
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetShowcasesRes>
     */
    getShowcases(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getShowcases(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
QueryServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: QueryServiceClient, deps: [{ token: GRPC_QUERY_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
QueryServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: QueryServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: QueryServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_QUERY_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

var query_pbsc$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    QueryServiceClient: QueryServiceClient
});

var Services;
(function (Services) {
    Services[Services["PROFILE_SERVICES"] = 0] = "PROFILE_SERVICES";
    Services[Services["CORE_SERVICES"] = 1] = "CORE_SERVICES";
    Services[Services["FIREBASE_SERVICES"] = 2] = "FIREBASE_SERVICES";
    Services[Services["GROUP_SERVICES"] = 3] = "GROUP_SERVICES";
    Services[Services["CHANNEL_SERVICES"] = 4] = "CHANNEL_SERVICES";
    Services[Services["QUERY_SERVICES"] = 5] = "QUERY_SERVICES";
    Services[Services["AVATAR_SERVICES"] = 6] = "AVATAR_SERVICES";
    Services[Services["STICKER_SERVICES"] = 7] = "STICKER_SERVICES";
    Services[Services["BOT_SERVICES"] = 8] = "BOT_SERVICES";
    Services[Services["POLL_SERVICES"] = 9] = "POLL_SERVICES";
    Services[Services["LIVE_LOCATION_SERVICES"] = 10] = "LIVE_LOCATION_SERVICES";
    Services[Services["PAYMENT_SERVICE"] = 11] = "PAYMENT_SERVICE";
    Services[Services["FILE_SERVICE"] = 12] = "FILE_SERVICE";
    Services[Services["VOICE_CHAT_SERVICES"] = 13] = "VOICE_CHAT_SERVICES";
})(Services || (Services = {}));
var ServiceStatus;
(function (ServiceStatus) {
    ServiceStatus[ServiceStatus["UP"] = 0] = "UP";
    ServiceStatus[ServiceStatus["THERE_ARE_SOME_ISSUES"] = 1] = "THERE_ARE_SOME_ISSUES";
    ServiceStatus[ServiceStatus["DOWN"] = 2] = "DOWN";
})(ServiceStatus || (ServiceStatus = {}));
/**
 * Message implementation for proto.pub.v1.service_availability.GetQuerySettingsReq
 */
class GetQuerySettingsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetQuerySettingsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetQuerySettingsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetQuerySettingsReq();
        GetQuerySettingsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetQuerySettingsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetQuerySettingsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetQuerySettingsReq.id = 'proto.pub.v1.service_availability.GetQuerySettingsReq';
/**
 * Message implementation for proto.pub.v1.service_availability.GetQuerySettingsRes
 */
class GetQuerySettingsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetQuerySettingsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.regions = (_value.regions || []).slice();
        this.languages = (_value.languages || []).slice();
        GetQuerySettingsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetQuerySettingsRes();
        GetQuerySettingsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.regions = _instance.regions || [];
        _instance.languages = _instance.languages || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.regions = _instance.regions || []).push(_reader.readString());
                    break;
                case 2:
                    (_instance.languages = _instance.languages || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetQuerySettingsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.regions && _instance.regions.length) {
            _writer.writeRepeatedString(1, _instance.regions);
        }
        if (_instance.languages && _instance.languages.length) {
            _writer.writeRepeatedString(2, _instance.languages);
        }
    }
    get regions() {
        return this._regions;
    }
    set regions(value) {
        this._regions = value;
    }
    get languages() {
        return this._languages;
    }
    set languages(value) {
        this._languages = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetQuerySettingsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            regions: (this.regions || []).slice(),
            languages: (this.languages || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            regions: (this.regions || []).slice(),
            languages: (this.languages || []).slice()
        };
    }
}
GetQuerySettingsRes.id = 'proto.pub.v1.service_availability.GetQuerySettingsRes';
/**
 * Message implementation for proto.pub.v1.service_availability.GetServiceAvailabilityReq
 */
class GetServiceAvailabilityReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetServiceAvailabilityReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.service = _value.service;
        this.region = _value.region;
        this.language = _value.language;
        GetServiceAvailabilityReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetServiceAvailabilityReq();
        GetServiceAvailabilityReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.service = _instance.service || 0;
        _instance.region = _instance.region || '';
        _instance.language = _instance.language || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.service = _reader.readEnum();
                    break;
                case 2:
                    _instance.region = _reader.readString();
                    break;
                case 3:
                    _instance.language = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetServiceAvailabilityReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.service) {
            _writer.writeEnum(1, _instance.service);
        }
        if (_instance.region) {
            _writer.writeString(2, _instance.region);
        }
        if (_instance.language) {
            _writer.writeString(3, _instance.language);
        }
    }
    get service() {
        return this._service;
    }
    set service(value) {
        this._service = value;
    }
    get region() {
        return this._region;
    }
    set region(value) {
        this._region = value;
    }
    get language() {
        return this._language;
    }
    set language(value) {
        this._language = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetServiceAvailabilityReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            service: this.service,
            region: this.region,
            language: this.language
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            service: Services[this.service === null || this.service === undefined ? 0 : this.service],
            region: this.region,
            language: this.language
        };
    }
}
GetServiceAvailabilityReq.id = 'proto.pub.v1.service_availability.GetServiceAvailabilityReq';
/**
 * Message implementation for proto.pub.v1.service_availability.GetServiceAvailabilityRes
 */
class GetServiceAvailabilityRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetServiceAvailabilityRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        (this.services = _value.services
            ? Object.keys(_value.services).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: _value.services[k]
                    ? new ServiceStatusDetails(_value.services[k])
                    : undefined })), {})
            : {}),
            GetServiceAvailabilityRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetServiceAvailabilityRes();
        GetServiceAvailabilityRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.services = _instance.services || {};
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const msg_1 = {};
                    _reader.readMessage(msg_1, GetServiceAvailabilityRes.ServicesEntry.deserializeBinaryFromReader);
                    _instance.services = _instance.services || {};
                    _instance.services[msg_1.key] = msg_1.value;
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetServiceAvailabilityRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (!!_instance.services) {
            const keys_1 = Object.keys(_instance.services);
            if (keys_1.length) {
                const repeated_1 = keys_1
                    .map(key => ({ key: key, value: _instance.services[key] }))
                    .reduce((r, v) => [...r, v], []);
                _writer.writeRepeatedMessage(1, repeated_1, GetServiceAvailabilityRes.ServicesEntry.serializeBinaryToWriter);
            }
        }
    }
    get services() {
        return this._services;
    }
    set services(value) {
        this._services = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetServiceAvailabilityRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            services: this.services
                ? Object.keys(this.services).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.services[k] ? this.services[k].toObject() : undefined })), {})
                : {}
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            services: this.services
                ? Object.keys(this.services).reduce((r, k) => (Object.assign(Object.assign({}, r), { [k]: this.services[k] ? this.services[k].toJSON() : null })), {})
                : {}
        };
    }
}
GetServiceAvailabilityRes.id = 'proto.pub.v1.service_availability.GetServiceAvailabilityRes';
(function (GetServiceAvailabilityRes) {
    /**
     * Message implementation for proto.pub.v1.service_availability.ServicesEntry
     */
    class ServicesEntry {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of ServicesEntry to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.key = _value.key;
            this.value = _value.value
                ? new ServiceStatusDetails(_value.value)
                : undefined;
            ServicesEntry.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new ServicesEntry();
            ServicesEntry.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.key = _instance.key || '';
            _instance.value = _instance.value || undefined;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.key = _reader.readString();
                        break;
                    case 2:
                        _instance.value = new ServiceStatusDetails();
                        _reader.readMessage(_instance.value, ServiceStatusDetails.deserializeBinaryFromReader);
                        break;
                    default:
                        _reader.skipField();
                }
            }
            ServicesEntry.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.key) {
                _writer.writeString(1, _instance.key);
            }
            if (_instance.value) {
                _writer.writeMessage(2, _instance.value, ServiceStatusDetails.serializeBinaryToWriter);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            ServicesEntry.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                key: this.key,
                value: this.value ? this.value.toObject() : undefined
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                key: this.key,
                value: this.value ? this.value.toProtobufJSON(options) : null
            };
        }
    }
    ServicesEntry.id = 'proto.pub.v1.service_availability.ServicesEntry';
    GetServiceAvailabilityRes.ServicesEntry = ServicesEntry;
})(GetServiceAvailabilityRes || (GetServiceAvailabilityRes = {}));
/**
 * Message implementation for proto.pub.v1.service_availability.ServiceStatusDetails
 */
class ServiceStatusDetails {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ServiceStatusDetails to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.status = _value.status;
        this.message = _value.message;
        ServiceStatusDetails.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ServiceStatusDetails();
        ServiceStatusDetails.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.status = _instance.status || 0;
        _instance.message = _instance.message || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.status = _reader.readEnum();
                    break;
                case 2:
                    _instance.message = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ServiceStatusDetails.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.status) {
            _writer.writeEnum(1, _instance.status);
        }
        if (_instance.message) {
            _writer.writeString(2, _instance.message);
        }
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        this._message = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ServiceStatusDetails.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            status: this.status,
            message: this.message
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            status: ServiceStatus[this.status === null || this.status === undefined ? 0 : this.status],
            message: this.message
        };
    }
}
ServiceStatusDetails.id = 'proto.pub.v1.service_availability.ServiceStatusDetails';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for ServiceAvailability.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_SERVICE_AVAILABILITY_CLIENT_SETTINGS = new InjectionToken('GRPC_SERVICE_AVAILABILITY_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.service_availability.ServiceAvailability
 */
class ServiceAvailabilityClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.service_availability.ServiceAvailability/GetQuerySettings
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetQuerySettingsRes>>
             */
            getQuerySettings: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.service_availability.ServiceAvailability/GetQuerySettings',
                    requestData,
                    requestMetadata,
                    requestClass: GetQuerySettingsReq,
                    responseClass: GetQuerySettingsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.service_availability.ServiceAvailability/GetServiceAvailability
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetServiceAvailabilityRes>>
             */
            getServiceAvailability: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.service_availability.ServiceAvailability/GetServiceAvailability',
                    requestData,
                    requestMetadata,
                    requestClass: GetServiceAvailabilityReq,
                    responseClass: GetServiceAvailabilityRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.service_availability.ServiceAvailability', settings);
    }
    /**
     * Unary call @/proto.pub.v1.service_availability.ServiceAvailability/GetQuerySettings
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetQuerySettingsRes>
     */
    getQuerySettings(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getQuerySettings(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.service_availability.ServiceAvailability/GetServiceAvailability
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetServiceAvailabilityRes>
     */
    getServiceAvailability(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getServiceAvailability(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
ServiceAvailabilityClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ServiceAvailabilityClient, deps: [{ token: GRPC_SERVICE_AVAILABILITY_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
ServiceAvailabilityClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ServiceAvailabilityClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: ServiceAvailabilityClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_SERVICE_AVAILABILITY_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/**
 * Message implementation for proto.pub.v1.sticker.GetStickerSetByUUIDReq
 */
class GetStickerSetByUUIDReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetStickerSetByUUIDReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.uuid = _value.uuid;
        GetStickerSetByUUIDReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetStickerSetByUUIDReq();
        GetStickerSetByUUIDReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.uuid = _instance.uuid || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.uuid = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetStickerSetByUUIDReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.uuid) {
            _writer.writeString(1, _instance.uuid);
        }
    }
    get uuid() {
        return this._uuid;
    }
    set uuid(value) {
        this._uuid = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetStickerSetByUUIDReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            uuid: this.uuid
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            uuid: this.uuid
        };
    }
}
GetStickerSetByUUIDReq.id = 'proto.pub.v1.sticker.GetStickerSetByUUIDReq';
/**
 * Message implementation for proto.pub.v1.sticker.GetStickerSetByUUIDRes
 */
class GetStickerSetByUUIDRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetStickerSetByUUIDRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.set = _value.set
            ? new StickerSet(_value.set)
            : undefined;
        GetStickerSetByUUIDRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetStickerSetByUUIDRes();
        GetStickerSetByUUIDRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.set = _instance.set || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.set = new StickerSet();
                    _reader.readMessage(_instance.set, StickerSet.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetStickerSetByUUIDRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.set) {
            _writer.writeMessage(1, _instance.set, StickerSet.serializeBinaryToWriter);
        }
    }
    get set() {
        return this._set;
    }
    set set(value) {
        this._set = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetStickerSetByUUIDRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            set: this.set ? this.set.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            set: this.set ? this.set.toProtobufJSON(options) : null
        };
    }
}
GetStickerSetByUUIDRes.id = 'proto.pub.v1.sticker.GetStickerSetByUUIDRes';
/**
 * Message implementation for proto.pub.v1.sticker.GetStickerSetByIDReq
 */
class GetStickerSetByIDReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetStickerSetByIDReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.id = _value.id;
        GetStickerSetByIDReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetStickerSetByIDReq();
        GetStickerSetByIDReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.id = _instance.id || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.id = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetStickerSetByIDReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.id) {
            _writer.writeString(1, _instance.id);
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetStickerSetByIDReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            id: this.id
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            id: this.id
        };
    }
}
GetStickerSetByIDReq.id = 'proto.pub.v1.sticker.GetStickerSetByIDReq';
/**
 * Message implementation for proto.pub.v1.sticker.GetStickerSetByIDRes
 */
class GetStickerSetByIDRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetStickerSetByIDRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.set = _value.set
            ? new StickerSet(_value.set)
            : undefined;
        GetStickerSetByIDRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetStickerSetByIDRes();
        GetStickerSetByIDRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.set = _instance.set || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.set = new StickerSet();
                    _reader.readMessage(_instance.set, StickerSet.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetStickerSetByIDRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.set) {
            _writer.writeMessage(1, _instance.set, StickerSet.serializeBinaryToWriter);
        }
    }
    get set() {
        return this._set;
    }
    set set(value) {
        this._set = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetStickerSetByIDRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            set: this.set ? this.set.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            set: this.set ? this.set.toProtobufJSON(options) : null
        };
    }
}
GetStickerSetByIDRes.id = 'proto.pub.v1.sticker.GetStickerSetByIDRes';
/**
 * Message implementation for proto.pub.v1.sticker.GetTrendSetsReq
 */
class GetTrendSetsReq {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTrendSetsReq to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        GetTrendSetsReq.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTrendSetsReq();
        GetTrendSetsReq.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) { }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                default:
                    _reader.skipField();
            }
        }
        GetTrendSetsReq.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) { }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTrendSetsReq.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {};
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {};
    }
}
GetTrendSetsReq.id = 'proto.pub.v1.sticker.GetTrendSetsReq';
/**
 * Message implementation for proto.pub.v1.sticker.GetTrendSetsRes
 */
class GetTrendSetsRes {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetTrendSetsRes to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.setIdList = (_value.setIdList || []).slice();
        GetTrendSetsRes.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetTrendSetsRes();
        GetTrendSetsRes.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.setIdList = _instance.setIdList || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    (_instance.setIdList = _instance.setIdList || []).push(_reader.readString());
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetTrendSetsRes.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.setIdList && _instance.setIdList.length) {
            _writer.writeRepeatedString(1, _instance.setIdList);
        }
    }
    get setIdList() {
        return this._setIdList;
    }
    set setIdList(value) {
        this._setIdList = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetTrendSetsRes.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            setIdList: (this.setIdList || []).slice()
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            setIdList: (this.setIdList || []).slice()
        };
    }
}
GetTrendSetsRes.id = 'proto.pub.v1.sticker.GetTrendSetsRes';

/* tslint:disable */
/**
 * Specific GrpcClientSettings for StickerService.
 * Use it only if your default settings are not set or the service requires other settings.
 */
const GRPC_STICKER_SERVICE_CLIENT_SETTINGS = new InjectionToken('GRPC_STICKER_SERVICE_CLIENT_SETTINGS');

/* tslint:disable */
/**
 * Service client implementation for proto.pub.v1.sticker.StickerService
 */
class StickerServiceClient {
    constructor(settings, clientFactory, handler) {
        this.handler = handler;
        /**
         * Raw RPC implementation for each service client method.
         * The raw methods provide more control on the incoming data and events. E.g. they can be useful to read status `OK` metadata.
         * Attention: these methods do not throw errors when non-zero status codes are received.
         */
        this.$raw = {
            /**
             * Unary call: /proto.pub.v1.sticker.StickerService/GetTrendSets
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetTrendSetsRes>>
             */
            getTrendSets: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.sticker.StickerService/GetTrendSets',
                    requestData,
                    requestMetadata,
                    requestClass: GetTrendSetsReq,
                    responseClass: GetTrendSetsRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.sticker.StickerService/GetStickerSetByUUID
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetStickerSetByUUIDRes>>
             */
            getStickerSetByUUID: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.sticker.StickerService/GetStickerSetByUUID',
                    requestData,
                    requestMetadata,
                    requestClass: GetStickerSetByUUIDReq,
                    responseClass: GetStickerSetByUUIDRes
                });
            },
            /**
             * Unary call: /proto.pub.v1.sticker.StickerService/GetStickerSetByID
             *
             * @param requestMessage Request message
             * @param requestMetadata Request metadata
             * @returns Observable<GrpcEvent<thisProto.GetStickerSetByIDRes>>
             */
            getStickerSetByID: (requestData, requestMetadata = new GrpcMetadata()) => {
                return this.handler.handle({
                    type: GrpcCallType.unary,
                    client: this.client,
                    path: '/proto.pub.v1.sticker.StickerService/GetStickerSetByID',
                    requestData,
                    requestMetadata,
                    requestClass: GetStickerSetByIDReq,
                    responseClass: GetStickerSetByIDRes
                });
            }
        };
        this.client = clientFactory.createClient('proto.pub.v1.sticker.StickerService', settings);
    }
    /**
     * Unary call @/proto.pub.v1.sticker.StickerService/GetTrendSets
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetTrendSetsRes>
     */
    getTrendSets(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getTrendSets(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.sticker.StickerService/GetStickerSetByUUID
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetStickerSetByUUIDRes>
     */
    getStickerSetByUUID(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getStickerSetByUUID(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
    /**
     * Unary call @/proto.pub.v1.sticker.StickerService/GetStickerSetByID
     *
     * @param requestMessage Request message
     * @param requestMetadata Request metadata
     * @returns Observable<thisProto.GetStickerSetByIDRes>
     */
    getStickerSetByID(requestData, requestMetadata = new GrpcMetadata()) {
        return this.$raw
            .getStickerSetByID(requestData, requestMetadata)
            .pipe(throwStatusErrors(), takeMessages());
    }
}
StickerServiceClient.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: StickerServiceClient, deps: [{ token: GRPC_STICKER_SERVICE_CLIENT_SETTINGS, optional: true }, { token: GRPC_CLIENT_FACTORY }, { token: i1.GrpcHandler }], target: i0.ɵɵFactoryTarget.Injectable });
StickerServiceClient.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: StickerServiceClient, providedIn: 'any' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.7", ngImport: i0, type: StickerServiceClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'any' }]
        }], ctorParameters: function () {
        return [{ type: undefined, decorators: [{
                        type: Optional
                    }, {
                        type: Inject,
                        args: [GRPC_STICKER_SERVICE_CLIENT_SETTINGS]
                    }] }, { type: undefined, decorators: [{
                        type: Inject,
                        args: [GRPC_CLIENT_FACTORY]
                    }] }, { type: i1.GrpcHandler }];
    } });

/*
 * Public API Surface of proto
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AcceptableCurrencies, AccessTokenRes, Activity, ActivityByClient, ActivityType, AddAvatarReq$1 as AddAvatarReq, AddAvatarRes$1 as AddAvatarRes, AdminSpecificPersistentEvent, AnalyticsClient, AnalyticsCrash, AnalyticsEvent, AudioWaveform, AuthServiceClient, Avatar, AvatarServiceClient, Ban, BotServiceClient, BotSpecificPersistentEvent, Buttons, CallAnswer, CallAnswerByClient, CallEvent, CallInfo, CallOffer, CallOfferByClient, CallbackQueryReq, CallbackQueryRes, Categories, CheckQrCodeIsVerifiedAndLoginReq, ClientPacket, Commodity, Contact, ContactServiceClient, CoreServiceClient, CreateLiveLocationReq, CreateLiveLocationRes, CreatePaymentReq, CreatePaymentRes, CreatePollReq, CreatePollRes, DoPollReq, DoPollRes, DownloadLink, EditPollExpireTimeReq, EditPollExpireTimeRes, ErasePasswordReq, ErasePasswordRes, ErrorOnPacket, EstablishServerSideStreamReq, ExpletivePacket, File, FirebaseServiceClient, Form, FormQueryReq, FormQueryRes, FormQueryResult, FormResult, GRPC_ANALYTICS_CLIENT_SETTINGS, GRPC_AUTH_SERVICE_CLIENT_SETTINGS, GRPC_AVATAR_SERVICE_CLIENT_SETTINGS, GRPC_BOT_SERVICE_CLIENT_SETTINGS, GRPC_CONTACT_SERVICE_CLIENT_SETTINGS, GRPC_CORE_SERVICE_CLIENT_SETTINGS, GRPC_FIREBASE_SERVICE_CLIENT_SETTINGS, GRPC_LIVE_LOCATION_SERVICE_CLIENT_SETTINGS, GRPC_PAYMENT_SERVICE_CLIENT_SETTINGS, GRPC_POLL_SERVICE_CLIENT_SETTINGS, GRPC_SERVICE_AVAILABILITY_CLIENT_SETTINGS, GRPC_SESSION_SERVICE_CLIENT_SETTINGS, GRPC_STICKER_SERVICE_CLIENT_SETTINGS, GRPC_USER_SERVICE_CLIENT_SETTINGS, GetAvatarReq, GetAvatarRes, GetContactListReq, GetContactListRes, GetContactListUsersReq, GetContactListUsersRes, GetInfoReq, GetInfoRes, GetLastUpdatedLiveLocationReq, GetLastUpdatedLiveLocationRes, GetMeReq, GetMeRes, GetMySessionsReq, GetMySessionsRes, GetOverallResultReq, GetOverallResultRes, GetPaymentInformationReq, GetPaymentInformationRes, GetQuerySettingsReq, GetQuerySettingsRes, GetServiceAvailabilityReq, GetServiceAvailabilityRes, GetStickerSetByIDReq, GetStickerSetByIDRes, GetStickerSetByUUIDReq, GetStickerSetByUUIDRes, GetTransactionsCountReq, GetTransactionsCountRes, GetTransactionsReq, GetTransactionsRes, GetTrendSetsReq, GetTrendSetsRes, GetUserByUidReq, GetUserByUidRes, GetUserInfoReq, GetUserInfoRes, GetUserProfileReq, GetUserProfileRes, GetUsersSelectedOptionResultReq, GetUsersSelectedOptionResultRes, GetVerificationCodeReq, GetVerificationCodeRes, GetWithdrawStatusReq, GetWithdrawStatusRes, GetWithdrawTariffReq, GetWithdrawTariffRes, GetWithdrawsCountReq, GetWithdrawsCountRes, GetWithdrawsReq, GetWithdrawsRes, InlineKeyboardButton, InlineKeyboardButtonCallback, InlineKeyboardButtonUrl, InlineKeyboardMarkup, InlineKeyboardRow, InlineQueryReq, InlineQueryRes, InlineQueryResult, Link, LiveLocation, LiveLocationServiceClient, Location, LogoutSessionReq, LogoutSessionRes, Media, Member, MemeType, Message, MessageBrief, MessageByBot, MessageByClient, MessageDeliveryAck, MessageManipulationPersistentEvent, MessageMarkup, Meta, MucSpecificPersistentEvent, NewerVersionInformation, PayConfirmReq, PayConfirmRes, PayReq, PayRes, Payment, PaymentIdentityInfo, PaymentInformation, PaymentProvider, PaymentProviderType, PaymentServiceClient, PaymentStatus, PersistentEvent, PhoneNumber, Ping, Platform, PlatformsType, Poll, PollServiceClient, Pong, PresenceType, PrivateDataType, RegistrationReq, RegistrationRes, RemoveAvatarReq$1 as RemoveAvatarReq, RemoveAvatarRes$1 as RemoveAvatarRes, RenewAccessTokenReq, RenewAccessTokenRes, ReplyKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRow, ReportCrashReq, ReportCrashRes, ReportEventReq, ReportEventRes, RequiredPaymentIdentityInfo, ResendEmailVerificationReq, ResendEmailVerificationRes, RevokeAllOtherSessionsReq, RevokeAllOtherSessionsRes, RevokeSessionReq, RevokeSessionRes, Role, RoomMetadata, RoomPresenceTypeChanged, SaveContactsReq, SaveContactsRes, SaveUserProfileReq, SaveUserProfileRes, Seen, SeenByClient, SendClientPacketRes, SendErasePasswordEmailReq, SendErasePasswordEmailRes, SendFeedbackReq, SendFeedbackRes, ServerPacket, ServiceAvailabilityClient, ServiceStatus, ServiceStatusDetails, Services, Session, SessionServiceClient, SharePrivateDataAcceptance, SharePrivateDataAcceptanceData, SharePrivateDataRequest, ShareUid, ShouldSendLiveLocationReq, ShouldSendLiveLocationRes, Sticker, StickerServiceClient, StickerSet, Table, TableRow, Text, Transaction, TransferReq, TransferRes, Uid, UpdateEmailReq, UpdateEmailRes, UpdateLocationReq, UpdateLocationRes, UpdatePasswordReq, UpdatePasswordRes, UpdateSessionPlatformInformationReq, UpdateSessionPlatformInformationRes, UserAsContact, UserPrivateData, UserSearchReq, UserSearchRes, UserServiceClient, VerificationType, VerifyCodeReq, VerifyEmailAddressReq, VerifyEmailAddressRes, VerifyQrCodeTokenReq, VerifyQrCodeTokenRes, Withdraw, WithdrawReq, WithdrawRes, WithdrawStatus, channel_pb$1 as channel_pb, channel_pbconf$1 as channel_pbconf, channel_pbsc$1 as channel_pbsc, group_pb$1 as group_pb, group_pbconf$1 as group_pbconf, group_pbsc$1 as group_pbsc, query_pb$1 as query_pb, query_pbconf$1 as query_pbconf, query_pbsc$1 as query_pbsc };
//# sourceMappingURL=deliver-proto-js.mjs.map
